game.import("extension", function (lib, game, ui, get, ai, _status) {
    return {
        name: "王朝更替_策",
        editable: false,
        content: function (config, pack) {

        },
        precontent: function () {

        }, help: {}, config: {}, package: {
            character: {
                character: {
                    "Thunder task force kiva": ["none", "shen", 4, ["kivafanxiong", "wusheng"], ["zhu"]],
                    "Sentry kiva": ["male", "shen", 5, ["kivaxuwu", "kivashaobing"], ["zhu"]],
                    "Moon knight kiva": ["male", "shen", 4, ["kivayueyin"], ["zhu"]],
                    "xuchu新kiva": ["male", "wei", 4, ["luoyi", "kivaxiachan"], ["zhu"]],
                    "xiahouyuan新kiva": ["male", "wei", 4, ["xinshensu", "kivasuzi"], ["zhu"]],
                    "liubei新kiva": ["male", "shu", 4, ["kiva新renwang"], ["zhu"]],
                    "Loki kiva": ["male", "shen", 3, ["kivaczhasi"], ["zhu"]],
                    "liuqi魂kiva": ["male", "qun", 3, ["kivazhounan", "kivaawenji", "kivatunjiang"], ["zhu"]],
                    "lvbu圣临kiva": ["male", "qun", 5, ["kivawumou", "kivafenjiang", "fuhekiva_lvbu"], ["zhu"]],
                    guanzhongkiva: ["male", "sandaikiva", 3, ["kivajianzhi", "kivaxiaozhong", "kivashejun"], ["zhu"]],
                    liuzhangkiva: ["male", "qun", 3, ["zongshi", "kivaanruo"], ["zhu"]],
                    "Owen Grady kiva": ["male", "xikiva", 4, ["kivaxunlong", "kivakonglong"], ["zhu"]],
                    "Emmet kiva": ["male", "xikiva", 3, ["kivaletian", "kivajianzao"], ["zhu"]],
                    "Dr. strange kiva": ["male", "xikiva", 3, ["kivashiting", "kivahuansuo2", "kivapinghuan"], ["zhu"]],
                    "kiva法阵fazhen": ["male", "", 3, ["kivaqqiyi"], ["forbidai"]],
                    "Black panther kiva": ["male", "xikiva", 3, ["kivazhuaji", "kivazhenjin"], ["zhu"]],
                    "Thor kiva": ["male", "xikiva", 4, ["kivaleishenthor", "kivatianshen"], ["zhu"]],
                    "Fast silver kiva": ["male", "xikiva", 3, ["kivajisu", "kivayaxing"], ["zhu"]],
                    "Wolverine kiva": ["male", "xikiva", 4, ["kivajingu", "kivalangzhua"], ["zhu"]],
                    "Knell kiva": ["male", "xikiva", 5, ["kivayongbing", "kivalengxue"], ["zhu"]],
                    "sunben魂kiva": ["male", "wu", 4, ["kivapolu", "kivafuzhi"], ["zhu"]],
                    "guojia圣临kiva": ["male", "wei", 3, ["kivayice", "kivatianze", "guojia_fuhekiva"], ["zhu"]],
                    "guanyu圣临kiva": ["male", "shu", 3, ["kivawulin", "kivamengyan", "guanyu_fuhekiva"], ["zhu"]],
                    "huangzhong圣临kiva": ["male", "shu", 4, ["kivawangong", "kivabaizhong", "huangzhong_fuhekiva"], ["zhu"]],
                    "jiangwei圣临kiva": ["male", "shu", 4, ["kivaxinyan", "kivajitian", "jiangwei_fuhekiva"], ["zhu"]],
                    "lvmeng圣临kiva": ["male", "wu", 3, ["kivashexue", "kivazhanxin", "lvmeng_fuhekiva"], ["zhu"]],
                    "luxun圣临kiva": ["male", "wu", 3, ["kivaxunya", "kivajieying", "luxun_fuhekiva"], ["zhu"]],
                    "juelin圣临kiva": ["male", "wu", 4, ["kivafeizhe"], ["zhu"]],
                    "jikang魂kiva": ["male", "wei", 3, ["qingxian", "kivajuexiang"], ["zhu"]],
                    "luji魂kiva": ["male", "wu", 3, ["qianxun", "chouce", "kivahuaiju"], ["zhu"]],
                    "yujin魂kiva": ["male", "wei", 4, ["kivazhenjun"], ["zhu"]],
                    "zhangliao魂kiva": ["male", "wei", 4, ["kivatuxi魂"], ["zhu"]],
                    "yuejin魂kiva": ["male", "wei", 4, ["kivaxiaoguo"], ["zhu"]],
                    "dengai魂kiva": ["male", "wei", 3, ["tuntian", "kivaziliang"], ["zhu"]],
                    "yanwen魂kiva": ["male", "qun", 4, ["kivashuangxiong"], ["zhu"]],
                    "gaolan魂kiva": ["male", "qun", 4, ["kivaxiying"], ["zhu"]],
                    jumtaikiva: ["male", "shen", 7, ["kivamanshen", "huashen", "xinsheng"], ["boss", "bossallowed"]],
                    sunbinkiva: ["male", "sandaikiva", 3, ["kivabingfa", "kivabaoshen"], ["zhu"]],
                    "lidian魂kiva": ["male", "wei", 4, ["kivaxunxun"], ["zhu"]],
                    "yuanshao魂kiva": ["male", "qun", 4, ["kivaligong", "kivaluanji", "kivaxieyi"], ["zhu"]],
                    "huangfeihu魂kiva": ["male", "sandaikiva", 4, ["kivazhuzhen", "kivanizhan", "kivawucheng"], ["zhu"]],
                    "guopang魂kiva": ["male", "qun", 3, ["xianfu", "kivashifei", "kivaxxianji"], ["zhu"]],
                    "weiyan魂kiva": ["male", "shu", 4, ["kivakuanggu", "kivaqimou"], ["zhu"]],
                    "re_zhaoyun魂kiva": ["male", "shen", 3, ["kivayulong", "kivatengkong"], ["zhu"]],
                    "caozhen魂kiva": ["male", "wei", 3, ["kivahubao", "kivasidi"], ["zhu"]],
                    "wuming魂kiva": ["male", "zhongguokiva", 3, ["kivatucao", "kivacaodan"], ["zhu"]],
                    "lijing魂kiva": ["male", "sandaikiva", 4, ["kivabaota"], ["zhu"]],
                    "lijing2魂kiva": ["male", "tangkiva", 5, ["kivajiangcai"], ["zhu"]],
                    "suquanzhong魂kiva": ["male", "sandaikiva", 4, ["kivafuchou"], ["zhu"]],
                    "sp_liubei魂kiva": ["male", "shu", 2, ["kivarenwang", "kivajizhao"], ["forbidai"]],
                    "sp_sunquan魂kiva": ["male", "wu", 2, ["kivahengzhi", "kivayuanzhu"], ["forbidai"]],
                    "sp_caocao魂kiva": ["male", "wei", 2, ["kivashixiong", "kivahuzhen"], ["forbidai"]],
                    "liexie魂kiva": ["male", "qun", 4, ["kivakuilei", "kivatianming", "kivazhenlong"], ["zhu"]],
                    "左翔太郎 フィリップkiva": ["male", "rikiva", 4, ["kivashuangchong"], ["zhu"]],
                    "桐生战兔kiva": ["male", "rikiva", 4, ["kivatiancaibuild"], ["zhu"]],
                    "Stalin kiva": ["male", "xikiva", 15, ["kivagaigePeter", "kivajunwei2", "kivayuanping"], ["zhu"]],
                    "BismarCK kiva": ["male", "xikiva", 3, ["kivatiexue"], ["zhu"]],
                    "jiangwei魂kiva": ["male", "shu", 4, ["kivafazhan", "guanxing"], ["zhu"]],
                    "re_wenyang魂kiva": ["male", "wu", 4, ["kivajijin", "kivatuidi", "kivayingji"], ["zhu"]],
                    "zhaoyun魂kiva": ["male", "shu", 4, ["kivalongfen", "kivalongyu", "kivakongjue"], ["zhu"]],
                    "The Flash kiva": ["male", "xikiva", 3, ["xinshensu", "kivaguangsu"], ["zhu"]],
                    "Green lantern kiva": ["male", "xikiva", 3, ["kivashenjie", "kivalvdeng"], ["zhu"]],
                    "Wonder woman kiva": ["female", "xikiva", 4, ["kivazhenyan"], ["zhu"]],
                    "Iron man kiva": ["male", "xikiva", 3, ["kivajingong", "kivagangtie"], ["zhu"]],
                    "Super bat kiva": ["male", "xikiva", 4, ["kivabinglian"], ["zhu"]],
                    "zhugedan魂kiva": ["male", "wei", 4, ["kivagongao", "kivajiangzhong", "kivajuyi"], ["zhu"]],
                    "zhonghui魂kiva": ["male", "wei", 3, ["kivamoushi2", "kivacefan"], ["zhu"]],
                    "lusu魂kiva": ["male", "wu", 3, ["kivadimeng", "kivahaoshi"], ["zhu"]],
                    "ganning魂kiva": ["male", "wu", 4, ["kivaqixi"], ["zhu"]],
                    "Marco polo kiva": ["male", "xikiva", 8, ["kivaguanyuan", "kivajuebian", "kivacaijin", "kivajiushi", "kivajueji"], ["boss", "bossallowed"]],
                    "taishici魂kiva": ["male", "wu", 3, ["kivatianyi", "kivayizhan"], ["zhu"]],
                    "sunce魂kiva": ["male", "wu", 3, ["kivajiang", "kivahunshang", "kivazhiba", "kivabawang", "kivayingyang"], ["zhu"]],
                    jiangweikiva: ["male", "shu", 4, ["kivazj", "tiaoxin", "qinwang"], ["zhu"]],
                    zhaoyunkiva: ["male", "qun", 4, ["longdan", "kivaqj", "xueyi", "huangtian", "kivall"], ["zhu"]],
                    zhugeliangkiva: ["male", "shu", 4, ["kongcheng", "kivagx", "hujia", "xianfu", "buqu"], ["zhu", "forbidai"]],
                    liubeikiva: ["male", "shu", 3, ["rerende", "hongde", "kivahy"], ["zhu"]],
                    fazhengkiva: ["male", "shu", 3, ["kivaxh", "xinenyuan", "tiandu", "xianfu", "kivazf", "kivacy"], ["zhu"]],
                    jiaxukiva: ["male", "qun", 3, ["kivapj", "kivakl", "wansha", "xinjuece", "lianpo", "kiva104"], ["zhu"]],
                    xunyukiva: ["male", "wei", 3, ["kivazh", "kivayj", "kivayc"], ["zhu"]],
                    sunquankiva: ["male", "wu", 4, ["hunzi", "zhiheng", "qinwang"], ["zhu"]],
                    lingtongkiva: ["male", "wu", 3, ["xuanfeng", "kivajz"], ["zhu"]],
                    sunshangxiangkiva: ["female", "wu", 3, ["liangzhu", "xiaoji", "heqin"], ["zhu"]],
                    zhonghuikiva: ["male", "wei", 3, ["qizhi", "tiandu", "quanji", "tuntian"], ["zhu"]],
                    sunjiankiva: ["male", "wu", 5, ["kivawl", "kivacx"], ["zhu"]],
                    zhangyikiva: ["male", "shu", 3, ["yizhong", "kivawj", "zhanjue"], ["zhu"]],
                    kivadhxh: ["female", "wu", 1, ["kivalb", "kivaly", "kivadh", "kivaxh2", "tiandu", "oldzhenlie"], []],
                    xuhuangkiva: ["male", "wei", 4, ["kivadl", "qicai", "jiezi"], []],
                    simayikiva: ["male", "wei", 2, ["kivajj", "kivalg", "kivays", "bizhuan", "zuoding"], ["zhu", "forbidai"]],
                    caocaokiva: ["male", "wei", 4, ["kivatzw", "kivalp"], ["zhu"]],
                    luxunkiva: ["male", "wu", 3, ["kivasy", "relianying"], ["zhu"]],
                    suncekiva: ["male", "wu", 4, ["kivalj", "kivasj", "kivabw", "kivayx", "shiyong"], ["zhu"]],
                    caoanmingkiva: ["male", "wei", 3, ["feiying", "tiaoxin"], []],
                    caoangkiva: ["male", "wei", 4, ["kivalz", "kaikang"], []],
                    yujikiva: ["male", "qun", 3, ["kivagh", "reguose", "zhenlue"], []],
                    gongsunzankiva: ["male", "qun", 4, ["kivabm", "kivazrs", "qiaomeng", "reyicong", "yingyang", "kivasr"], []],
                    liuxiekiva: ["male", "shen", 4, ["longyin", "tiandu", "tianming", "mizhao", "mingjian", "kivahy"], ["zhu"]],
                    machaokivashen: ["male", "shen", 5, ["oldqianxi", "mashu", "retieji", "liyu", "fengpo", "kivashichou", "kivazhuiji"], ["zhu", "boss", "bossallowed"]],
                    lingjukiva: ["female", "qun", 4, ["jieyuan", "fenxin", "reqianxun", "wushuang"], ["zhu"]],
                    zhugekekiva: ["male", "wu", 3, ["aocai", "duwu", "hongyuan", "huanshi"], ["zhu"]],
                    zhouyukiva: ["male", "wu", 3, ["refanjian", "kivahz"], ["zhu"]],
                    zhangheli: ["male", "qun", 4, ["tianyi", "jiang", "mashu", "kivayuanlue", "kivaliyuan"], ["zhu"]],
                    guanyinpingsp: ["female", "shu", 3, ["kivaxuj", "kivawuj", "huxiao"], ["zhu"]],
                    xushuspkiva: ["male", "shu", 4, ["zhuhai", "kivatg", "kivayd", "kivarc"], ["zhu"]],
                    caozhikiva: ["male", "wei", 4, ["luoying", "kivaws"], ["zhu"]],
                    zhangxiukiva: ["male", "qun", 3, ["kivazyx", "kivaqw", "kivapxz", "kivabd", "kivahenshin"], ["zhu"]],
                    liubangkiva: ["male", "hankiva", 4, ["kivagz", "kivalsy", "tianming"], ["boss", "bossallowed"]],
                    baibankiva: ["none", "wu", 5, ["mouduan2", "jiang2", "jyzongshi"], ["forbidai"]],
                    hanxinkiva: ["male", "hankiva", 5, ["mashu", "kivahcw"], ["boss", "bossallowed"]],
                    xiaohekiva: ["male", "hankiva", 4, ["kivahz", "kivaxcb"], ["boss", "bossallowed"]],
                    zhangliangkiva: ["male", "hankiva", 4, ["qixing", "kivazzz"], ["boss", "bossallowed"]],
                    liubangyxskiva: ["male", "hankiva", 4, ["kivayxsyr", "kivasxx"], ["zhu"]],
                    caocankiva: ["male", "hankiva", 3, ["tiandu", "bazhen", "kivacc"], []],
                    "jiangwei_boss": ["male", "shen", 3, ["tiaoxin", "nsguanxing", "bazhen", "kivast"], ["boss", "bossallowed"]],
                    "fazheng_bosskiva": ["male", "shu", 2, ["xinenyuan", "juejing", "longhun", "kivaffj"], ["boss", "bossallowed"]],
                    zhangxiuhenshinkiva: ["male", "shen", 5, [], ["forbidai"]],
                    guanpingzhoucang: ["male", "shu", 4, ["kivazy"], []],
                    zhangfeikiva: ["male", "shu", 3, ["paoxiao", "kivazbsm", "kiva2"], []],
                    guanyukiva: ["male", "shu", 3, ["wusheng", "kivaqlyyd", "kiva3"], []],
                    guojiakiva: ["male", "shen", 2, ["tiandu", "kivazx"], ["boss", "bossallowed"]],
                    sunshangxiangshenkiva: ["female", "shen", 2, ["xiaoji", "jieyin", "kivasxk"], ["boss", "bossallowed"]],
                    mayunlukiva: ["female", "shu", 3, ["fengpo", "mashu", "kivatzb"], []],
                    beimihukiva: ["female", "rikiva", 3, ["kivatzb", "kivaszb", "kivaft"], []],
                    zhaoyunshenkiva: ["male", "shu", 8, ["kivaqj", "kivazy", "kivaxuj", "fuhun", "mashu", "longdan", "kivatianya"], ["boss", "bossallowed"]],
                    chendaokiva: ["male", "shu", 4, ["longdan", "jiang"], ["zhu"]],
                    liufengkiva: ["male", "shu", 3, ["jingce", "tiandu", "xiansi", "qinwang"], ["zhu"]],
                    yuanyuankiva: ["male", "qun", 3, ["reluanji", "yongsi"], ["zhu"]],
                    simazhaokiva: ["male", "jinkiva", 3, ["nszhaoxin", "nsxiuxin", "kivasjj", "gongao"], ["zhu"]],
                    simaruikiva: ["male", "jinkiva", 3, ["kivafj", "kivajjjjjjj", "kivalyw"], ["zhu"]],
                    liuxiukiva: ["male", "hankiva", 3, ["kivagwd", "kivajww", "fanghun", "kivazxlx"], ["zhu"]],
                    liuchekiva: ["male", "hankiva", 3, ["kivadll", "kivaxc", "kivayc"], ["zhu"]],
                    lishiminkiva: ["male", "tangkiva", 3, ["kongju", "kivaht", "kivasd"], ["zhu"]],
                    lilongjikiva: ["male", "tangkiva", 3, ["kongju", "kivakyss"], ["zhu"]],
                    zhangchunhuakiva: ["female", "jinkiva", 1, ["kivasssssss", "kivalx", "boss_wuxin", "kivalj", "kivaaz"], ["boss", "bossallowed"]],
                    chenshengkiva: ["male", "chukiva", 2, ["kivaqyc", "kivazzc", "kivaqmqy"], ["zhu"]],
                    xiangyukiva: ["male", "chukiva", 3, ["renxin", "mashu", "kivabwxy", "kivaxcxy"], ["zhu"]],
                    fusukiva: ["male", "qinkiva", 3, ["renxin", "kivaljlj"], []],
                    yingzhengkiva: ["male", "qinkiva", 3, ["kivash", "kivadz"], ["zhu"]],
                    yangjiankiva: ["male", "suikiva", 3, ["kivakh"], ["zhu"]],
                    suiyangdikiva: ["male", "suikiva", 3, ["shiqin", "yaoyi", "kivajsh"], ["zhu"]],
                    guojiafengxiaokiva: ["male", "wei", 3, ["tiandu", "kivayjc", "kivaty"], []],
                    qinmikiva: ["male", "shu", 3, ["jianzheng", "zhuandui", "tianbian", "jyzongshi", "kivajyy"], []],
                    liubowenkiva: ["male", "mingkiva", 3, ["kivagy", "kivazb"], []],
                    zhuyuanzhangkiva: ["male", "mingkiva", 3, ["kivaqy"], ["zhu"]],
                    zhugeliangwolongkiva: ["male", "shu", 4, ["kivalm"], []],
                    zhouyucbkiva: ["male", "wu", 3, ["kivayr", "kivahz"], []],
                    cckiva: ["male", "hankiva", 8, ["kivaccjj", "kivacclj", "kivacccl", "kivaccjs"], ["boss", "bossallowed", "des:鬼知道什么鬼。。。"]],
                    liubangskiva: ["male", "shen", 10, ["kivasxx", "kivalsy", "kivayxsyr"], ["boss", "bossallowed"]],
                    hanxinshenkiva: ["male", "shen", 5, ["kivatl", "kivags", "kivayys", "wushuang", "liyu"], ["boss", "bossallowed"]],
                    "kiva剑牙雷少": ["male", "zhongguokiva", Infinity, ["kivagod", "kivalsy"], ["zhu", "boss", "forbidai", "bossallowed"]],
                    guangxukiva: ["male", "qingkiva", 2, ["zongzuo", "kivaxwx"], ["zhu"]],
                    chenduxiukiva: ["male", "minkiva", 3, ["kivadzx", "kivadxx", "kivatxx"], []],
                    kangxikiva: ["male", "qingkiva", 4, ["kivakqq", "kivakyq", "kivakxq"], ["zhu"]],
                    jifakiva: ["male", "sandaikiva", 3, ["kivawwm", "kivazsm", "kivaxfm"], ["zhu"]],
                    jiangziyakiva: ["male", "sandaikiva", 3, ["kivasgm", "kivajlm"], []],
                    xwdkiva: ["male", "nanbeikiva", 10, ["kivaqd"], ["zhu"]],
                    liuyukiva: ["male", "nanbeikiva", 1, ["kivassd"], ["zhu"]],
                    zhuquanzhongkiva: ["male", "wushikiva", 3, ["kivajjn"], ["zhu"]],
                    songjiangkiva: ["male", "songkiva", 3, ["kivascl", "kivalss"], ["zhu"]],
                    zhaokuangyinkiva: ["male", "songkiva", 6, ["kivajqq"], ["zhu"]],
                    agdkivaa: ["male", "jin2kiva", 7, [], ["zhu", "forbidai"]],
                    abjkiva: ["male", "liaokiva", 7, [], ["zhu", "forbidai"]],
                    liyhkiva: ["male", "xixiakiva", 7, [], ["zhu", "forbidai"]],
                    tiemuzhenkiva: ["male", "yuankiva", 3, ["kivaqsj", "kivagold"], ["zhu"]],
                    sgsxiaoshakiva: ["female", "zhongguokiva", 3, ["kivaxss", "kivarqq", "starzujian1kiva", "starriderkivaliandong"], []],
                    liubangspkiva: ["male", "qun", 3, ["kivayryr", "kivasxsx"], ["zhu"]],
                    yingzhengspkiva: ["male", "qun", 3, ["kivaqhh", "kivadww"], ["zhu"]],
                    xiahoushikiva: ["female", "shu", 3, ["yanyu", "kivazyy"], ["zhu"]],
                    wuwukiva: ["none", "shu", 3, ["benxi", "fumian", "daiyan"], ["zhu"]],
                    masukiva: ["male", "shu", 2, ["sanyao", "zhiman", "xinzhan", "huilei"], ["zhu"]],
                    sunwukongkiva: ["male", "tangkiva", 2, ["kivadzsf", "kivaqtds", "kivang", "kivahyhy2"], ["zhu", "nei"]],
                    jiabaoyukiva: ["male", "qingkiva", 5, ["kivaby"], ["zhu"]],
                    Napoleonkiva: ["male", "xikiva", 3, ["tongling", "fanpu", "kivawz"], ["zhu"]],
                    Caesarkiva: ["male", "xikiva", 3, ["ducai", "kivawz"], ["zhu"]],
                    qinqiongkiva: ["male", "tangkiva", 3, ["kivadoubiej", "shanjia"], []],
                    lukangkiva: ["male", "wu", 3, ["kivaweiyan", "kivadufeng"], []],
                    yanghukiva: ["male", "jinkiva", 3, ["kivagongxin", "kivahuairou"], []],
                    menshishikiva: ["male", "rikiva", 3, ["kivapaizhao", "kivaDecade4"], ["zhu"]],
                    Decadekiva: ["male", "", 4, ["kivaquka", "jueshakiva"], ["forbidai"]],
                    Genji: ["male", "shen", 5, ["lianying", "zhanlong", "longhun", "jiang", "dragonkiva", "kivajiaxi", "juepokiva", "kivalongyi"], ["boss", "bossallowed"]],
                    Hanzo: ["male", "shen", 5, ["oldxuanfeng", "kongju", "sheshu", "bfengshi", "yinbo", "sheng", "qimou", "manjuan", "hunzi", "kivayuanshe", "longhukiva"], ["boss", "bossallowed"]],
                    simalangkiva: ["male", "wei", 3, ["kivajunbing", "kivaquji"], ["zhu"]],
                    "Caesar 2": ["male", "", 4, ["kivazhengfu", "kivaxiaozhan"], ["zhu"]],
                    xunchenkiva: ["male", "qun", 3, ["kivafenglue", "kivamoushi", "kivamiyin"], ["zhu"]],
                    xunyoukiva: ["male", "wei", 3, ["kivaliangmou", "qice", "kivashiquan"], ["zhu"]],
                    lvbukiva: ["male", "qun", 5, ["kivaqiongtu", "kivabaoli"], ["zhu"]],
                    wangjikiva: ["male", "wei", 3, ["qizhi", "kivajinqu", "kivacanshi"], ["zhu"]],
                    "machaoSP马超kiva": ["male", "qun", 4, ["kivashichou", "kivazhuiji"], ["zhu"]],
                    "織田信長kiva": ["male", "rikiva", 3, ["kivayewang", "kivabuwu"], ["zhu"]],
                    "豊臣秀吉kiva": ["male", "rikiva", 3, ["kivazhichen", "kivaduoquan", "jijiang"], ["zhu"]],
                    "德川家康kiva": ["male", "rikiva", 3, ["kivayinren", "kivamujiang"], ["zhu"]],
                    "liuyu2kiva": ["male", "qun", 3, ["zhige", "zongshi", "kivakunzhong"], ["zhu"]],
                    zuliukiva: ["male", "jinkiva", 3, ["kivabeifa", "xinsidi", "kivawenji"], ["zhu"]],
                    bubukiva: ["none", "wu", 2, ["anxu", "zhuiyi", "hongde", "dingpan"], ["zhu"]],
                    xizhicaikiva: ["male", "wei", 3, ["xianfu", "kivayingcai", "kivachouce", "kivatiandu"], ["zhu"]],
                    xiaxiakiva: ["male", "wei", 3, ["fenyong", "xuehen", "xinshensu"], ["zhu"]],
                    maliangkiva: ["male", "shu", 3, ["kivayingyuan3", "kivazishu"], ["zhu"]],
                    huangzhongkiva: ["male", "shu", 4, ["kivabeixian", "xinliegong"], ["zhu"]],
                    guyongkiva: ["male", "wu", 3, ["kivabingyi", "kivashenxing"], ["zhu"]],
                    liubiaokiva: ["male", "qun", 3, ["zishou", "lirang"], ["zhu"]],
                    "宮本武蔵kiva": ["male", "rikiva", 4, ["kivaertian"], ["zhu"]],
                    "liubei_魂_kiva": ["male", "shu", 3, ["rerende", "jijiang", "kivacixiong_liubei"], ["zhu"]],
                    "caocao_魂_kiva": ["male", "wei", 3, ["hujia", "rejianxiong", "kivayitian"], ["zhu"]],
                    "simayi_魂_kiva": ["male", "wei", 5, ["kivazhabing", "kivaguimou"], ["zhu"]],
                    guanyuspkiva: ["male", "wei", 4, ["kivaxiaozhan", "wusheng", "shiyong", "wansha"], ["zhu"]],
                    zhugeliangxinkiva: ["male", "shu", 3, ["kivajincui", "bazhen", "kanpo"], ["zhu"]],
                    dikiva: ["male", "yukiva", 9, ["kivadiwang"], ["zhu", "boss", "bossallowed"]],
                    "luxun_魂_kiva": ["male", "wu", 3, ["kivaqianxun", "qianxun"], ["zhu"]],
                    "安倍晴明kiva": ["male", "rikiva", 4, ["kivayinyang", "kivaxianji", "kivazhanbu"], ["zhu"]],
                    kongrongkiva: ["male", "qun", 3, ["zishu", "lirang"], ["zhu"]],
                    mihengkiva: ["male", "qun", 7, ["kuangcai", "kivatiannu", "kivahufu"], ["zhu", "boss", "bossallowed"]],
                    kivalibai: ["male", "tangkiva", 3, ["kivajingsi", "kivajinqiang"], ["zhu"]],
                    kivadufu: ["male", "tangkiva", 3, ["kivashishi", "kivadaotang"], ["zhu"]],
                    "King Arthur kiva": ["male", "xikiva", 8, ["kivawangjian", "kivashichong", "wushuang"], ["zhu"]],
                    "meiCaptain America kiva": ["male", "xikiva", 3, ["kivadunxi", "kivafanji", "kivaxuezhan", "kivashengdun"], ["zhu"]],
                    kivadongyunjiangfei: ["male", "shu", 3, ["shengxi", "kivabingzheng"], ["zhu"]],
                    wenyangkiva: ["male", "wei", 4, ["kivazhanji", "kivajingshi"], ["zhu"]],
                    kivaluocheng: ["male", "tangkiva", 3, ["hanqiang", "biaoqi", "kivajianji", "kivaxianniang"], ["zhu"]],
                    "坂田銀時kiva": ["male", "shen", 6, ["kivapeidao", "kivawanshi"], ["zhu", "boss", "bossallowed"]],
                    "Spider man": ["male", "shen", 3, ["kivatusi", "kivachanrao", "kivaexgalibang", "kivazhongji"], ["zhu", "boss", "bossallowed"]],
                    "神_zhaoyunkiva": ["male", "shen", 5, ["longdan", "zhanjiang", "chongzhen", "reyingzi", "kivazhimao", "kivacebu", "kivaliangyinqiang", "kivayingren", "kivajinlue", "kivaquying", "kivaceding"], ["zhu", "boss", "bossallowed"]],
                    "郭嘉spspsp": ["male", "wei", 3, ["kivatianji", "kivaweimu", "kivamouce"], ["zhu"]],
                    zhugeshangkiva: ["male", "shu", 3, ["kivayuxue", "kivafenzhan", "kivafengu", "kivayingyong"], ["zhu"]],
                    zhugezhankiva: ["male", "shu", 5, ["kivayongwu", "kivaconghui", "kivasizhan"], ["zhu"]],
                    "滚筒洗衣机kiva": ["male", "shen", 300, ["kivasishen"], ["forbidai"]],
                    direnjiekiva: ["male", "tangkiva", 4, ["kivashentan", "kivatancha"], ["zhu"]],
                    baozheng: ["male", "songkiva", 4, ["kivadingxuan", "kivapanshen"], ["zhu"]],
                    "Sherlock Holmes kiva": ["male", "xikiva", 3, ["kivajiean", "kivayoushi"], ["zhu"]],
                    yuefeikiva: ["male", "songkiva", 7, ["kivajunwei", "kivawumu", "kivazhonglie", "kivayuejiajun", "kivaxiaojiang"], ["zhu", "boss", "bossallowed"]],
                    luxunminkiva: ["male", "minkiva", 3, ["kivaqiyi", "kivaxueyi"], ["zhu"]],
                    mizhukiva: ["male", "shu", 3, ["kivajugu", "kivaziyuan"], ["zhu"]],
                    "真田幸村kiva": ["male", "rikiva", 5, ["kivawufeng", "kivayingmo", "kivamojiang", "kivajueshang"], ["zhu"]],
                    "boss_zhaoyun_kiva": ["male", "shen", 4, ["kivaliangmoumou", "kivashence", "kivaliangyinqiang2", "longdan", "reyajiao"], ["forbidai"]],
                    "Deadpool kiva": ["male", "shen", 4, ["ziyukiva"], ["boss", "bossallowed"]],
                    "Star Lord kiva": ["male", "shen", 4, ["kivajixian", "kivayuanqiang", "kivaqijue"], ["boss", "bossallowed"]],
                    "Ant man kiva": ["male", "shen", 2, ["kivabianxiao", "kivahuanyi", "kivabianda"], ["boss", "bossallowed"]],
                    "김유의 편지. kiva": ["male", "han2kiva", 3, ["kivafafen", "kivaxinye"], ["zhu"]],
                    wenyangxinkiva: ["male", "jinkiva", 4, ["kivatuwei", "kivajidi"], ["zhu"]],
                },
                translate: {
                    hankiva: "<span style=color:#F0F>汉</span>",
                    hankivaColor: "#370067",
                    rikiva: "日",
                    "han2kiva": "韩",
                    yukiva: "虞",
                    xikiva: "<font color=#000000>西</font>",
                    sandaikiva: "<font color=#7A4E00>夏</font><font color=#3A7A39>商</font><font color=#7A3535>周</font>",
                    sandaikivaColor: "#000000",
                    nanbeikiva: "<font color=#F2FF31>南</font><font color=#20FF38>北</font>",
                    nanbeikivaColor: "#000000",
                    wushikiva: "五代十国",
                    wushikivaColor: "FFFFFF",
                    songkiva: "<font color=#85FEFF>宋</font>",
                    songkivaColor: "#85FEFF",
                    liaokiva: "<font color=#588BFF>辽</font>",
                    liaokivaColor: "#588BFF",
                    xixiakiva: "<font color=#FFA400>西夏</font>",
                    xixiakivaColor: "#FFA400",
                    jinkiva: "<span style=color:#4DE1FF>晋</span>",
                    jinkivaColor: "#ffe14c",
                    "jin2kiva": "<font color=#FAFF20>金</font>",
                    "jin2kivaColor": "#000000",
                    yuankiva: "<font color=#694100>元</font>",
                    yuankivaColor: "#694100",
                    minkiva: "<font color=#7A7A7A>民</font>",
                    minkivaColor: "#7A7A7A",
                    qingkiva: "<font color=#1B7F8B>清</font>",
                    qingkivaColor: "#1B7F8B",
                    zhongguokiva: "<font color=#FF0000>中华人民共和国</font>",
                    zhongguokivaColor: "#FF0000",
                    tangkiva: "<font color=#FF0000>唐</font>",
                    tangkivaColor: "#6f0000",
                    suikiva: "<font color=#810000>隋</font>",
                    suikivaColor: "#810000",
                    qinkiva: "<font color=#928817>秦</font>",
                    qinkivaColor: "#928817",
                    chukiva: "<font color=#000000>楚</font>",
                    chukivaColor: "000000",
                    mingkiva: "<font color=#E1FF0B>明</font>",
                    mingkivaColor: "#E1FF0B",
                    "Thunder task force kiva": "雷霆特工队",
                    "Sentry kiva": "哨兵",
                    "Moon knight kiva": "月光骑士",
                    "xuchu新kiva": "新许褚",
                    "xiahouyuan新kiva": "新夏侯渊",
                    "liubei新kiva": "新刘备",
                    "Loki kiva": "洛基",
                    "liuqi魂kiva": "魂刘琦",
                    "lvbu圣临kiva": "圣临吕布",
                    guanzhongkiva: "管仲",
                    liuzhangkiva: "刘璋",
                    "Owen Grady kiva": "欧文",
                    "Emmet kiva": "艾米特",
                    "Dr. strange kiva": "奇异博士",
                    "kiva法阵fazhen": "奇异法阵",
                    "Black panther kiva": "黑豹",
                    "Thor kiva": "托尔",
                    "Fast silver kiva": "快银",
                    "Wolverine kiva": "金刚狼",
                    "Knell kiva": "丧钟",
                    "sunben魂kiva": "魂孙贲",
                    "guojia圣临kiva": "圣临郭嘉",
                    "guanyu圣临kiva": "圣临关羽",
                    "huangzhong圣临kiva": "圣临黄忠",
                    "jiangwei圣临kiva": "圣临姜维",
                    "lvmeng圣临kiva": "圣临吕蒙",
                    "luxun圣临kiva": "圣临陆逊",
                    "juelin圣临kiva": "决胜之临",
                    "jikang魂kiva": "魂嵇康",
                    "luji魂kiva": "魂陆绩",
                    "yujin魂kiva": "魂于禁",
                    "zhangliao魂kiva": "魂张辽",
                    "yuejin魂kiva": "魂乐进",
                    "dengai魂kiva": "魂邓艾",
                    "yanwen魂kiva": "魂颜良文丑",
                    "gaolan魂kiva": "魂高览",
                    jumtaikiva: "君莫笑&太乙真人",
                    sunbinkiva: "魂孙膑",
                    "lidian魂kiva": "魂李典",
                    "yuanshao魂kiva": "魂袁绍",
                    "huangfeihu魂kiva": "魂黄飞虎",
                    "guopang魂kiva": "魂郭图逄记",
                    "weiyan魂kiva": "魂魏延",
                    "re_zhaoyun魂kiva": "魂界赵云",
                    "caozhen魂kiva": "魂曹真",
                    "wuming魂kiva": "无名",
                    "lijing魂kiva": "魂商李靖",
                    "lijing2魂kiva": "魂唐李靖",
                    "suquanzhong魂kiva": "魂苏全忠",
                    "sp_liubei魂kiva": "sp魂刘备",
                    "sp_sunquan魂kiva": "sp魂孙权",
                    "sp_caocao魂kiva": "sp魂曹操",
                    "liexie魂kiva": "魂神界刘协",
                    "左翔太郎 フィリップkiva": "假面骑士W",
                    "桐生战兔kiva": "假面骑士build",
                    "Stalin kiva": "斯大林",
                    "BismarCK kiva": "俾斯麦",
                    "jiangwei魂kiva": "魂姜维",
                    "re_wenyang魂kiva": "魂界文鸯",
                    "zhaoyun魂kiva": "魂赵云",
                    "zhugedan魂kiva": "魂诸葛诞",
                    "zhonghui魂kiva": "魂钟会",
                    "lusu魂kiva": "魂鲁肃",
                    "ganning魂kiva": "魂甘宁",
                    "sunce魂kiva": "魂孙策",
                    "taishici魂kiva": "魂太史慈",
                    "Marco polo kiva": "马可波罗",
                    "The Flash kiva": "闪电侠",
                    "Green lantern kiva": "绿灯侠",
                    "Wonder woman kiva": "神奇女侠",
                    "Iron man kiva": "钢铁侠",
                    "Super bat kiva": "超人&蝙蝠侠",
                    jiangweikiva: "界姜维",
                    zhaoyunkiva: "界SP赵云",
                    zhugeliangkiva: "界诸葛亮",
                    liubeikiva: "界刘备",
                    fazhengkiva: "界法正",
                    jiaxukiva: "界贾诩",
                    xunyukiva: "界荀彧",
                    sunquankiva: "界孙权",
                    lingtongkiva: "界凌统",
                    sunshangxiangkiva: "界孙尚香",
                    zhonghuikiva: "界钟会",
                    sunjiankiva: "界孙坚",
                    zhangyikiva: "SP张翼",
                    kivadhxh: "大虎小虎",
                    xuhuangkiva: "界徐晃",
                    simayikiva: "sp界司马懿",
                    caocaokiva: "sp界曹操",
                    luxunkiva: "sp界陆逊",
                    suncekiva: "界孙策",
                    caoanmingkiva: "sp曹安民",
                    caoangkiva: "界曹昂",
                    yujikiva: "界于吉",
                    gongsunzankiva: "sp界公孙瓒",
                    liuxiekiva: "神界刘协",
                    machaokivashen: "神界马超",
                    lingjukiva: "界灵雎",
                    zhugekekiva: "界诸葛恪",
                    zhouyukiva: "sp界周瑜",
                    zhangheli: "sp张郃",
                    guanyinpingsp: "sp关银屏",
                    xushuspkiva: "sp界徐庶",
                    caozhikiva: "界曹植",
                    zhangxiukiva: "sp张绣",
                    liubangkiva: "大汉刘邦",
                    baibankiva: "sp5血白版",
                    hanxinkiva: "齐王韩信",
                    xiaohekiva: "成败萧何",
                    zhangliangkiva: "刺秦张良",
                    liubangyxskiva: "刘邦",
                    caocankiva: "曹参",
                    "jiangwei_boss": "乾坤姜维",
                    "fazheng_bosskiva": "辅神法正",
                    zhangxiuhenshinkiva: "北地枪王",
                    guanpingzhoucang: "sp关平周仓",
                    zhangfeikiva: "sp界张飞",
                    guanyukiva: "sp界关羽",
                    guojiakiva: "一世奉孝",
                    sunshangxiangshenkiva: "姬武香香",
                    mayunlukiva: "界马云禄",
                    beimihukiva: "sp卑弥呼",
                    zhaoyunshenkiva: "苍天游龙",
                    chendaokiva: "sp陈到",
                    liufengkiva: "界刘封",
                    yuanyuankiva: "袁绍&袁术",
                    simazhaokiva: "界司马昭",
                    simaruikiva: "界司马睿",
                    liuxiukiva: "界刘秀",
                    liuchekiva: "界刘彻",
                    lishiminkiva: "界李世民",
                    lilongjikiva: "界李隆基",
                    zhangchunhuakiva: "绰态春华",
                    chenshengkiva: "界陈胜",
                    xiangyukiva: "项羽",
                    fusukiva: "界扶苏",
                    yingzhengkiva: "界嬴政",
                    yangjiankiva: "杨坚",
                    suiyangdikiva: "隋杨广",
                    guojiafengxiaokiva: "sp界郭嘉",
                    qinmikiva: "界秦宓",
                    liubowenkiva: "刘基",
                    zhuyuanzhangkiva: "朱元璋",
                    zhugeliangwolongkiva: "界卧龙诸葛亮",
                    zhouyucbkiva: "界赤壁周瑜",
                    cckiva: "幻击骑士",
                    liubangskiva: "西汉高祖",
                    hanxinshenkiva: "国士无双",
                    "kiva剑牙雷少": "剑牙雷少",
                    guangxukiva: "光绪",
                    chenduxiukiva: "陈独秀",
                    kangxikiva: "清帝康熙",
                    jifakiva: "武王姬发",
                    jiangziyakiva: "姜子牙",
                    xwdkiva: "孝文帝",
                    liuyukiva: "刘裕",
                    zhuquanzhongkiva: "朱全忠",
                    songjiangkiva: "宋江",
                    zhaokuangyinkiva: "赵匡胤",
                    agdkivaa: "阿骨打",
                    abjkiva: "阿保机",
                    liyhkiva: "李元昊",
                    tiemuzhenkiva: "成吉思汗",
                    sgsxiaoshakiva: "小杀",
                    liubangspkiva: "sp刘邦",
                    yingzhengspkiva: "sp嬴政",
                    xiahoushikiva: "新夏侯氏",
                    wuwukiva: "吴懿&吴苋",
                    masukiva: "界马谡",
                    sunwukongkiva: "孙悟空",
                    jiabaoyukiva: "贾宝玉",
                    Napoleonkiva: "拿破仑",
                    Caesarkiva: "凯撒大帝",
                    qinqiongkiva: "秦琼",
                    lukangkiva: "陆抗",
                    yanghukiva: "羊祜",
                    menshishikiva: "门矢士",
                    Decadekiva: "假面骑士decade",
                    Genji: "SP源氏_守望",
                    Hanzo: "SP半藏_守望",
                    simalangkiva: "界司马朗",
                    "Caesar 2": "凯撒",
                    xunchenkiva: "荀谌",
                    xunyoukiva: "界荀攸",
                    lvbukiva: "界吕布",
                    wangjikiva: "界王基",
                    "machaoSP马超kiva": "界sp马超",
                    "織田信長kiva": "织田信长",
                    "豊臣秀吉kiva": "丰臣秀吉",
                    "德川家康kiva": "德川家康",
                    "liuyu2kiva": "界刘虞",
                    zuliukiva: "祖逖＆刘琨",
                    bubukiva: "布骘＆步练师",
                    xizhicaikiva: "界戏志才",
                    xiaxiakiva: "夏侯惇＆夏侯渊",
                    maliangkiva: "界马良",
                    huangzhongkiva: "界黄忠",
                    guyongkiva: "界顾雍",
                    liubiaokiva: "刘表",
                    "宮本武蔵kiva": "宫本武藏",
                    "liubei_魂_kiva": "魂_刘备",
                    "caocao_魂_kiva": "魂_曹操",
                    "simayi_魂_kiva": "魂_司马懿",
                    guanyuspkiva: "界sp关羽",
                    zhugeliangxinkiva: "新诸葛亮",
                    dikiva: "三皇五帝_杨修",
                    "luxun_魂_kiva": "魂陆逊",
                    "安倍晴明kiva": "安倍晴明",
                    kongrongkiva: "德圣传人_孔融",
                    mihengkiva: "龙斗春秋_祢衡",
                    kivalibai: "李白",
                    kivadufu: "杜甫",
                    "King Arthur kiva": "亚瑟王",
                    "meiCaptain America kiva": "美国队长",
                    kivadongyunjiangfei: "董允＆蒋费",
                    wenyangkiva: "文鸯",
                    kivaluocheng: "界罗成",
                    "坂田銀時kiva": "银时",
                    "Spider man": "蜘蛛侠",
                    "神_zhaoyunkiva": "赵云_神",
                    "郭嘉spspsp": "魂郭嘉",
                    zhugeshangkiva: "魂诸葛尚",
                    zhugezhankiva: "魂诸葛瞻",
                    "滚筒洗衣机kiva": "死神小学生",
                    direnjiekiva: "狄仁杰",
                    baozheng: "包拯",
                    "Sherlock Holmes kiva": "福尔摩斯",
                    yuefeikiva: "岳飞",
                    luxunminkiva: "鲁迅",
                    mizhukiva: "糜竺",
                    "真田幸村kiva": "真田幸村",
                    "boss_zhaoyun_kiva": "常山赵子龙",
                    "Deadpool kiva": "死侍",
                    "Star Lord kiva": "星爵",
                    "Ant man kiva": "蚁人",
                    "김유의 편지. kiva": "金庾信",
                    wenyangxinkiva: "魂文鸯",
                },
            },
            card: {
                card: {
                    kivashuangjie: {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip1",
                        distance: {
                            attackFrom: -2,
                        },
                        ai: {
                            equipValue: function (card, player) {
                                return Math.min(2.5 + player.countCards('h', 'sha'), 4);
                            },
                            basic: {
                                equipValue: 3.5,
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        skills: ["kivacegang"],
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                    },
                    jingukiva: {
                        type: "equip",
                        subtype: "equip1",
                        distance: {
                            attackFrom: -100,
                        },
                        vanish: true,
                        derivation: "jingukiva",
                        onEquip: function () {
                            player.addSkill('kivaswjj');
                        },
                        ai: {
                            order: 9,
                            useful: 5,
                            value: 4,
                            basic: {
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                equipValue: 1,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                        fullskin: true,
                    },
                    wamiankiva: {
                        type: "equip",
                        subtype: "equip1",
                        distance: {
                            attackFrom: -3,
                        },
                        vanish: true,
                        derivation: "wamiankiva",
                        onEquip: function () {
                            player.draw();
                        },
                        ai: {
                            order: 9,
                            useful: 5,
                            value: 4,
                            basic: {
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                equipValue: 1,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                        fullskin: true,
                        skills: ["kivaqqqqqqq"],
                    },
                    "kiva101": {
                        type: "equip",
                        subtype: "equip1",
                        skills: ["kiva100"],
                        distance: {
                            attackFrom: -2,
                        },
                        vanish: true,
                        derivation: "kiva101",
                        onEquip: function () {
                            player.chooseToDiscard('h', true, 2);
                            player.draw(player.Hp);
                        },
                        ai: {
                            order: 9,
                            useful: 5,
                            value: 4,
                            basic: {
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                equipValue: 1,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                        fullskin: true,
                    },
                    "kiva103": {
                        fullskin: true,
                        enable: true,
                        type: "trick",
                        filterTarget: true,
                        content: function () {
                            target.addSkill('kiva106');
                            target.addSkill('kiva108');
                            target.addSkill('kiva102');
                            target.chooseToDiscard(1);
                            target.loseMaxHp();
                        },
                        ai: {
                            order: 7,
                            useful: 4,
                            value: 10,
                            tag: {
                                draw: 2,
                            },
                            result: {
                                target: function (player, target) {
                                    if (target.hasJudge('lebu')) return 0;
                                    return Math.max(1, 2 - target.countCards('h') / 10);
                                },
                            },
                        },
                        selectTarget: 1,
                    },
                    "kiva112": {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip5",
                        skills: ["kiva111"],
                        ai: {
                            basic: {
                                equipValue: 7,
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                    },
                    "kiva113": {
                        fullskin: true,
                        enable: true,
                        type: "trick",
                        filterTarget: true,
                        content: function () {
                            target.turnOver();
                        },
                        selectTarget: 1,
                        image: "ext:王朝更替_策/kiva113.png",
                    },
                    "kiva114": {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip5",
                        skills: ["kiva117"],
                        ai: {
                            basic: {
                                equipValue: 7,
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                    },
                    "kiva115": {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip1",
                        distance: {
                            attackFrom: -1,
                        },
                        ai: {
                            basic: {
                                equipValue: 2,
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        skills: ["qinggang_skill", "kiva116"],
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                    },
                    kivaleiyi: {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip2",
                        skills: ["kiva117", "kivaleishen"],
                        ai: {
                            basic: {
                                equipValue: 7,
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                    },
                    kivawujinnengyuan: {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip5",
                        skills: ["kivawujin"],
                        ai: {
                            basic: {
                                equipValue: 7,
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                    },
                    "kivaRyuki2": {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip4",
                        lianheng: true,
                        skills: ["kivaRyuki"],
                        distance: {
                            globalFrom: -1,
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                        ai: {
                            basic: {
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                equipValue: 4,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                    },
                    "kivaBlade2": {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip1",
                        distance: {
                            attackFrom: -1,
                        },
                        ai: {
                            basic: {
                                equipValue: 2,
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        skills: ["kivaBlade"],
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                    },
                    "kivaDecade2": {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip5",
                        onLose: function () {
                            player.init('menshishikiva');
                        },
                        skills: ["kivaDecade"],
                        ai: {
                            order: 9.5,
                            equipValue: function (card, player) {
                                if (player.countCards('h', 'kivaDecade')) return 6;
                                return 1;
                            },
                            basic: {
                                equipValue: 5,
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                    },
                    "kivaDecade3": {
                        type: "trick",
                        enable: true,
                        fullskin: true,
                        filterTarget: true,
                        content: function () {
                            var list = [];
                            for (var i = 0; i < 1; i++) {
                                list.push(game.createCard('kivaBlade2'));
                            }
                            target.gain(list, 'gain2');
                            var list = [];
                            for (var i = 0; i < 1; i++) {
                                list.push(game.createCard('kivaRyuki2'));
                            }
                            target.gain(list, 'gain2');
                        },
                        ai: {
                            order: 4.5,
                            value: [5, 1],
                            tag: {
                                gain: 1,
                            },
                            result: {
                                target: function (player, target) {
                                    if (target == player) {
                                        if (!target.hasShan()) return 2;
                                        var num = target.needsToDiscard(2);
                                        if (num == 0) return 1.5;
                                        if (num == 1) return 1;
                                        return 0.5;
                                    }
                                    else {
                                        switch (target.countCards('h')) {
                                            case 0: return 2;
                                            case 1: return 1.5;
                                            case 2: return 1;
                                            default: return 0.5;
                                        }
                                    }
                                },
                            },
                        },
                        selectTarget: 1,
                    },
                    "kivapoison_sha": {
                        fullskin: true,
                        type: "trick",
                        enable: true,
                        selectTarget: -1,
                        reverseOrder: true,
                        cardcolor: "black",
                        cardnature: "poison",
                        filterTarget: function (card, player, target) {
                            return target != player;
                        },
                        content: function () {
                            "step 0"
                            var next = target.chooseToRespond({ name: 'shan' });
                            next.ai = function (card) {
                                if (get.damageEffect(target, player, target, 'fire') >= 0) return 0;
                                if (player.hasSkillTag('notricksource')) return 0;
                                if (target.hasSkillTag('notrick')) return 0;
                                if (target.hasSkillTag('noShan')) {
                                    return -1;
                                }
                                return 11 - get.value(card);
                            };
                            next.autochoose = lib.filter.autoRespondShan;
                            "step 1"
                            if (result.bool == false) {
                                target.damage('poison');
                            }
                        },
                        ai: {
                            wuxie: function (target, card, player, viewer) {
                                if (get.attitude(viewer, target) > 0 && target.countCards('h', 'shan')) {
                                    if (!target.countCards('h') || target.hp == 1 || Math.random() < 0.7) return 0;
                                }
                            },
                            basic: {
                                order: 9,
                                useful: 1,
                                value: 5,
                            },
                            result: {
                                target: function (player, target) {
                                    if (target.hasSkillTag('nopoison')) return 0;
                                    if (player.hasUnknown(2)) return 0;
                                    var nh = target.countCards('h');
                                    if (lib.config.mode == 'identity') {
                                        if (target.isZhu && nh <= 2 && target.hp <= 1) return -100;
                                    }
                                    if (nh == 0) return -2;
                                    if (nh == 1) return -1.7
                                    return -1.5;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: 1,
                                natureDamage: 1,
                                fireDamage: 1,
                                multitarget: 1,
                                multineg: 1,
                            },
                        },
                    },
                    kivakabuto: {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip5",
                        onLose: function () {
                            player.draw();
                        },
                        skills: ["kivatuibian", "kivaclockup"],
                        ai: {
                            order: 9.5,
                            equipValue: function (card, player) {
                                if (player.countCards('h', 'kivakabuto')) return 6;
                                return 1;
                            },
                            basic: {
                                equipValue: 5,
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                    },
                    kivajingyesi: {
                        audio: true,
                        fullskin: true,
                        type: "delay",
                        filterTarget: function (card, player, target) {
                            return (lib.filter.judge(card, player, target) && player != target);
                        },
                        judge: function (card) {
                            if (get.suit(card) == 'diamond') return 0;
                            return -3;
                        },
                        effect: function () {
                            if (result.bool == false) {
                                player.skip('phaseDiscard');
                            }
                        },
                        ai: {
                            basic: {
                                order: 1,
                                useful: 1,
                                value: 8,
                            },
                            result: {
                                target: function (player, target) {
                                    var num = target.hp - target.countCards('h') - 2;
                                    if (num > -1) return -0.01;
                                    if (target.hp < 3) num--;
                                    if (target.isTurnedOver()) num /= 2;
                                    var dist = get.distance(player, target, 'absolute');
                                    if (dist < 1) dist = 1;
                                    return num / Math.sqrt(dist);
                                },
                            },
                            tag: {
                                skip: "phaseDiscard",
                            },
                        },
                        selectTarget: 1,
                        enable: true,
                        content: function () {
                            target.addJudge(card, cards);
                        },
                        allowMultiple: false,
                    },
                    kivameidui: {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip2",
                        onLose: function () {
                            player.useCard(game.createCard('kivameidui', 'diamond', 13), player);
                        },
                        filterLose: function (card, player) {
                            return player.hp < player.maxHp;
                        },
                        skills: ["kivadunji"],
                        tag: {
                            recover: 1,
                        },
                        ai: {
                            order: 9.5,
                            equipValue: function (card, player) {
                                if (player.hp == player.maxHp) return 5;
                                if (player.countCards('h', 'kivameidui')) return 6;
                                return 0;
                            },
                            basic: {
                                equipValue: 5,
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                    },
                    kivaduizhang: {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip2",
                        onLose: function () {
                            player.useCard(game.createCard('kivaduizhang', 'diamond', 13), player);
                        },
                        filterLose: function (card, player) {
                            return player.hp < player.maxHp;
                        },
                        skills: ["kivaduizhang1", "kivaduizhang2"],
                        tag: {
                            recover: 1,
                        },
                        ai: {
                            order: 9.5,
                            equipValue: function (card, player) {
                                if (player.hp == player.maxHp) return 5;
                                if (player.countCards('h', 'kivameidui')) return 6;
                                return 0;
                            },
                            basic: {
                                equipValue: 5,
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                        image: "ext:王朝更替_策/kivameidui.png",
                    },
                    kivadongyehu: {
                        type: "equip",
                        subtype: "equip1",
                        distance: {
                            attackFrom: -3,
                        },
                        skills: ["kivadongyehu1", "kivadongyehu2"],
                        nomod: true,
                        nopower: true,
                        unique: true,
                        ai: {
                            equipValue: 9,
                            basic: {
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                equipValue: 7,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                        fullskin: true,
                    },
                    kivagalibang: {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip1",
                        distance: {
                            attackFrom: -3,
                        },
                        skills: ["kivagalibang1"],
                        ai: {
                            basic: {
                                equipValue: 4,
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                    },
                    kivaqiyicongwen: {
                        audio: true,
                        fullskin: true,
                        type: "trick",
                        enable: true,
                        selectTarget: -1,
                        cardcolor: "red",
                        toself: true,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        content: function () {
                            if (get.is.versus()) {
                                if (game.friend.contains(target)) {
                                    if (game.friend.length < game.enemy.length) {
                                        target.draw(3); return;
                                    }
                                }
                                else {
                                    if (game.friend.length > game.enemy.length) {
                                        target.draw(3); return;
                                    }
                                }
                            }
                            target.loseHp();
                            target.draw(4);
                        },
                        ai: {
                            basic: {
                                order: 7.2,
                                useful: 4.5,
                                value: 9.2,
                            },
                            result: {
                                target: 2,
                            },
                            tag: {
                                losehp: 4,
                                draw: 4,
                            },
                        },
                    },
                    kivayiliaobao: {
                        fullskin: true,
                        type: "equip",
                        subtype: "equip5",
                        skills: ["kivayiliao"],
                        ai: {
                            basic: {
                                equipValue: 7,
                                order: function (card, player) {
                                    if (player && player.hasSkillTag('reverseEquip')) {
                                        return 8.5 - get.equipValue(card, player) / 20;
                                    }
                                    else {
                                        return 8 + get.equipValue(card, player) / 20;
                                    }
                                },
                                useful: 2,
                                value: function (card, player) {
                                    var value = 0;
                                    var info = get.info(card);
                                    var current = player.getEquip(info.subtype);
                                    if (current && card != current) {
                                        value = get.value(current, player);
                                    }
                                    var equipValue = info.ai.equipValue;
                                    if (equipValue == undefined) {
                                        equipValue = info.ai.basic.equipValue;
                                    }
                                    if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                    if (typeof equipValue != 'number') equipValue = 0;
                                    return equipValue - value;
                                },
                            },
                            result: {
                                target: function (player, target) {
                                    return get.equipResult(player, target, name);
                                },
                            },
                        },
                        enable: true,
                        selectTarget: -1,
                        filterTarget: function (card, player, target) {
                            return target == player;
                        },
                        modTarget: true,
                        allowMultiple: false,
                        content: function () {
                            target.equip(card);
                        },
                        toself: true,
                        image: "ext:王朝更替_策/kiva112.png",
                    },
                },
                translate: {
                    jingukiva: "金箍棒",
                    "jingukiva_info": "当你装备此装备时，获得技能金睛",
                    wamiankiva: "瓦面金装锏",
                    "wamiankiva_info": "当你装备此装备时，获得技能【秦琼】。",
                    "kiva101": "奋竜忍刃",
                    "kiva101_info": "当你装备此装备时，弃两张牌并摸X牌;主动技，你可以多杀一名你范围内的角色;锁定技，你的进攻距离加一。",
                    "kiva103": "无悔证明",
                    "kiva103_info": "出牌阶段，对一名角色使用。获得技能不悔，重义，铜雀并丢一张牌失去1体力上限",
                    "kiva112": "景阳冈酒",
                    "kiva112_info": "锁定技，你的酒没有次数限制;你可以将你的任意一张♠或♣手牌当【酒】使用。",
                    "kiva113": "流放之诏",
                    "kiva113_info": "出牌阶段，对一名角色使用,使其翻面。",
                    "kiva114": "妖刀星碎",
                    "kiva114_info": "锁定技，你造成的伤害均视为具有雷属性",
                    "kiva115": "击龙剑",
                    "kiva115_info": "每当你使用【杀】指定一名目标角色后，你无视其防具;锁定技，你可以用1张牌获得一点护甲，每回合限一次",
                    kivaleiyi: "雷伊的精元",
                    "kivaleiyi_info": "当你使用杀或被杀指定，你可以判定，若结果为：黑色，你弃置一名角色区域里的一张牌；红色，你选择一名角色，其摸一张惊雷闪，若其是“先辅”选择的角色，改为其摸三张毒液循环;锁定技，你造成的伤害均视为具有雷属性。",
                    kivawujinnengyuan: "无尽能源",
                    "kivawujinnengyuan_info": "结束阶段，你可以回两滴血并翻面",
                    "kivaRyuki2": "龙骑的龙",
                    "kivaRyuki2_info": "当你对距离1以内的一名角色造成1点伤害后，你可以回复1点体力或摸一张牌;你的进攻距离+1",
                    "kivaBlade2": "剑的剑",
                    "kivaBlade2_info": "锁定技：每当你的装备区有武器时，你使用【杀】指定一个目标后，该角色需要依次使用两张【闪】才能抵消此【杀】",
                    "kivaDecade2": "变身器(Decade)",
                    "kivaDecade2_info": "你可以变成假面骑士decade。当你失去该装备时，你变成门矢士。",
                    "kivaDecade3": "卡牌",
                    "kivaDecade3_info": "出牌阶段对一名角色使用，目标获得龙骑卡和剑卡",
                    "kivapoison_sha": "毒液循环",
                    "kivapoison_sha_info": "出牌阶段，对所有其他角色使用。每名目标角色需打出一张【闪】，否则受到1点剧毒伤害。",
                    kivakabuto: "甲斗腰带",
                    "kivakabuto_info": "准备阶段，你可以视为使用一张无视距离的杀;受到伤害后，你可以增加攻击力直到造成伤害。",
                    kivajingyesi: "静夜思",
                    "kivajingyesi_info": "出牌阶段，对一名其他角色使用。若判定结果不为方片，跳过其弃牌阶段。",
                    kivameidui: "美队的盾",
                    "kivameidui_info": "<font color=#AB0000>美</font>利<font color=#1800FF>坚</font>当你使用或打出闪时，你获得一张闪，你无法失去此装备。",
                    kivaduizhang: "队长的盾",
                    "kivaduizhang_info": "<font color=#AB0000>美</font>利<font color=#1800FF>坚</font>当你使用或打出闪时，你获得一张杀，当你使用或打出杀时，你获得一张闪，你无法失去此装备。",
                    kivadongyehu: "洞爷湖",
                    "kivadongyehu_info": "杀时加buff",
                    kivagalibang: "ex咖喱棒",
                    "kivagalibang_info": "<font color=#F4FF0B>亚瑟王</font>附体技，ex咖喱棒！！！",
                    kivaqiyicongwen: "弃医从文",
                    "kivaqiyicongwen_info": "出牌阶段，对你使用。你失去一点体力并摸四张牌。",
                    kivayiliaobao: "医疗包",
                    "kivayiliaobao_info": "你可以医疗一名队友！",
                    kivashuangjie: "小霸王双节棍",
                    "kivashuangjie_info": "出牌阶段限一次，你可以受到一点无来源的伤害，若如此做，你可以令一名其他角色失去所有技能，直到当前回合结束。",
                },
                list: [["club", "13", "kivashuangjie"], ["club", "6", "wamiankiva"], ["heart", "1", "kiva101"], ["diamond", "2", "kiva101"], ["spade", "5", "kiva112"], ["club", "13", "kiva112"], ["club", "13", "kiva113"], ["club", "12", "kiva114"], ["diamond", "1", "kiva115"], ["heart", "2", "kiva115"], ["heart", "1", "kivaleiyi"], ["diamond", "1", "kivawujinnengyuan"], ["club", "6", "wamiankiva"], ["heart", "1", "kiva101"], ["diamond", "2", "kiva101"], ["spade", "5", "kiva112"], ["club", "13", "kiva112"], ["club", "13", "kiva113"], ["spade", "13", "kiva113"], ["club", "13", "kiva114"], ["club", "12", "kiva114"], ["diamond", "1", "kiva115"], ["heart", "2", "kiva115"], ["heart", "1", "kivaleiyi"], ["diamond", "1", "kivawujinnengyuan"], ["spade", "1", "kivapoison_sha"], ["spade", "1", "kivapoison_sha"], ["spade", "1", "kivapoison_sha"], ["heart", "13", "kivakabuto"], ["heart", "13", "kivakabuto"], ["diamond", "13", "kivajingyesi"], ["diamond", "13", "kivajingyesi"], ["diamond", "13", "kivameidui"], ["club", "13", "kivameidui"], ["heart", "10", "kivaqiyicongwen"], ["diamond", "10", "kivaqiyicongwen"], ["heart", "9", "kivaqiyicongwen"], ["heart", "5", "kivayiliaobao"]],
            },
            skill: {
                skill: {
                    kivafanxiong: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "shaBegin",
                        },
                        forced: true,
                        content: function (trigger, player) {
                            if (trigger.card.suit == 'diamond') {
                                player.draw();
                            }
                            if (trigger.card.suit == 'heart') {
                                trigger.directHit = true;
                            }
                        },
                    },
                    kivaxuwu: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        content: function () {
                            player.damage();
                        },
                    },
                    kivashaobing: {
                        trigger: {
                            player: "damageBefore",
                        },
                        forced: true,
                        content: function () {
                            'step 0'
                            player.judge();
                            'step 1'
                            switch (get.color(result.card)) {
                                case 'red':
                                    trigger.num -= 1;
                                    break;
                                case 'black':
                                    trigger.num /= 2;
                                    break;
                            }
                        },
                    },
                    kivayueyin: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "phaseBegin",
                        },
                        forced: true,
                        content: function (event, card) {
                            'step 0'
                            event.num == trigger.card;
                            trigger.player.judge(ui.special);
                            'step 1'
                            switch (get.number(result.card)) {
                                case 13:
                                    player.gain(result.card);
                                    player.$gain2(result.card);
                                    break;
                            }
                        },
                    },
                    kivaxiachan: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return player != target && target.countCards('h') > 0;
                        },
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        content: function () {
                            "step 0"
                            player.chooseToCompare(target);
                            "step 1"
                            if (result.bool) {
                                player.useCard({ name: 'juedou' }, target);
                            }
                            else {
                                target.useCard({ name: 'juedou' }, player);
                            }
                        },
                    },
                    kivasuzi: {
                        audio: "ext:王朝更替_策:2",
                        unique: true,
                        gainable: true,
                        trigger: {
                            global: "dieEnd",
                        },
                        priority: 5,
                        filter: function (event, player) {
                            return event.playerCards && event.playerCards.length > 0 && player.countCards('h') == 0 || player.hp == 1;
                        },
                        check: function (event) {
                            for (var i = 0; i < event.playerCards.length; i++) {
                                if (event.playerCards[i].name == 'du') return false;
                            }
                            return true;
                        },
                        content: function () {
                            "step 0"
                            player.gain(trigger.playerCards);
                            player.$draw(trigger.playerCards);
                            game.delay();
                            "step 1"
                            for (var i = 0; i < trigger.playerCards.length; i++) {
                                trigger.cards.remove(trigger.playerCards[i]);
                            }
                            trigger.playerCards.length = 0;
                        },
                    },
                    "kiva新renwang": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            target: "useCardToBegin",
                        },
                        filter: function (event, player) {
                            return player != event.player && event.card && ((get.type(event.card) == 'trick') || (get.type(event.card) == 'delay') || (event.card.name == 'sha'));
                        },
                        check: function (event, player) {
                            return (get.attitude(player, event.player) <= 0);
                        },
                        content: function () {
                            player.discardPlayerCard(trigger.player, 'he', true);
                        },
                    },
                    kivahuanxiang: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "damegeBefore",
                        },
                        filter: function (event, player) {
                            return get.itemtype(event.cards) == 'cards' && get.position(event.cards[0]) == 'd' && event.card.suit == 'diamond' && event.source.hp == event.source.maxHp;
                        },
                        content: function () {
                            player.gain(trigger.cards);
                            player.$gain2(trigger.cards);
                            trigger.cancel();
                        },
                    },
                    kivaczhasi: {
                        audio: "ext:王朝更替_策:2",
                        forced: true,
                        trigger: {
                            player: "dying",
                        },
                        priority: 10,
                        content: function () {
                            'step 0'
                            player.hp = Math.min(3, player.maxHp);
                            player.loseMaxHp();
                            'step 1'
                            player.link(false);
                            'step 2'
                            player.turnOver(false);
                        },
                        ai: {
                            order: 0.5,
                            skillTagFilter: function (player) {
                                if (player.storage.niepan) return false;
                                if (player.hp > 0) return false;
                            },
                            save: true,
                            result: {
                                player: function (player) {
                                    if (player.hp == 0) return 10;
                                    if (player.hp <= 1 && player.countCards('he') <= 1) return 10;
                                    return 0;
                                },
                            },
                            threaten: function (player, target) {
                                if (!target.storage.niepan) return 0.6;
                            },
                        },
                        intro: {
                            content: "limited",
                        },
                    },
                    kivazhounan: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "chooseCardBegin",
                        },
                        check: function (event, player) {
                            return player.hasCard(function (card) {
                                var val = get.value(card);
                                return val < 0 || (val <= 4 && card.number >= 11);
                            });
                        },
                        filter: function (event) {
                            return event.type == 'compare' && !event.directresult;
                        },
                        content: function () {
                            var cards = get.cards();
                            cards[0].discard();
                            cards[0].vanishtag.add('kivazhounan');
                            trigger.directresult = cards;
                            trigger.untrigger();
                        },
                        group: "kivazhounan_number",
                        subSkill: {
                            number: {
                                trigger: {
                                    player: "compare",
                                    target: "compare",
                                },
                                filter: function (event, player) {
                                    if (event.iwhile) return false;
                                    if (event.player == player) {
                                        return get.suit(event.card1) == 'spade';//&&event.card1.vanishtag.contains('tianbian');
                                    }
                                    else {
                                        return get.suit(event.card2) == 'spade';//&&event.card2.vanishtag.contains('tianbian');
                                    }
                                },
                                silent: true,
                                content: function () {
                                    game.log(player, '拼点牌点数视为', '#y1');
                                    if (player == trigger.player) {
                                        trigger.num1 = 1;
                                    }
                                    else {
                                        trigger.num2 = 1;
                                    }
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                        },
                    },
                    kivaawenji: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseDiscardBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('kivaawenji'), function (card, player, target) {
                                return player != target && target.countCards('h') > 0;
                            }).set('ai', function (target) {
                                return -get.attitude(_status.event.player, target) / target.countCards('h');
                            });
                            "step 1"
                            if (result.bool) {
                                player.logSkill('kivaawenji', result.targets[0]);
                                player.chooseToCompare(result.targets[0]);
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.bool) {
                                player.damage();
                                player.draw(2);
                            }
                            else {
                                trigger.cancel();
                            }
                        },
                        ai: {
                            expose: 0.1,
                        },
                    },
                    kivatunjiang: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        content: function () {
                            "step 0"
                            var list = ['wei', 'shu', 'wu', 'qun'];
                            var num = game.countPlayer(function (current) {
                                if (list.contains(current.group)) {
                                    list.remove(current.group);
                                    return true;
                                }
                            });
                            trigger.num += num;
                            "step 1"
                            player.addTempSkill('kivatunjiang2');
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    "kivatunjiang2": {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "gainEnd",
                        },
                        forced: true,
                        content: function () {
                            if (player.countCards('h') > 6) player.chooseToDiscard(true, player.countCards('h') - 6, 'h');
                        },
                    },
                    kivawumou: {
                        audio: "ext:王朝更替_策:2",
                        audioname: ["jianyong"],
                        mod: {
                            globalFrom: function (from, to, distance) {
                                return distance - Infinity;
                            },
                        },
                        trigger: {
                            player: "useCard",
                        },
                        forced: true,
                        filter: function (event) {
                            return (get.type(event.card) == 'trick' || get.type(event.card) == 'delay' && event.cards[0] && event.cards[0] == event.card);
                        },
                        content: function () {
                            player.loseHp();
                        },
                        ai: {
                            threaten: 1.4,
                            noautowuxie: true,
                        },
                    },
                    kivafenjiang: {
                        audio: "ext:王朝更替_策:2",
                        group: "kivafenjiang2",
                        trigger: {
                            source: "damageBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num++;
                        },
                        ai: {
                            norespond: true,
                            skillTagFilter: function (player, tag, arg) {
                                if (tag == 'norespond' && Array.isArray(arg)) {
                                    if (get.distance(arg[1], player) <= 1) return true;
                                }
                                return false;
                            },
                        },
                    },
                    "fuhekiva_lvbu": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return game.roundNumber == 5;
                        },
                        forced: true,
                        content: function () {
                            player.init('re_lvbu');
                            player.loseMaxHp(3);
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    kivajianzhi: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "useCard",
                        },
                        filter: function (event, player) {
                            return event.player.hp * 2 < event.card.number && player.countCards('he') > 0;
                        },
                        content: function () {
                            player.chooseToDiscard(true, 'he');
                            trigger.cancel();
                        },
                    },
                    kivaxiaozhong: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "phaseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.identity == 'zhong' && event.player.identity == 'zhu';
                        },
                        content: function () {
                            "step 0"
                            trigger.player.judge();
                            "step 1"
                            switch (get.color(result.card)) {
                                case 'red':
                                    trigger.player.recover();
                                    break;
                            }
                        },
                    },
                    kivashejun: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.identity == 'fan' && event.player.identity == 'zhu';
                        },
                        content: function () {
                            "step 0"
                            player.judge();
                            "step 1"
                            switch (get.color(result.card)) {
                                case 'black':
                                    player.useCard({ name: 'sha' }, trigger.player);
                                    break;
                            }
                        },
                    },
                    kivaanruo: {
                        group: "kivaanruo2",
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "loseEnd",
                        },
                        filter: function (event, player) {
                            return event.cards && event.cards.length >= 2;
                        },
                        forced: true,
                        content: function () {
                            player.chooseToDiscard(true);
                        },
                    },
                    "kivaanruo2": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "discardAfter",
                        },
                        filter: function (event, player) {
                            return event.cards && event.cards.length < 3 && event.player != player;
                        },
                        content: function () {
                            player.draw();
                        },
                    },
                    "kivafenjiang2": {
                        mod: {
                            wuxieRespondable: function (card, player, target, current) {
                                if (player != current) {
                                    return false;
                                }
                            },
                        },
                        ai: {
                            norespond: true,
                            skillTagFilter: function (player, tag, arg) {
                                if (tag == 'norespond' && Array.isArray(arg)) {
                                    return true;
                                }
                                return false;
                            },
                        },
                    },
                    kivaxunlong: {
                        init: function (player) {
                            player.storage.kivaxunlong = 0;
                        },
                        intro: {
                            content: "mark",
                        },
                        forced: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player == event.player;
                        },
                        content: function () {
                            player.storage.kivaxunlong++;
                            player.syncStorage('kivaxunlong');
                            player.markSkill('kivaxunlong');
                        },
                        ai: {
                            combo: "kivakonglong",
                        },
                    },
                    kivakonglong: {
                        enable: "phaseUse",
                        audio: "ext:王朝更替_策:2",
                        filter: function (event, player) {
                            return player.storage.kivaxunlong >= 3;
                        },
                        filterTarget: function (card, player, target) {
                            return player != target || player == target;
                        },
                        selectTarget: [1, 3],
                        multitarget: true,
                        multiline: true,
                        content: function (player, target, trigger) {
                            player.storage.kivaxunlong -= 3;
                            player.unmarkSkill('kivaxunlong');
                            player.syncStorage('kivaxunlong');
                            player.useCard({ name: 'guohe' }, targets, false);
                            player.useCard({ name: 'sha' }, targets, false);
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivaletian: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        content: function (player) {
                            player.useCard({ name: 'shunshou' }, player);
                        },
                    },
                    kivajianzao: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "ext:王朝更替_策:2",
                        position: "he",
                        filterCard: true,
                        selectCard: 1,
                        filterTarget: function (card, player, target) {
                            return player != target || player == target;
                        },
                        content: function () {
                            target.equip(event.equip || game.createCard(get.inpilefull('equip').randomGet()), true);
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 1.7,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivashiting: {
                        enable: "phaseUse",
                        skillAnimation: true,
                        audio: "ext:奇异博士:2",
                        filter: function (event, player) {
                            return !player.storage.kivashiting;
                        },
                        filterTarget: function (card, player, target) {
                            return player != target || target == player;
                        },
                        content: function () {
                            player.storage.kivashiting = true;
                            target.uninit;
                            target.init(target.name, 'kiva法阵fazhen');
                            player.awakenSkill('kivashiting');
                        },
                    },
                    kivahuansuo: {
                        audio: "ext:奇异博士:2",
                        position: "h",
                        filterCard: true,
                        selectCard: 1,
                        trigger: {
                            global: "phaseUseBegin",
                        },
                        filterTarget: function (card, player, trigger) {
                            return player != trigger.player;
                        },
                        content: function (trigger) {
                            var target = trigger.player;
                            "step 0"
                            var list = [];
                            if (!player.hasSkill('jueqing')) {
                                list.push('jueqing');
                            }
                            if (!player.hasSkill('jili')) {
                                list.push('jili');
                            }
                            if (!player.hasSkill('zishu')) {
                                list.push('zishu');
                            }
                            if (list.length) {
                                player.chooseControl(list).set('prompt', '选择获得一项技能');
                            }
                            'step 1'
                            trigger.addtempSkill(result.control, { global: 'roundStart' });
                            trigger.popup(result.control);
                            game.log(trigger, '获得技能', '【' + get.translation(result.control) + '】');
                        },
                    },
                    kivaqqiyi: {
                        audio: "ext:奇异博士:2",
                        trigger: {
                            player: "phaseBegin",
                        },
                        frequent: true,
                        content: function () {
                            player.draw();
                        },
                    },
                    "kivahuansuo2": {
                        audio: "ext:奇异博士:2",
                        trigger: {
                            global: "phaseUseBegin",
                        },
                        forced: true,
                        content: function () {
                            "step 0"
                            player.judge();
                            "step 1"
                            switch (get.suit(result.card)) {
                                case 'diamond':
                                    player.addTempSkill('zishu');
                                    break;
                                case 'spade':
                                    player.addTempSkill('weimu');
                                    break;
                                case 'club':
                                    player.addTempSkill('jueqing');
                                    break;
                                case 'heart':
                                    player.addTempSkill('jili');
                                    break;
                            }
                        },
                    },
                    kivapinghuan: {
                        audio: "ext:奇异博士:2",
                        trigger: {
                            player: "judge",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        content: function () {
                            "step 0"
                            player.chooseCard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +
                                get.translation(trigger.player.judging[0]) + '，' + get.prompt('kivapinghuan')).set('ai', function (card) {
                                    var trigger = _status.event.getTrigger();
                                    var player = _status.event.player;
                                    var judging = _status.event.judging;
                                    var result = trigger.judge(card) - trigger.judge(judging);
                                    var attitude = get.attitude(player, trigger.player);
                                    if (attitude == 0 || result == 0) return 0;
                                    if (attitude > 0) {
                                        return result - get.value(card) / 2;
                                    }
                                    else {
                                        return -result - get.value(card) / 2;
                                    }
                                }).set('judging', trigger.player.judging[0]);
                            "step 1"
                            if (result.bool) {
                                player.respond(result.cards, 'highlight');
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.bool) {
                                player.logSkill('kivapinghuan');
                                if (trigger.player.judging[0].clone) {
                                    trigger.player.judging[0].clone.classList.remove('thrownhighlight');
                                    game.broadcast(function (card) {
                                        if (card.clone) {
                                            card.clone.classList.remove('thrownhighlight');
                                        }
                                    }, trigger.player.judging[0]);
                                    game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));
                                }
                                trigger.player.judging[0].discard();
                                trigger.player.judging[0] = result.cards[0];
                                if (!get.owner(result.cards[0], 'judge')) {
                                    trigger.position.appendChild(result.cards[0]);
                                }
                                game.log(trigger.player, '的判定牌改为', result.cards[0]);
                                game.delay(2);
                                player.addTempSkill('kivayingcai2', { player: "gainEnd" });
                            }
                        },
                        ai: {
                            tag: {
                                rejudge: 1,
                            },
                        },
                    },
                    kivazhuaji: {
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return player != target && target.isMinHp;
                        },
                        content: function () {
                            player.useCard({ name: 'sha' }, target);
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivazhenjin: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "shaBegin",
                        },
                        filter: function (event, player, target) {
                            return player.countCards('h') <= 2;
                        },
                        forced: true,
                        content: function () {
                            trigger.directHit = true;
                            if (!player.hujia) player.changeHujia();
                        },
                    },
                    kivaleishenthor: {
                        trigger: {
                            player: "damageBefore",
                        },
                        forced: true,
                        unique: true,
                        filter: function (event) {
                            return event.nature == 'thunder';
                        },
                        content: function () {
                            trigger.cancel();
                            player.addSkill('kivaleishen2');
                        },
                        ai: {
                            effect: {
                                target: function (card) {
                                    if (get.tag(card, 'thunderDamege')) {
                                        return [0, 2];
                                    }
                                },
                            },
                        },
                    },
                    "kivaleishen2": {
                        trigger: {
                            source: "damageBefore",
                        },
                        forced: true,
                        content: function () {
                            trigger.nature = 'thunder';
                            player.removeSkill('kivaleishen2');
                        },
                    },
                    kivatianshen: {
                        trigger: {
                            player: "damageBefore",
                        },
                        forced: true,
                        content: function () {
                            trigger.num /= 2;
                        },
                    },
                    kivajisu: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        content: function () {
                            player.phaseDraw();
                            player.phaseUse();
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    kivayaxing: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return game.roundNumber == 10;
                        },
                        forced: true,
                        content: function () {
                            game.over(true);
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    kivajingu: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageBefore",
                        },
                        content: function () {
                            "step 0"
                            player.loseHp();
                            "step 1"
                            player.draw();
                            trigger.cancel();
                        },
                    },
                    kivalangzhua: {
                        mod: {
                            attackFrom: function (from, to, distance) {
                                if (!from.getEquip(1)) return distance - 2
                            },
                            selectTarget: function (card, player, range) {
                                if (card.name == 'sha' && range[1] != -1) range[1]++;
                            },
                        },
                    },
                    kivayongbing: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            source: "damageEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (event._notrigger.contains(event.player)) return false;
                            return event.player.isAlive() && event.player.countCards('he') > 0;
                        },
                        check: function () {
                            return false;
                        },
                        content: function () {
                            'step 0'
                            trigger.player.chooseTarget(function (card, player, target) {
                                var evt = _status.event.getParent();
                                return evt.player.canUse({ name: 'guohe' }, target) && target != _status.event.player;
                            }, get.prompt('kivayongbing')).set('ai', function (target) {
                                var evt = _status.event.getParent();
                                return get.effect(target, { name: 'guohe' }, evt.player, _status.event.player) - 2;
                            });
                            'step 1'
                            if (result.bool) {
                                player.gainPlayerCard(trigger.player, 'he', true);
                                event.target = result.targets[0];
                                trigger.player.line(player, 'green');
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            if (event.target) {
                                player.useCard({ name: 'guohe' }, event.target, 'noai');
                            }
                        },
                        ai: {
                            halfneg: true,
                        },
                    },
                    kivalengxue: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "guoheEnd",
                        },
                        content: function () {
                            "step 0"
                            player.chooseToDiscard(true);
                            "step 1"
                            player.draw();
                        },
                    },
                    kivapolu: {
                        mod: {
                            targetInRange: function (card, player, target, now) {
                                if (card.name == 'sha' && get.color(card) == 'black') return true;


                            },
                        },
                    },
                    kivafuzhi: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        position: "h",
                        filterCard: true,
                        selectCard: [0, Infinity],
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            player.$give(cards.length, target);
                            target.chooseToDiscard(true, player.maxHp - player.hp);
                            target.gain(cards, player);
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'juedou') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivayice: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                        },
                        frequent: true,
                        filter: function (event) {
                            return (event.num > 0)
                        },
                        content: function () {
                            "step 0"
                            event.cards = get.cards(3 * trigger.num);
                            "step 1"
                            if (event.cards.length > 1) {
                                player.chooseCardButton('将“遗策”牌分配给任意角色', true, event.cards, [1, event.cards.length]).set('ai', function (button) {
                                    if (ui.selected.buttons.length == 0) return 1;
                                    return 0;
                                });
                            }
                            else if (event.cards.length == 1) {
                                event._result = { links: event.cards.slice(0), bool: true };
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.bool) {
                                for (var i = 0; i < result.links.length; i++) {
                                    event.cards.remove(result.links[i]);
                                }
                                event.togive = result.links.slice(0);
                                player.chooseTarget('将' + get.translation(result.links) + '交给一名角色', true).set('ai', function (target) {
                                    var att = get.attitude(_status.event.player, target);
                                    if (_status.event.enemy) {
                                        return -att;
                                    }
                                    else if (att > 0) {
                                        return att / (1 + target.countCards('h'));
                                    }
                                    else {
                                        return att / 100;
                                    }
                                }).set('enemy', get.value(event.togive[0]) < 0);
                            }
                            "step 3"
                            if (result.targets.length) {
                                result.targets[0].gain(event.togive, 'draw');
                                player.line(result.targets[0], 'green');
                                game.log(result.targets[0], '获得了' + get.cnNumber(event.togive.length) + '张牌');
                                event.goto(1);
                            }
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                        if (!target.hasFriend()) return;
                                        var num = 1;
                                        if (get.attitude(player, target) > 0) {
                                            if (player.needsToDiscard()) {
                                                num = 0.7;
                                            }
                                            else {
                                                num = 0.5;
                                            }
                                        }
                                        if (target.hp >= 4) return [1, num * 2];
                                        if (target.hp == 3) return [1, num * 1.5];
                                        if (target.hp == 2) return [1, num * 0.5];
                                    }
                                },
                            },
                        },
                    },
                    kivatianze: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "ext:王朝更替_策:2",
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            "step 0"
                            target.chooseDrawRecover(true, 3);
                            "step 1"
                            player.loseHp();
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    "guojia_fuhekiva": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.hp == 1;
                        },
                        forced: true,
                        content: function () {
                            player.init('guojia');
                            player.loseMaxHp();
                        },
                    },
                    kivawulin: {
                        mod: {
                            cardEnabled: function (card, player) {
                                if (_status.event.skill != 'kivawulin' && card.name != 'sha' && get.color(card) == 'red') return false;
                            },
                            cardUsable: function (card, player) {
                                if (card.name == 'sha' && get.color(card) == 'black') return Infinity;
                                if (_status.event.skill != 'kivawulin' && card.name != 'sha' && get.color(card) == 'red') return false;
                            },
                            cardRespondable: function (card, player) {
                                if (_status.event.skill != 'kivawulin' && card.name != 'sha' && get.color(card) == 'red') return false;
                            },
                            cardSavable: function (card, player) {
                                if (_status.event.skill != 'kivawulin' && card.name != 'sha' && get.color(card) == 'red') return false;
                            },
                            targetInRange: function (card) {
                                if (get.color(card) == 'red' || _status.event.skill == 'kivawulin') return true;
                            },
                        },
                        audio: "ext:王朝更替_策:2",
                        enable: ["chooseToUse", "chooseToRespond"],
                        filterCard: {
                            color: "red",
                        },
                        viewAs: {
                            name: "sha",
                        },
                        check: function () { return 1 },
                        ai: {
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.tag(card, 'respondSha') && current < 0) return 0.6
                                },
                            },
                            respondSha: true,
                            order: 4,
                            useful: -1,
                            value: -1,
                            basic: {
                                useful: [5, 1],
                                value: [5, 1],
                            },
                            result: {
                                target: function (player, target) {
                                    if (player.hasSkill('jiu') && !target.getEquip('baiyin')) {
                                        if (get.attitude(player, target) > 0) {
                                            return -6;
                                        }
                                        else {
                                            return -3;
                                        }
                                    }
                                    return -1.5;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function (card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function (card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function (card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function (card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function (card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                            },
                        },
                    },
                    kivamengyan: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                        },
                        forced: true,
                        content: function () {
                            trigger.source.loseMaxHp(true);
                        },
                    },
                    "guanyu_fuhekiva": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.countUsed('sha') == 0;
                        },
                        content: function () {
                            player.init('re_guanyu');
                            player.loseMaxHp();
                        },
                    },
                    kivawangong: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return target != player && target.countCards('h');
                        },
                        content: function () {
                            'step 0'
                            player.loseHp();
                            'step 1'
                            if (target.countCards('h', 'tao')) {
                                player.viewHandcards(target);
                                player.useCard({ name: 'sha' }, target, false);
                                player.storage.kivawangong2 = target;
                                target.addTempSkill('kivawangong2');
                            }
                            else {
                                target.chooseToDiscard(true, 2);
                            }
                        },
                        ai: {
                            order: 8,
                            result: {
                                target: function (player, target) {
                                    if (player.hp <= 2) return 0;
                                    if (player.hp == 3) return target.hp <= 2 ? -1 : 0;
                                    return -1;
                                },
                            },
                        },
                    },
                    kivabaizhong: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "shaBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.directHit = true;
                        },
                    },
                    "huangzhong_fuhekiva": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.hp == 1;
                        },
                        content: function () {
                            player.init('huangzhong');
                            player.loseMaxHp();
                        },
                    },
                    "kivawangong2": {
                        group: "kivawangong3",
                        audio: "ext:王朝更替_策:2",
                        mark: true,
                        intro: {
                            content: "受到伤害增加并会回复",
                        },
                        trigger: {
                            player: "damageBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num += 2;
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    "kivawangong3": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                        },
                        forced: true,
                        content: function () {
                            player.recover(2);
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    kivaxinyan: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return target != player && target.countCards('he');
                        },
                        content: function () {
                            'step 0'
                            player.draw();
                            'step 1'
                            if (target.countCards('h', 'sha')) {
                                player.viewHandcards(target);
                                target.useCard({ name: 'sha' }, player, false);
                                target.chooseToDiscard(true, 'e');
                            }
                            else {
                                player.viewHandcards(target);
                                player.discardPlayerCard(target, 'visible', true, 2);
                                player.chooseToDiscard(true, 'h');
                                target.addSkill('kivaxinyan2');
                            }

                        },
                    },
                    kivajitian: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        content: function () {
                            player.chooseToDiscard(true, 'j', player.countCards('j'));
                        },
                    },
                    "jiangwei_fuhekiva": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.countCards('h') == 0;
                        },
                        content: function () {
                            player.init('jiangwei');
                            player.loseMaxHp();
                        },
                    },
                    kivashexue: {
                        audio: "ext:王朝更替_策:2",
                        audioname: ["heqi", "sunce"],
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num++;
                        },
                        ai: {
                            threaten: 1.5,
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                return num += Infinity;
                            },
                        },
                    },
                    kivazhanxin: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return target != player && target.countCards('h');
                        },
                        content: function () {
                            'step 0'
                            player.chooseToDiscard([0, 2], true);
                            'step 1'
                            if (target.countCards('h', 'tao')) {
                                player.viewHandcards(target);
                                player.discardPlayerCard(target, 'visible', true);
                            }
                            else {
                                player.viewHandcards(target);
                            }
                        },
                        ai: {
                            order: 8,
                            result: {
                                target: function (player, target) {
                                    if (player.hp <= 2) return 0;
                                    if (player.hp == 3) return target.hp <= 2 ? -1 : 0;
                                    return -1;
                                },
                            },
                        },
                    },
                    "lvmeng_fuhekiva": {
                        trigger: {
                            player: "gainEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.countCards('h') >= 20;
                        },
                        content: function () {
                            player.init('re_lvmeng');
                            player.chooseToDiscard(true, player.countCard('h') - 4, 'h');
                            player.chooseToDiscard(true, player.countCard('ej'), 'ej');
                        },
                    },
                    kivaxunya: {
                        group: "qianya",
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        content: function () {
                            player.chooseToDiscard(true, 'j', player.countCards('j'));
                        },
                        mod: {
                            targetEnabled: function (card, player, target, now) {
                                if (card.name == 'shunshou' || card.name == 'guohe') return false;
                            },
                        },
                    },
                    kivajieying: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "loseEnd",
                        },
                        frequent: true,
                        filter: function (event, player) {
                            if (player.countCards('h')) return false;
                            for (var i = 0; i < event.cards.length; i++) {
                                if (event.cards[i].original == 'h') return true;
                            }
                            return false;
                        },
                        content: function () {
                            player.draw(player.countCards('e'));
                        },
                        ai: {
                            threaten: 0.8,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'guohe' || card.name == 'liuxinghuoyu') return 0.5;
                                },
                            },
                            noh: true,
                            skillTagFilter: function (player, tag) {
                                if (tag == 'noh') {
                                    if (player.countCards('h') != 1) return false;
                                }
                            },
                        },
                    },
                    "luxun_fuhekiva": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "gainEnd",
                        },
                        filter: function (event, player) {
                            return event.cards && event.cards.length > 4;
                        },
                        forced: true,
                        content: function () {
                            player.init('luxun');
                            player.loseMaxHp();
                        },
                    },
                    "kivaxinyan2": {
                        audio: "ext:王朝更替_策:2",
                        mark: true,
                        intro: {
                            content: "摸牌阶段，其少摸一张牌",
                        },
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num--;
                            player.removeSkill('kivaxinyan2');
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    kivafeizhe: {
                        enable: "phaseUse",
                        audio: "ext:王朝更替_策:2",
                        position: "he",
                        filterCard: true,
                        selectCard: [1, Infinity],
                        prompt: "变身朱家三废",
                        filter: function (card, player, target) {
                            return player.countCards('h') > 0;
                        },
                        filterTarget: function (card, player, target) {
                            return player != target || player == target;
                        },
                        content: function (target, player) {
                            if (player.countCards('h') == 0 && player != target) target.init('zhuzhi');
                            if (player.countCards('h') == 1 && player != target) target.init('zhuhuan');
                            if (player.countCards('h') >= 2 && player != target) target.init('zhuran');
                            if (target == player) {
                                player.addSkill('danshou');
                                player.addSkill('anguo');
                                player.addSkill('pingkou');
                            }
                        },
                    },
                    kivajuexiang: {
                        audio: "juexiang",
                        trigger: {
                            player: "dieBegin",
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('kivajuexiang'), function (card, player, target) {
                                return player != target && _status.event.source != target;
                            }).set('ai', function (target) {
                                var num = get.attitude(_status.event.player, target);
                                if (num > 0) {
                                    if (target.hp == 1) {
                                        num += 2;
                                    }
                                    if (target.hp < target.maxHp) {
                                        num += 2;
                                    }
                                }
                                return num;
                            }).set('source', trigger.source);
                            "step 1"
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('kivajuexiang', target);
                                target.recover();
                                target.insertPhase();
                            }
                        },
                        ai: {
                            expose: 0.5,
                        },
                    },
                    kivazhenjun: {
                        audio: "zhenjun",
                        trigger: {
                            player: "phaseEnd",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return player.hp < 3 || player.countCards('h') < 1;
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivazhenjun'), function (card, player, target) {
                                return target != player;
                            }).set('ai', function (target) {
                                return get.attitude(player, target);
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('kivazhenjun', result.targets);
                                result.targets[0].chooseToDiscard(5, true, 'e');
                            }
                        },
                    },
                    "kivatuxi魂": {
                        enable: "phaseUse",
                        usable: 1,
                        position: "h",
                        filterCard: true,
                        selectCard: [1, Infinity],
                        audio: "retuxi",
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            target.damage(cards.length / 2);
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'juedou') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivaxiaoguo: {
                        audio: "xiaoguo",
                        trigger: {
                            source: "damageEnd",
                        },
                        content: function () {
                            player.chooseToDiscard(true, 3);
                            player.draw(3);
                        },
                        ai: {
                            maixie: false,
                            "maixie_hp": false,
                            effect: {
                                target: function (card, player, target) {
                                    if (player.hasSkillTag('jueqing', false, target)) return [1, -1];
                                    if (get.tag(card, 'damage')) return [1, 0.5];
                                },
                            },
                        },
                    },
                    kivaziliang: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "jixi",
                        filterTarget: true,
                        filter: function (event, player) {
                            return player.storage.tuntian.length > 0;
                        },
                        content: function () {
                            "step 0"
                            player.chooseCardButton(player.storage.tuntian, true);
                            "step 1"
                            var card = result.links[0];
                            card.discard();
                            player.$throw(card);
                            player.storage.tuntian.remove(card);
                            if (!player.storage.tuntian.length) {
                                player.unmarkSkill('tuntian');
                            }
                            else {
                                player.markSkill('tuntian');
                            }
                            player.syncStorage('tuntian');
                            "step 2"
                            target.draw(2);
                            "step 3"
                            if (target.countCards('h') == 2) {
                                target.recover();
                            }
                        },
                        ai: {
                            order: 1,
                            result: {
                                target: function (player, target) {
                                    if (player != target) return 0;
                                    if (player.countCards('h') + 2 <= player.hp + player.storage.tuntian.length) return 1;
                                    return 0;
                                },
                            },
                        },
                    },
                    kivashuangxiong: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "shuangxiong",
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            player.loseHp();
                            player.useCard({ name: 'juedou' }, target);
                            if (target.hp > player.hp) player.useCard({ name: 'juedou' }, target);
                            if (target.hp > player.hp) player.useCard({ name: 'juedou' }, target);
                            if (target.hp > player.hp) player.useCard({ name: 'juedou' }, target);
                            if (target.hp > player.hp) player.useCard({ name: 'juedou' }, target);
                            if (target.hp > player.hp) player.useCard({ name: 'juedou' }, target);
                            if (target.hp > player.hp) player.useCard({ name: 'juedou' }, target);
                            if (target.hp > player.hp) player.useCard({ name: 'juedou' }, target);
                            if (target.hp > player.hp) player.useCard({ name: 'juedou' }, target);
                            if (target.hp > player.hp) player.useCard({ name: 'juedou' }, target);
                            if (target.hp > player.hp) player.useCard({ name: 'juedou' }, target);
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    "kivaxiying2": {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            global: "damageEnd",
                        },
                        content: function () {
                            player.draw();
                        },
                        ai: {
                            noh: true,
                        },
                    },
                    kivaxiying: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            player.chooseToDiscard(true, player.countCards('h') / 2);
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        group: "kivaxiying2",
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    kivamanshen: {
                        unique: true,
                        group: ["huashen", "xinsheng"],
                        trigger: {
                            player: ["phaseAfter", "damageEnd"],
                        },
                        direct: true,
                        init: function (player) {
                            player.storage.kivamanshen = [];
                            // player.storage.xiongcai2=0;
                        },
                        intro: {
                            content: "characters",
                        },
                        content: function () {
                            'step 0'
                            // if(player.storage.xiongcai2<1){
                            //     player.storage.xiongcai2++;
                            //     event.finish();
                            // }
                            // else{
                            //     player.storage.xiongcai2=0;
                            // }
                            'step 1'
                            player.logSkill('kivamanshen');
                            var list = [];
                            var list2 = [];
                            var players = game.players.concat(game.dead);
                            for (var i = 0; i < players.length; i++) {
                                list2.add(players[i].name);
                                list2.add(players[i].name1);
                                list2.add(players[i].name2);
                            }
                            for (var i in lib.character) {
                                if (lib.character[i][4].contains('boss')) continue;
                                if (lib.character[i][4].contains('minskin')) continue;
                                if (player.storage.kivamanshen.contains(i)) continue;
                                if (list2.contains(i)) continue;
                                list.push(i);
                            }
                            var name = list.randomGet();
                            player.storage.kivamanshen.push(name);
                            player.markSkill('kivamanshen');
                            var skills = lib.character[name][3];
                            for (var i = 0; i < skills.length; i++) {
                                player.addSkill(skills[i]);
                            }
                            event.dialog = ui.create.dialog('<div class="text center">' + get.translation(player) + '发动了【漫神】', [[name], 'character']);
                            game.delay(2);
                            'step 2'
                            event.dialog.close();
                        },
                    },
                    kivaxunxun: {
                        audio: "xunxun",
                        enable: "phaseUse",
                        usable: 10,
                        position: "h",
                        filterCard: true,
                        selectCard: 1,
                        prompt: "重铸一张手牌",
                        check: function (card) {
                            return 6 - get.value(card)
                        },
                        content: function () {
                            player.draw(cards.length);
                        },
                        ai: {
                            order: 1,
                            result: {
                                player: 1,
                            },
                            threaten: 1.5,
                        },
                    },
                    kivabingfa: {
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        filter: function (event, player) {
                            return player.countCards('e') > 0;
                        },
                        discard: false,
                        lose: true,
                        content: function () {
                            target.gain(player.getCards('e'), player);
                            event.num = cards.length;
                            player.$give(player.getCards('e'), target);
                            target.addTempSkill('kivabingfa2', { player: 'phaseAfter' });
                        },
                        ai: {
                            order: 1,
                            result: {
                                target: function (player, target) {
                                    if (target.hasSkillTag('nogain')) return 0;
                                    if (player.countCards('h') == 1 && player.countCards('h', 'du')) return -1;
                                    if (player.hp <= 2 && player.countCards('h', 'shan')) return 0;
                                    if (target.countCards('h') + player.countCards('h') > target.hp + 2) return 0;
                                    if (get.attitude(player, target) > 3) return 1;
                                    return 0;
                                },
                            },
                        },
                    },
                    kivabaoshen: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        content: function () {
                            player.addTempSkill('kivabaoshen2', { player: "phaseBegin" });
                            player.turnOver();
                        },
                    },
                    "kivabingfa2": {
                        audio: "ext:王朝更替_策:2",
                        mark: true,
                        intro: {
                            content: "使用一张非转化装备，你可以摸一张牌。",
                        },
                        trigger: {
                            player: "useCard",
                        },
                        frequent: true,
                        filter: function (event) {
                            return (get.type(event.card) == 'equip' && event.cards[0] && event.cards[0] == event.card);
                        },
                        content: function () {
                            player.draw();
                        },
                        ai: {
                            threaten: 1.4,
                            noautowuxie: true,
                        },
                    },
                    "kivabaoshen2": {
                        mod: {
                            targetEnabled: function (card, player, target, now) {
                                if (card.name == 'sha' || card.name == 'juedou') return false;
                            },
                        },
                    },
                    kivahuaiju: {
                        skillAnimation: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.storage.kivahuaiju && player.countCards('h') == 3 && player.countCards('e') == 3 && player.hp == 2;
                        },
                        content: function () {
                            player.storage.kivahuaiju = true;
                            game.over(true);
                            player.awakenSkill('kivahuaiju');
                        },
                    },
                    kivaligong: {
                        audio: "jigong",
                        enable: "phaseUse",
                        position: "h",
                        filterCard: true,
                        selectCard: 3,
                        check: function (card) {
                            return 6 - get.value(card)
                        },
                        content: function () {
                            player.loseHp();
                            player.recover();
                        },
                        ai: {
                            order: 1,
                            result: {
                                player: 1,
                            },
                            threaten: 1.5,
                        },
                    },
                    kivaluanji: {
                        audio: "luanji",
                        trigger: {
                            player: "loseHpEnd",
                        },
                        content: function () {
                            var list = game.filterPlayer(function (current) {
                                return player.canUse('wanjian', current) && current.isEnemyOf(player);
                            });
                            list.sort(lib.sort.seat);
                            player.useCard({ name: 'wanjian' }, list);
                        },
                    },
                    kivaxieyi: {
                        mark: true,
                        audio: "xueyi",
                        intro: {
                            content: "你可以多存三张牌",
                        },
                        trigger: {
                            global: "gameStart",
                            player: "enterGame",
                        },
                        forced: true,
                        content: function () {
                            player.draw(3);
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                return num + 3;
                            },
                        },
                    },
                    kivazhuzhen: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "gameStart",
                            player: "enterGame",
                        },
                        forced: true,
                        content: function () {
                            player.useCard(game.createCard('sanjian', 'club', 13), player);
                            player.useCard(game.createCard('daihuofenglun', 'diamond', 13), player);
                        },
                    },
                    kivanizhan: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "shaBegin",
                        },
                        frequent: true,
                        locked: false,
                        notemp: true,
                        init: function (player) {
                            player.storage.kivanizhan = [];
                        },
                        filter: function (event) {
                            return event.num > 0;
                        },
                        content: function () {
                            "step 0"
                            player.draw();
                            "step 1"
                            if (player.countCards('he')) {
                                player.chooseCard('将' + get.cnNumber(1) + '张手牌置于武将牌上作为“逆”', 1, true);
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.cards && result.cards.length) {
                                player.lose(result.cards, ui.special);
                                player.storage.kivanizhan = player.storage.kivanizhan.concat(result.cards);
                                player.syncStorage('kivanizhan');
                                player.markSkill('kivanizhan');
                                game.log(player, '将', result.cards, '置于武将牌上作为“逆”');
                            }
                        },
                        intro: {
                            content: "cards",
                        },
                        mod: {
                            attackFrom: function (from, to, distance) {
                                if (!from.getEquip(1)) return distance - player.storage.kivanizhan.length;
                            },
                            selectTarget: function (card, player, range) {
                                if (card.name == 'sha' && range[1] != -1) range[1]++;
                            },
                        },
                    },
                    kivawucheng: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:2",
                        derivation: "kivatufeng",
                        unique: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.storage.kivanizhan.length >= 3 && !player.storage.kivawucheng;
                        },
                        forced: true,
                        priority: 3,
                        content: function () {
                            player.loseMaxHp();
                            player.addSkill('kivatufeng');
                            player.awakenSkill('kivawucheng');
                        },
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 2;
                                return 0.5;
                            },
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (!target.hasFriend()) return;
                                    if (get.tag(card, 'damage') == 1 && target.hp == 2 && !target.isTurnedOver() &&
                                        _status.currentPhase != target && get.distance(_status.currentPhase, target, 'absolute') <= 3) return [0.5, 1];
                                },
                            },
                        },
                    },
                    kivatufeng: {
                        audio: "ext:王朝更替_策:2",
                        usable: 1,
                        enable: "phaseUse",
                        filter: function (event, player) {
                            return player.storage.kivanizhan.length > 0;
                        },
                        chooseButton: {
                            dialog: function (event, player) {
                                return ui.create.dialog('突烽', player.storage.kivanizhan, 'hidden');
                            },
                            backup: function (links, player) {
                                return {
                                    filterCard: function () { return false },
                                    selectCard: -1,
                                    viewAs: { name: 'juedou' },
                                    cards: links,
                                    onuse: function (result, player) {
                                        result.cards = lib.skill[result.skill].cards;
                                        var card = result.cards[0];
                                        player.storage.kivanizhan.remove(card);
                                        player.syncStorage('kivanizhan');
                                        if (!player.storage.kivanizhan.length) {
                                            player.unmarkSkill('kivanizhan');
                                        }
                                        else {
                                            player.markSkill('kivanizhan');
                                        }
                                        player.logSkill('kivatufeng', result.targets);
                                    }
                                }
                            },
                            prompt: function (links, player) {
                                return '选择突烽的目标';
                            },
                        },
                        ai: {
                            order: 10,
                            result: {
                                player: function (player) {
                                    return player.storage.kivanizhan.length - 1;
                                },
                            },
                        },
                    },
                    kivashifei: {
                        audio: "shifei",
                        trigger: {
                            player: "damageEnd",
                            source: "damageEnd",
                        },
                        filter: function (event) {
                            if (event._notrigger.contains(event.player)) return false;
                            return event.num && event.source && event.player &&
                                event.player.isAlive() && event.source.isAlive() && event.source != event.player;
                        },
                        check: function (event, player) {
                            if (event.player == player) return get.attitude(player, event.source) > -3;
                            return get.attitude(player, event.player) > -3;
                        },
                        logTarget: function (event, player) {
                            if (event.player == player) return event.source;
                            return event.player;
                        },
                        content: function () {
                            "step 0"
                            game.asyncDraw([trigger.player, trigger.source], trigger.num);
                            "step 1"
                            game.delay();
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                        },
                    },
                    kivaxxianji: {
                        audio: "shibei",
                        trigger: {
                            player: "damageEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return _status.currentPhase != player;
                        },
                        content: function () {
                            trigger.source.addTempSkill('suishi', ['phaseAfter', 'phaseBefore']);
                        },
                    },
                    kivakuanggu: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            source: "damageEnd",
                        },
                        filter: function (event) {
                            return event.num > 0;
                        },
                        locked: false,
                        notemp: true,
                        init: function (player) {
                            player.storage.kivakuanggu = [];
                        },
                        content: function () {
                            "step 0"
                            player.draw(trigger.num);
                            "step 1"
                            if (player.countCards('he')) {
                                player.chooseCard('将' + get.cnNumber(trigger.num) + '张手牌置于武将牌上作为“狂”', trigger.num, true);
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.cards && result.cards.length) {
                                player.lose(result.cards, ui.special);
                                player.storage.kivakuanggu = player.storage.kivakuanggu.concat(result.cards);
                                player.syncStorage('kivakuanggu');
                                player.markSkill('kivakuanggu');
                                game.log(player, '将', result.cards, '置于武将牌上作为“狂”');
                            }
                        },
                        intro: {
                            content: "cards",
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                return num - player.storage.kivakuanggu.length;
                            },
                            globalFrom: function (from, to, distance) {
                                return distance - 1;
                            },
                        },
                    },
                    kivaqimou: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "ext:王朝更替_策:2",
                        filterTarget: true,
                        filter: function (event, player) {
                            return player.storage.kivakuanggu.length > 0;
                        },
                        content: function () {
                            "step 0"
                            player.chooseCardButton(player.storage.kivakuanggu, true);
                            "step 1"
                            var card = result.links[0];
                            card.discard();
                            player.$throw(card);
                            player.storage.kivakuanggu.remove(card);
                            if (!player.storage.kivakuanggu.length) {
                                player.unmarkSkill('kivakuanggu');
                            }
                            else {
                                player.markSkill('kivakuanggu');
                            }
                            player.syncStorage('kivakuanggu');
                            "step 2"
                            target.draw();
                            "step 3"
                            if (target.hp == 1) {
                                target.draw(2);
                            }
                        },
                        ai: {
                            order: 1,
                            result: {
                                target: function (player, target) {
                                    if (player != target) return 0;
                                    if (player.countCards('h') + 2 <= player.hp + player.storage.kivakuanggu.length) return 1;
                                    return 0;
                                },
                            },
                        },
                    },
                    kivayulong: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                        },
                        frequent: true,
                        locked: false,
                        notemp: true,
                        init: function (player) {
                            player.storage.kivayulong = [];
                        },
                        filter: function (event) {
                            return event.num > 0;
                        },
                        content: function () {
                            "step 0"
                            player.draw(trigger.num);
                            "step 1"
                            if (player.countCards('he')) {
                                player.chooseCard('将' + get.cnNumber(trigger.num) + '张手牌置于武将牌上作为“御”', trigger.num, true);
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.cards && result.cards.length) {
                                player.lose(result.cards, ui.special);
                                player.storage.kivayulong = player.storage.kivayulong.concat(result.cards);
                                player.syncStorage('kivayulong');
                                player.markSkill('kivayulong');
                                game.log(player, '将', result.cards, '置于武将牌上作为“御”');
                            }
                        },
                        intro: {
                            content: "cards",
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                            threaten: 0.8,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                        if (!target.hasFriend()) return;
                                        if (target.hp >= 4) return [0.5, get.tag(card, 'damage') * 2];
                                        if (!target.hasSkill('paiyi') && target.hp > 1) return [0.5, get.tag(card, 'damage') * 1.5];
                                        if (target.hp == 3) return [0.5, get.tag(card, 'damage') * 1.5];
                                        if (target.hp == 2) return [1, get.tag(card, 'damage') * 0.5];
                                    }
                                },
                            },
                        },
                    },
                    kivatengkong: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num += player.storage.kivayulong.length;
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    kivahubao: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseUseEnd",
                        },
                        forced: true,
                        content: function () {
                            player.draw(2);
                            player.chooseToDiscard(true, 2);
                        },
                        mod: {
                            wuxieRespondable: function (card, player, target, current) {
                                if (player != current && get.distance(player, current) <= 1) {
                                    return false;
                                }
                            },
                        },
                        ai: {
                            norespond: true,
                            skillTagFilter: function (player, tag, arg) {
                                if (tag == 'norespond' && Array.isArray(arg)) {
                                    if (get.distance(arg[1], player) <= 1) return true;
                                }
                                return false;
                            },
                        },
                    },
                    kivasidi: {
                        audio: "ext:王朝更替_策:2",
                        audioname: ["jianyong"],
                        trigger: {
                            player: ["useCard", "respont"],
                        },
                        frequent: true,
                        filter: function (event) {
                            return (get.type(event.card) == 'basic' && event.cards[0] && event.cards[0] == event.card);
                        },
                        content: function () {
                            player.draw();
                        },
                        ai: {
                            threaten: 1.4,
                            noautowuxie: true,
                        },
                    },
                    kivatucao: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        filterTarget: function (card, player, target) {
                            return !target.hasSkill('kivatucao2') && target != player;
                        },
                        filter: function (event, player) {
                            return player.countCards('h', 'shan');
                        },
                        discard: false,
                        prepare: "give",
                        filterCard: {
                            name: "shan",
                        },
                        content: function () {
                            target.gain(cards, player);
                            target.storage.kivatucao3 = cards[0];
                            target.storage.kivatucao2 = player;
                            target.addTempSkill('kivatucao2', { player: 'phaseAfter' });
                        },
                        check: function (card) {
                            return 6 - get.value(card);
                        },
                        ai: {
                            order: 2,
                            result: {
                                target: function (player, target) {
                                    if (!target.hasSha()) return 1.2;
                                    return 1;
                                },
                            },
                        },
                    },
                    "kivatucao2": {
                        mark: true,
                        intro: {
                            content: "为什么是包盐啊！",
                        },
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "useCard",
                        },
                        forced: true,
                        content: function () {
                            player.chooseToDiscard(true);
                        },
                    },
                    "kivacaodan2": {
                        mark: true,
                        intro: {
                            content: "这和七♂珠有什么关系",
                        },
                        group: "zishu",
                        trigger: {
                            player: "gainEnd",
                        },
                        forced: true,
                        content: function () {
                            player.damage();
                        },
                    },
                    kivacaodan: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        content: function () {
                            game.countPlayer(function (current) {
                                if (current != player && !current.hasSkill('kivacaodan2')) {
                                    player.line(current, 'green');
                                    current.addTempSkill('kivacaodan2');
                                }
                            });
                        },
                    },
                    kivabaota: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "ext:王朝更替_策:2",
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            "step 0"
                            if (!target.isLinked()) target.link();
                            "step 1"
                            target.addTempSkill('fengyin');
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivajiangcai: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "ext:王朝更替_策:2",
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            if (player.hp > target.hp) target.useCard({ name: 'juedou' }, player);
                            if (target.hp > player.hp) player.useCard({ name: 'juedou' }, target);
                            if (player.hp == target.hp) {
                                player.draw();
                                target.draw();
                            }
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivafuchou: {
                        trigger: {
                            player: "damageEnd",
                        },
                        frequent: true,
                        content: function () {
                            player.useCard({ name: 'sha' }, trigger.source);
                        },
                    },
                    kivarenwang: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "loseEnd",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return event.cards && event.cards.length > 1;
                        },
                        content: function () {
                            player.recover();
                        },
                    },
                    kivajizhao: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        filterCard: true,
                        selectCard: -1,
                        discard: false,
                        lose: true,
                        content: function () {
                            player.$give(cards.length, target);
                            target.gain(cards, player);
                            target.addTempSkill('kivajizhao2', { player: 'phaseAfter' });
                        },
                        ai: {
                            order: 1,
                            result: {
                                target: function (player, target) {
                                    if (target.hasSkillTag('nogain')) return 0;
                                    if (player.countCards('h') == 1 && player.countCards('h', 'du')) return -1;
                                    if (player.hp <= 2 && player.countCards('h', 'shan')) return 0;
                                    if (target.countCards('h') + player.countCards('h') > target.hp + 2) return 0;
                                    if (get.attitude(player, target) > 3) return 1;
                                    return 0;
                                },
                            },
                        },
                    },
                    "kivajizhao2": {
                        mark: true,
                        intro: {
                            content: "可杀角色+1，，进攻距离+1，出杀次数+1",
                        },
                        mod: {
                            globalFrom: function (from, to, distance) {
                                return distance - 1;
                            },
                            selectTarget: function (card, player, range) {
                                if (card.name == 'sha' && range[1] != -1) range[1]++;
                            },
                            cardUsable: function (card, player, num) {
                                if (card.name == 'sha') return num + 1;
                            },
                        },
                    },
                    kivahengzhi: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        position: "he",
                        filterCard: true,
                        selectCard: [1, Infinity],
                        prompt: "弃置任意张牌并摸等量的牌",
                        check: function (card) {
                            return 6 - get.value(card)
                        },
                        content: function () {
                            player.draw(cards.length);
                            if (player.hp == 1) player.recover();
                        },
                        ai: {
                            order: 1,
                            result: {
                                player: 1,
                            },
                            threaten: 1.5,
                        },
                    },
                    kivayuanzhu: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "loseEnd",
                        },
                        frequent: true,
                        filter: function (event, player) {
                            for (var i = 0; i < event.cards.length; i++) {
                                if (event.cards[i].original == 'e') return true;
                            }
                            return false;
                        },
                        content: function () {
                            var num = 0;
                            for (var i = 0; i < trigger.cards.length; i++) {
                                if (trigger.cards[i].original == 'e') num += 1;
                            }
                            player.recover(num);
                        },
                        ai: {
                            noe: true,
                            reverseEquip: true,
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.type(card) == 'equip') return [1, 3];
                                },
                            },
                        },
                        audioname: ["sp_sunshangxiang"],
                    },
                    kivashixiong: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                        },
                        filter: function (event, player) {
                            return get.itemtype(event.cards) == 'cards' && get.position(event.cards[0]) == 'd';
                        },
                        content: function () {
                            player.gain(trigger.cards);
                            player.$gain2(trigger.cards);
                            player.chooseToDiscard(2, true);
                            player.draw(2);
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                            effect: {
                                target: function (card, player, target) {
                                    if (player.hasSkillTag('jueqing', false, target)) return [1, -1];
                                    if (get.tag(card, 'damage')) return [1, 0.5];
                                },
                            },
                        },
                    },
                    kivahuzhen: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        direct: true,
                        filter: function (event, player) {
                            for (var i = 0; i < game.players.length; i++) {
                                if (game.players[i].isDamaged()) {
                                    return true;
                                }
                            }
                            return false;
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivahuzhen'), [1, Infinity], function (card, player, target) {
                                return target.isDamaged();
                            }).set('ai', function (target) {
                                return get.attitude(player, target);
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('kivahuzhen', result.targets);
                                game.asyncDraw(result.targets);
                                player.addTempSkill('feiying', { player: "phaseBegin" });
                            }
                        },
                        ai: {
                            expose: 0.3,
                            threaten: 1.3,
                        },
                    },
                    kivakuilei: {
                        unique: true,
                        gainable: true,
                        group: ["rejianxiong", "jiuchi"],
                    },
                    kivatianming: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return game.roundNumber > 2;
                        },
                        forced: true,
                        content: function () {
                            if (player.countCards('e') < 3) player.init('sp_liubei魂kiva');
                            if (player.countCards('e') == 3) player.init('sp_sunquan魂kiva');
                            if (player.countCards('e') > 3) player.init('sp_caocao魂kiva');
                            player.gainMaxHp(game.roundNumber);
                            player.recover(game.roundNumber);
                        },
                    },
                    kivazhenlong: {
                        trigger: {
                            global: "gameStart",
                            player: "enterGame",
                        },
                        content: function () {
                            player.setAvatar('liuxie魂kiva', 'liuxie真龙天子kiva');
                        },
                    },
                    kivatiancaibuild: {
                        audio: 2,
                        trigger: {
                            player: "taoEnd",
                        },
                        content: function () {
                            player.useCard({ name: 'wuzhong' }, player);
                        },
                    },
                    kivashuangchong: {
                        audio: 2,
                        trigger: {
                            player: "phaseEnd",
                        },
                        filter: function (event, player) {
                            return player.countCards('h') < 3 && player.countCards('e') == 0;
                        },
                        frequent: true,
                        content: function () {
                            player.insertPhase();
                        },
                    },
                    kivagaigePeter: {
                        audio: "ext:王朝更替_策:4",
                        enable: "phaseUse",
                        prompt: "失去1点体力上限，然后摸两张牌",
                        filter: function (event, player) {
                            return player.hp > 0;
                        },
                        content: function () {
                            "step 0"
                            player.loseMaxHp(1);
                            "step 1"
                            player.draw(2);
                        },
                        ai: {
                            basic: {
                                order: 1,
                            },
                            result: {
                                player: function (player) {
                                    if (player.countCards('h') >= player.hp - 1) return -1;
                                    if (player.hp < 3) return -1;
                                    return 1;
                                },
                            },
                        },
                    },
                    "kivajunwei2": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        content: function () {
                            player.chooseToDiscard(true);
                            player.loseHp();
                        },
                    },
                    kivayuanping: {
                        skillAnimation: true,
                        trigger: {
                            player: "gainEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.storage.kivayuanping && player.hp == 3;
                        },
                        content: function () {
                            player.storage.kivayuanping = true;
                            player.draw();
                            player.addSkill('zhiheng');
                            player.removeSkill('junwei2');
                            player.awakenSkill('kivayuanping');
                        },
                    },
                    kivatiexue: {
                        trigger: {
                            global: "dieAfter",
                        },
                        forced: true,
                        content: function () {
                            player.insertPhase();
                        },
                        ai: {
                            noh: true,
                        },
                        group: "kivatiexue2",
                    },
                    "kivatiexue2": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "shaBegin",
                        },
                        content: function () {
                            player.useCard({ name: 'jiu' }, player);
                        },
                    },
                    kivafazhan: {
                        audio: "zhiji",
                        enable: "phaseUse",
                        filter: function (event, player) {
                            var num;
                            if (get.mode() == 'identity') {
                                num = get.population('zhong');
                            }
                            else {
                                num = 1;
                            }
                            if (player.getStat().skill.kivafazhan >= num) return false;
                            return true && player.countCards('h') > 0;
                        },
                        filterTarget: function (card, player, target) {
                            return player != target && target.countCards('h') > 0;
                        },
                        content: function () {
                            "step 0"
                            player.chooseToCompare(target);
                            "step 1"
                            if (result.bool) {
                                player.addTempSkill('tiaoxin');
                                player.draw(2);
                            }
                            else {
                                event.target.useCard(game.createCard('bingliang', 'club', 13), player);
                            }
                        },
                        ai: {
                            order: function (name, player) {
                                var cards = player.getCards('h');
                                if (player.countCards('h', 'sha') == 0) {
                                    return 1;
                                }
                                for (var i = 0; i < cards.length; i++) {
                                    if (cards[i].name != 'sha' && cards[i].number > 11 && get.value(cards[i]) < 7) {
                                        return 9;
                                    }
                                }
                                return get.order({ name: 'sha' }) - 1;
                            },
                            result: {
                                player: function (player) {
                                    if (player.countCards('h', 'sha') > 0) return 0.6;
                                    var num = player.countCards('h');
                                    if (num > player.hp) return 0;
                                    if (num == 1) return -2;
                                    if (num == 2) return -1;
                                    return -0.7;
                                },
                                target: function (player, target) {
                                    var num = target.countCards('h');
                                    if (num == 1) return -1;
                                    if (num == 2) return -0.7;
                                    return -0.5
                                },
                            },
                            threaten: 1.3,
                        },
                    },
                    kivajijin: {
                        mod: {
                            globalFrom: function (from, to, distance) {
                                return distance - 2;
                            },
                        },
                    },
                    kivatuidi: {
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            target.chooseToDiscard(true, game.roundNumber);
                            player.removeSkill('kivatuidi');
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivayingji: {
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            target.damage(game.roundNumber);
                            player.removeSkill('kivayingji');
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivalongfen: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "ext:王朝更替_策:1",
                        group: "kivalongfen4",
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            target.draw();
                            player.useCard({ name: 'sha' }, target);
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivalongyu: {
                        audio: "chongzhen",
                        group: "kivalongyu2",
                        trigger: {
                            player: "respond",
                            global: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.countCards('h') < 5;
                        },
                        frequent: true,
                        content: function () {
                            player.draw();
                        },
                    },
                    "kivalongyu2": {
                        audio: "reyajiao",
                        enable: ["chooseToRespond"],
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        viewAs: {
                            name: "shan",
                        },
                        viewAsFilter: function (player) {
                            if (!player.countCards('h', { color: 'black' })) return false;
                        },
                        prompt: "将一张黑色手牌当闪打出",
                        check: function () { return 1 },
                        ai: {
                            respondShan: true,
                            skillTagFilter: function (player) {
                                if (!player.countCards('h', { color: 'black' })) return false;
                            },
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.tag(card, 'respondShan') && current < 0) return 0.6
                                },
                            },
                            basic: {
                                useful: [7, 2],
                                value: [7, 2],
                            },
                        },
                    },
                    kivakongjue: {
                        trigger: {
                            player: "phaseDrawBefore",
                        },
                        forced: true,
                        content: function () {
                            trigger.cancel();
                        },
                        ai: {
                            noh: true,
                        },
                        group: "kivalongjue2",
                    },
                    "kivalongjue2": {
                        audio: "juejing",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return event.player.hp <= 2;
                        },
                        content: function () {
                            player.recover();
                        },
                    },
                    "kivalongfen3": {
                        mark: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        content: function () {
                            player.storage.kivalongfen3++
                        },
                        mod: {
                            cardEnabled: function (card, player) {
                                if (card.name == 'sha' && _status.event.skill != 'kivalongfen3') return false;
                            },
                            cardUsable: function (card, player) {
                                if (card.name == 'sha' && _status.event.skill != 'kivalongfen3') return false;
                            },
                            cardRespondable: function (card, player) {
                                if (card.name == 'sha' && _status.event.skill != 'kivalongfen3') return false;
                            },
                            cardSavable: function (card, player) {
                                if (card.name == 'sha' && _status.event.skill != 'kivalongfen3') return false;
                            },
                        },
                        enable: ["chooseToUse", "chooseToRespond"],
                        filter: function (event, player) {
                            return player.countCards('h', 'sha') > 0;
                        },
                        filterCard: {
                            name: "sha",
                        },
                        viewAs: {
                            name: "jiu",
                        },
                        viewAsFilter: function (player) {
                            if (!player.countCards('h', 'sha')) return false;
                        },
                        check: function () { return 1 },
                        ai: {
                            skillTagFilter: function (player) {
                                if (!player.countCards('h', 'sha')) return false;
                            },
                            respondSha: true,
                            order: 4,
                            useful: -1,
                            value: -1,
                            basic: {
                                useful: [5, 1],
                                value: [5, 1],
                            },
                            result: {
                                target: function (player, target) {
                                    if (player.hasSkill('sha') && !target.getEquip('baiyin')) {
                                        if (get.attitude(player, target) > 0) {
                                            return -6;
                                        }
                                        else {
                                            return -3;
                                        }
                                    }
                                    return -1.5;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function (card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function (card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function (card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function (card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function (card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                                save: 1,
                            },
                        },
                        intro: {
                            name: "龙焚",
                            content: "你的【杀】视为【酒】",
                        },
                    },
                    "kivalongfen4": {
                        audio: "longdan",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        content: function () {
                            player.addTempSkill('kivalongfen3');
                        },
                    },
                    kivaguangsu: {
                        trigger: {
                            global: "phaseBefore",
                        },
                        filter: function (event, player) {
                            return event.player != player && !player.isTurnedOver() && !player.storage.kivaguangsu;
                        },
                        check: function (event, player) {
                            return get.attitude(player, event.player) < 0 &&
                                ((player.countCards('h') > player.hp && player.countCards('h', 'lebu') == 0) || get.distance(player, event.player) > 1);
                        },
                        alter: true,
                        intro: {
                            content: function (storage, player) {
                                var str = '';
                                if (player.storage.kivaguangsu_h.length) {
                                    if (player.isUnderControl(true)) {
                                        str += '手牌区：' + get.translation(player.storage.kivaguangsu_h);
                                    }
                                    else {
                                        str += '手牌区：' + (player.storage.kivaguangsu_h.length) + '张牌';
                                    }
                                }
                                if (player.storage.kivaguangsu_e.length) {
                                    if (str.length) str += '、';
                                    if (player.isUnderControl(true)) {
                                        str += '装备区：' + get.translation(player.storage.kivaguangsu_e);
                                    }
                                    else {
                                        str += '装备区：' + (player.storage.kivaguangsu_e.length) + '张牌';
                                    }
                                }
                                return str;
                            },
                            mark: function (dialog, content, player) {
                                if (player.storage.kivaguangsu_h.length) {
                                    if (player.isUnderControl(true)) {
                                        dialog.add('<div class="text center">手牌区</div>');
                                        dialog.addSmall(player.storage.kivaguangsu_h);
                                    }
                                    else {
                                        dialog.add('<div class="text center">手牌区：' + player.storage.kivaguangsu_h.length + '张牌</div>');
                                    }
                                }
                                if (player.storage.kivaguangsu_e.length) {
                                    if (player.isUnderControl(true)) {
                                        dialog.add('<div class="text center">装备区</div>');
                                        dialog.addSmall(player.storage.kivaguangsu_e);
                                    }
                                    else {
                                        dialog.add('<div class="text center">装备区：' + player.storage.kivaguangsu_e.length + '张牌</div>');
                                    }
                                }
                            },
                        },
                        logTarget: "player",
                        content: function () {
                            "step 0"
                            if (!get.is.altered('kivaguangsu')) {
                                player.draw(false);
                                player.$draw();
                            }
                            "step 1"
                            player.storage.shanxian_h = player.getCards('h');
                            player.storage.shanxian_e = player.getCards('e');
                            player.storage.shanxian_n = 1;
                            player.syncStorage('kivaguangsu_e');
                            player.phase('kivaguangsu');
                            player.storage.shanxian = trigger.player;
                            player.removeSkill('kivaguangsu2');
                            player.markSkill('kivaguangsu');
                            "step 2"
                            player.loseHp();
                            player.link(true);
                            delete player.storage.kivaguangsu;
                        },
                        mod: {
                            targetInRange: function (card, player, target, now) {
                                if (target == player.storage.kivaguangsu) return true;
                            },
                        },
                        ai: {
                            expose: 0.1,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'guiyoujie') return [0, 0];
                                },
                            },
                        },
                    },
                    "kivaguangsu2": {
                        trigger: {
                            player: ["gainBegin", "loseBegin"],
                        },
                        forced: true,
                        popup: false,
                        content: function () {
                            player.removeSkill('kivaguangsu2');
                        },
                    },
                    kivashenjie: {
                        trigger: {
                            player: "damageEnd",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return event.source && event.source.countCards('e') > 0;
                        },
                        content: function () {
                            "step 0"
                            var att = get.attitude(player, trigger.source);
                            player.choosePlayerCard('e', get.prompt('kivashenjie'), trigger.source).ai = function (button) {
                                if (att <= 0) {
                                    return get.equipValue(button.link);
                                }
                                return 0;
                            }
                            "step 1"
                            if (result.bool) {
                                player.logSkill('kivashenjie', trigger.source);
                                player.equip(result.links[0]);
                                trigger.source.$give(result.links[0], player);
                            }
                        },
                        ai: {
                            "maixie_defend": true,
                        },
                    },
                    kivalvdeng: {
                        trigger: {
                            player: "phaseUseEnd",
                        },
                        priority: 9,
                        check: function (event, player) {
                            return get.attitude(player, event.player) <= 0;
                        },
                        content: function () {
                            "step 0"
                            player.chooseToDiscard(true);
                            "step 1"
                            var evt = _status.event.getParent('phase');
                            if (evt) {
                                game.resetSkills();
                                _status.event = evt;
                                _status.event.finish();
                                _status.event.untrigger(true);
                            }
                        },
                        ai: {
                            jueqing: true,
                        },
                    },
                    kivazhenyan: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: 2,
                        filterTarget: function (card, player, target) {
                            return player != target && !target.isLinked();
                        },
                        content: function () {
                            "step 0"
                            if (!target.isLinked()) target.link();
                            target.damage();
                            "step 1"
                            player.draw();
                            player.chooseToDiscard(true, 2);
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivajingong: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: 2,
                        filterTarget: function (card, player, target) {
                            return player != target && !target.hp < player.hp;
                        },
                        content: function () {
                            target.damage('thunder');
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivagangtie: {
                        mod: {
                            targetEnabled: function (card, player, target, now) {
                                if (card.name == 'nanman' || card.name == 'wanjian') return false;
                            },
                        },
                    },
                    kivabinglian: {
                        audio: 2,
                        group: "longdan",
                        trigger: {
                            player: "shaBegin",
                        },
                        check: function (event, player) {
                            return get.attitude(player, event.target) <= 0;
                        },
                        logTarget: "target",
                        content: function () {
                            "step 0"
                            player.judge(function (card) {
                                if (get.zhu(_status.event.player, 'shouyue')) {
                                    if (get.suit(card) != 'spade') return 2;
                                }
                                else {
                                    if (get.color(card) == 'red') return 2;
                                }
                                return -0.5;
                            });
                            "step 1"
                            if (result.bool) {
                                trigger.directHit = true;
                            }
                        },
                    },
                    kivacegang: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "qinglong_skill",
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            "step 0"
                            player.damage();
                            "step 1"
                            target.addTempSkill('fengyin');
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivagongao: {
                        audio: "gongao",
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        content: function () {
                            player.loseMaxHp(true);
                            player.draw(2);
                        },
                    },
                    kivajiangzhong: {
                        audio: "gongao",
                        group: "kivajiangzhong2",
                        trigger: {
                            player: ["damageEnd", "loseHpEnd"],
                        },
                        forced: true,
                        content: function () {
                            player.loseMaxHp();
                        },
                    },
                    kivajuyi: {
                        skillAnimation: true,
                        mark: true,
                        audio: "juyi",
                        derivation: "kivaweizhong",
                        unique: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.hp == 1 && !player.storage.kivajuyi;
                        },
                        forced: true,
                        priority: 3,
                        content: function () {
                            player.gainMaxHp(5, true);
                            player.recover(5);
                            player.removeSkill('kivagongao');
                            player.removeSkill('kivajiangzhong');
                            player.addSkill('kivaweizhong');
                            player.awakenSkill('kivajuyi');
                            player.storage.kivajuyi = true;
                        },
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 2;
                                return 0.5;
                            },
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (!target.hasFriend()) return;
                                    if (get.tag(card, 'damage') == 1 && target.hp == 2 && !target.isTurnedOver() &&
                                        _status.currentPhase != target && get.distance(_status.currentPhase, target, 'absolute') <= 3) return [0.5, 1];
                                },
                            },
                            intro: {
                                name: "举义",
                                content: "举义:未发动",
                            },
                        },
                    },
                    kivaweizhong: {
                        audio: "weizhong",
                        group: ["kivaweizhong2", "kivaweizhong3"],
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num += player.maxHp - player.hp + 1;
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                return num = 3;
                            },
                        },
                    },
                    "kivajiangzhong2": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "dying",
                        },
                        priority: 10,
                        forced: true,
                        filter: function (event, player) {
                            return !player.storage.jiangzhong2;
                        },
                        content: function () {
                            player.gainMaxHp(true);
                        },
                    },
                    "kivaweizhong2": {
                        audio: "benghuai_zhugedan",
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        content: function () {
                            player.damage();
                        },
                    },
                    "kivaweizhong3": {
                        mod: {
                            targetEnabled: function (card, player, target, now) {
                                if (card.name == 'shunshou' || card.name == 'tao') return false;
                            },
                        },
                    },
                    "kivamoushi2": {
                        audio: "paiyi",
                        group: "kivamoushi22",
                        forced: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        content: function () {
                            player.chooseToDiscard(true)
                        },
                    },
                    kivacefan: {
                        audio: "zili",
                        usable: 1,
                        enable: "phaseUse",
                        prompt: "使用一张护心镜并对自己使用一张静夜思，然后你摸两张牌",
                        filter: function (event, player) {
                            return player.hp > 0;
                        },
                        content: function () {
                            "step 0"
                            player.useCard(game.createCard('huxinjing', 'diamond', 13), player);
                            player.useCard(game.createCard('kivajingyesi', 'diamond', 13), player);
                            "step 1"
                            player.draw(2);
                        },
                    },
                    "kivamoushi22": {
                        audio: "paiyi",
                        forced: true,
                        trigger: {
                            player: "phaseEnd",
                        },
                        content: function () {
                            player.draw();
                        },
                    },
                    kivadimeng: {
                        audio: "dimeng",
                        trigger: {
                            global: "shaBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return event.target == event.targets[0] && player.countCards('he') > 0 && event.card.name == 'sha' &&
                                _status.currentPhase == event.player && event.parent.parent.parent.name == 'phaseUse';
                        },
                        content: function () {
                            'step 0'
                            var go = false;
                            if (get.attitude(player, trigger.player) > 0) {
                                if (get.color(trigger.card) == 'red') {
                                    go = true;
                                }
                                else if (!trigger.player.hasSkill('paoxiao') &&
                                    !trigger.player.hasSkill('tanlin3') &&
                                    !trigger.player.hasSkill('zhaxiang2') &&
                                    !trigger.player.hasSkill('fengnu') &&
                                    !trigger.player.getEquip('zhuge')) {
                                    var nh = trigger.player.countCards('h');
                                    if (player == trigger.player) {
                                        go = (player.countCards('h', 'sha') > 0);
                                    }
                                    else if (nh >= 4) {
                                        go = true;
                                    }
                                    else if (player.countCards('h', 'sha')) {
                                        if (nh == 3) {
                                            go = Math.random() < 0.8;
                                        }
                                        else if (nh == 2) {
                                            go = Math.random() < 0.5;
                                        }
                                    }
                                    else if (nh >= 3) {
                                        if (nh == 3) {
                                            go = Math.random() < 0.5;
                                        }
                                        else if (nh == 2) {
                                            go = Math.random() < 0.2;
                                        }
                                    }
                                }
                            }
                            var next = player.chooseToDiscard(get.prompt('kivadimeng'), 'he');
                            next.logSkill = ['kivadimeng', trigger.player];
                            next.set('ai', function (card) {
                                if (_status.event.go) {
                                    return 6 - get.value(card);
                                }
                                return 0;
                            });
                            next.set('go', go);
                            'step 1'
                            if (result.bool) {
                                trigger.player.getStat().card.sha--;
                                if (get.color(trigger.card) == 'red') {
                                    player.draw();


                                }
                                // player.logSkill('longyin',trigger.player);
                            }
                        },
                        ai: {
                            expose: 0.2,
                        },
                    },
                    kivahaoshi: {
                        enable: "phaseUse",
                        group: "kivahaoshi2",
                        usable: 1,
                        audio: "haoshi",
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            "step 0"
                            target.draw(player.countCards('h'));
                            "step 1"
                            player.chooseToDiscard(true, player.countCards('h'));
                        },
                        ai: {
                            threaten: 2,
                        },
                    },
                    "kivahaoshi2": {
                        audio: "haoshi",
                        trigger: {
                            player: "phaseEnd",
                        },
                        content: function () {
                            player.draw(3);
                            player.turnOver();
                        },
                        ai: {
                            effect: {
                                target: function (card, player, target) {
                                    if (card.name == 'guiyoujie') return [0, 1];
                                },
                            },
                        },
                    },
                    kivaqixi: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "fenwei",
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            target.discardPlayerCard(true, game.roundNumber, target, 'hej');
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivayingcai: {
                        audio: 2,
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            player.addTempSkill('kivayingcai2', { player: "gainEnd" });
                            player.judge();
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    "kivayingcai2": {
                        forced: true,
                        audio: 2,
                        trigger: {
                            player: "judgeEnd",
                        },
                        frequent: function (event) {
                            if (event.result.card.name == 'du') return false;
                            if (get.mode() == 'guozhan') return false;
                            return true;
                        },
                        check: function (event) {
                            if (event.result.card.name == 'du') return false;
                            return true;
                        },
                        filter: function (event, player) {
                            if (get.owner(event.result.card)) {
                                return false;
                            }
                            if (event.nogain && event.nogain(event.result.card)) {
                                return false;
                            }
                            return true;
                        },
                        content: function () {
                            player.gain(trigger.result.card);
                            player.$gain2(trigger.result.card);
                        },
                        audioname: ["re_guojia"],
                    },
                    kivayingyang: {
                        trigger: {
                            player: "dying",
                        },
                        priority: 10,
                        forced: true,
                        forbid: ["stone", "chess", "versus", "boss", "identity"],
                        filter: function (event, player) {
                            return !player.storage.kivayingyang;
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('kivayingyang'), function (card, player, target) {
                                return target.isEnemyOf(player);
                            }).ai = function (target) {
                                var att = get.attitude(player, target); {
                                    if (att > 0) {
                                        return att + 5;
                                    }
                                    return -1;
                                }
                                if (player.isTurnedOver()) {
                                    return 5 - att;
                                }
                                return -att;
                            };
                            "step 1"
                            if (result.bool) {
                                player.logSkill('kivayingyang', result.targets);
                                result.targets[0].draw();
                            }
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                            threaten: 2,
                        },
                    },
                    "kivabawang4": {
                        trigger: {
                            player: "dying",
                        },
                        priority: 10,
                        forced: true,
                        filter: function (event, player) {
                            return !player.storage.kivabianxiao;
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('kivabawang4'), function (card, player, target) {
                                return target.isEnemyOf(player) && target.group == 'wu';
                            }).ai = function (target) {
                                var att = get.attitude(player, target); {
                                    if (att > 0) {
                                        return att + 5;
                                    }
                                    return -1;
                                }
                                if (player.isTurnedOver()) {
                                    return 5 - att;
                                }
                                return -att;
                            };
                            "step 1"
                            if (result.bool) {
                                player.logSkill('kivabawang4', result.targets);
                                result.targets[0].draw();
                            }
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                            threaten: 2,
                        },
                    },
                    kivaguanyuan: {
                        enable: "phaseUse",
                        filter: function (event, player) {
                            var he = player.getCards('he');
                            var num = 0;
                            for (var i = 0; i < he.length; i++) {
                                var info = lib.card[he[i].name];
                                if (info.type == 'equip' && !info.nomod && !info.unique && lib.inpile.contains(he[i].name)) {
                                    num++;
                                    if (num >= 2) return true;
                                }
                            }
                        },
                        filterCard: function (card) {
                            if (ui.selected.cards.length && card.name == ui.selected.cards[0].name) return false;
                            var info = get.info(card);
                            return info.type == 'equip' && !info.nomod && !info.unique && lib.inpile.contains(card.name);
                        },
                        selectCard: 2,
                        position: "he",
                        check: function (card) {
                            return get.value(card);
                        },
                        content: function () {
                            var name = cards[0].name + '_' + cards[1].name;
                            var info1 = get.info(cards[0]), info2 = get.info(cards[1]);
                            if (!lib.card[name]) {
                                var info = {
                                    enable: true,
                                    type: 'equip',
                                    subtype: get.subtype(cards[0]),
                                    vanish: true,
                                    cardimage: info1.cardimage || cards[0].name,
                                    filterTarget: function (card, player, target) {
                                        return target == player;
                                    },
                                    selectTarget: -1,
                                    modTarget: true,
                                    content: lib.element.content.equipCard,
                                    legend: true,
                                    source: [cards[0].name, cards[1].name],
                                    onEquip: [],
                                    onLose: [],
                                    skills: [],
                                    distance: {},
                                    ai: {
                                        order: 8.9,
                                        equipValue: 10,
                                        useful: 2.5,
                                        value: function (card, player) {
                                            var value = 0;
                                            var info = get.info(card);
                                            var current = player.getEquip(info.subtype);
                                            if (current && card != current) {
                                                value = get.value(current, player);
                                            }
                                            var equipValue = info.ai.equipValue || info.ai.basic.equipValue;
                                            if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                            return equipValue - value;
                                        },
                                        result: {
                                            target: function (player, target) {
                                                return get.equipResult(player, target, name);
                                            }
                                        }
                                    }
                                }
                                for (var i in info1.distance) {
                                    info.distance[i] = info1.distance[i];
                                }
                                for (var i in info2.distance) {
                                    if (typeof info.distance[i] == 'number') {
                                        info.distance[i] += info2.distance[i];
                                    }
                                    else {
                                        info.distance[i] = info2.distance[i];
                                    }
                                }
                                if (info1.skills) {
                                    info.skills = info.skills.concat(info1.skills);
                                }
                                if (info2.skills) {
                                    info.skills = info.skills.concat(info2.skills);
                                }
                                if (info1.onEquip) {
                                    if (Array.isArray(info1.onEquip)) {
                                        info.onEquip = info.onEquip.concat(info1.onEquip);
                                    }
                                    else {
                                        info.onEquip.push(info1.onEquip);
                                    }
                                }
                                if (info2.onEquip) {
                                    if (Array.isArray(info2.onEquip)) {
                                        info.onEquip = info.onEquip.concat(info2.onEquip);
                                    }
                                    else {
                                        info.onEquip.push(info2.onEquip);
                                    }
                                }
                                if (info1.onLose) {
                                    if (Array.isArray(info1.onLose)) {
                                        info.onLose = info.onLose.concat(info1.onLose);
                                    }
                                    else {
                                        info.onLose.push(info1.onLose);
                                    }
                                }
                                if (info2.onLose) {
                                    if (Array.isArray(info2.onLose)) {
                                        info.onLose = info.onLose.concat(info2.onLose);
                                    }
                                    else {
                                        info.onLose.push(info2.onLose);
                                    }
                                }
                                if (info.onEquip.length == 0) delete info.onEquip;
                                if (info.onLose.length == 0) delete info.onLose;
                                lib.card[name] = info;
                                lib.translate[name] = get.translation(cards[0].name, 'skill') + get.translation(cards[1].name, 'skill');
                                var str = lib.translate[cards[0].name + '_info'];
                                if (str[str.length - 1] == '.' || str[str.length - 1] == '。') {
                                    str = str.slice(0, str.length - 1);
                                }
                                lib.translate[name + '_info'] = str + '；' + lib.translate[cards[1].name + '_info'];
                                try {
                                    game.addVideo('newcard', null, {
                                        name: name,
                                        translate: lib.translate[name],
                                        info: lib.translate[name + '_info'],
                                        card: cards[0].name,
                                        legend: true,
                                    });
                                }
                                catch (e) {
                                    console.log(e);
                                }
                            }
                            player.gain(game.createCard({ name: name, suit: cards[0].suit, number: cards[0].number }), 'gain2');
                        },
                        ai: {
                            order: 9.5,
                            result: {
                                player: 1,
                            },
                        },
                    },
                    kivajuebian: {
                        trigger: {
                            player: "damageEnd",
                        },
                        frequent: true,
                        content: function () {
                            player.useCard({ name: 'sha' }, trigger.source);
                            player.useCard({ name: 'sha' }, trigger.source);
                            player.useCard({ name: 'sha' }, trigger.source);
                        },
                    },
                    kivacaijin: {
                        trigger: {
                            player: "shaBegin",
                        },
                        forced: true,
                        content: function () {
                            player.useCard({ name: 'wuzhong' }, player);
                            player.loseHp();
                        },
                    },
                    kivajiushi: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return event.player.hp <= 5;
                        },
                        content: function () {
                            player.chooseDrawRecover(true);
                        },
                    },
                    kivajueji: {
                        trigger: {
                            player: ["phaseUseEnd", "phaseUseBegin", "recoverEnd"],
                        },
                        content: function () {
                            var list = game.filterPlayer(function (current) {
                                return player.canUse('nanman', current) && current.isEnemyOf(player);
                            });
                            list.sort(lib.sort.seat);
                            player.useCard({ name: 'nanman' }, list);
                        },
                    },
                    kivabawang: {
                        skillAnimation: true,
                        audio: "zhiba",
                        unique: true,
                        zhuSkill: true,
                        keepSkill: true,
                        derivation: "kivabawang4",
                        trigger: {
                            player: "gainEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (!player.hasZhuSkill('kivabawang')) return false;
                            if (player.storage.kivabawang) return false;
                            return player.hp == 1 && !player.storage.kivabawang;
                        },
                        content: function () {
                            player.storage.kivabawang = true;
                            player.update();
                            if (player.hasSkill('kivabawang')) {
                                player.addSkill('kivabawang4');
                            }
                            else {
                                player.addAdditionalSkill('kivabawang', 'kivabawang4');
                            }
                            if (!player.isZhu) {
                                player.storage.zhuSkill_kivabawang = ['kivabawang4'];
                            }
                            else {
                                event.trigger('zhuUpdate');
                            }
                            player.awakenSkill('kivabawang');
                            player.removeSkill('kivabawang');
                        },
                    },
                    "kivabawang2": {
                        group: "kivabawang3",
                        trigger: {
                            player: "loseEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.countCards('h') < 4;
                        },
                        content: function () {
                            player.draw(4 - player.countCards('h'));
                        },
                    },
                    "kivabawang3": {
                        trigger: {
                            player: "gainEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.countCards('h') > 4;
                        },
                        content: function () {
                            player.chooseToDiscard(player.countCards('h'), true, 'h');
                        },
                    },
                    kivatianyi: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "tianyi",
                        filterTarget: function (card, player, target) {
                            return player != target && !target.isLinked();
                        },
                        content: function () {
                            "step 0"
                            target.chooseToDiscard(target.countCards('h'), 'h', true);
                            "step 1"
                            player.chooseToDiscard(player.countCards('h'), 'h', true);
                            "step 2"
                            target.draw(game.roundNumber);
                            player.draw(game.roundNumber + game.roundNumber);
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivayizhan: {
                        audio: "yinbing",
                        trigger: {
                            player: "damageEnd",
                        },
                        frequent: true,
                        content: function () {
                            player.useCard({ name: 'zhibi' }, trigger.source);
                        },
                    },
                    kivajiang: {
                        audio: "jiang",
                        trigger: {
                            player: "phaseBegin",
                        },
                        frequent: true,
                        content: function () {
                            player.draw(game.roundNumber);
                            player.chooseToDiscard(game.roundNumber, true);
                        },
                    },
                    kivahunshang: {
                        audio: "hunzi",
                        group: "kivahunshang2",
                        trigger: {
                            player: "gainEnd",
                        },
                        forced: true,
                        content: function () {
                            player.loseHp();
                        },
                    },
                    "kivahunshang2": {
                        audio: "tianyi",
                        trigger: {
                            player: "dying",
                        },
                        priority: 10,
                        forced: true,
                        filter: function (event, player) {
                            return !player.storage.kivabianxiao;
                        },
                        content: function () {
                            player.recover();
                        },
                    },
                    kivazhiba: {
                        audio: "zhiba",
                        audioname: ["heqi", "sunce"],
                        trigger: {
                            player: "phaseDiscardBegin",
                        },
                        forced: true,
                        content: function () {
                        },
                        ai: {
                            threaten: 1.5,
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                if (player.hp < player.maxHp) return num + player.maxHp - player.hp;
                            },
                        },
                    },
                    kivaqj: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        derivation: ["chongzhen", "xinshensu"],
                        unique: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.hp == 1 && !player.storage.kivaqj;
                        },
                        forced: true,
                        priority: 3,
                        content: function () {
                            player.loseMaxHp();
                            player.addSkill('chongzhen');
                            player.addSkill('xinshensu');
                            player.awakenSkill('kivaqj');
                            player.storage.kivaqj = true;
                            game.createTrigger('phaseBegin', 'yinghun', player, trigger);
                        },
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 2;
                                return 0.5;
                            },
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (!target.hasFriend()) return;
                                    if (get.tag(card, 'damage') == 1 && target.hp == 2 && !target.isTurnedOver() &&
                                        _status.currentPhase != target && get.distance(_status.currentPhase, target, 'absolute') <= 3) return [0.5, 1];
                                },
                            },
                        },
                    },
                    kivazj: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        derivation: ["reyingzi", "zhanjue"],
                        unique: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.hp == 1 && !player.storage.kivazj;
                        },
                        forced: true,
                        priority: 3,
                        content: function () {
                            player.loseMaxHp();
                            player.addSkill('reyingzi');
                            player.addSkill('zhanjue');
                            player.awakenSkill('kivazj');
                            player.storage.hunzi = true;
                            game.createTrigger('phaseBegin', 'yinghun', player, trigger);
                        },
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 2;
                                return 0.5;
                            },
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (!target.hasFriend()) return;
                                    if (get.tag(card, 'damage') == 1 && target.hp == 2 && !target.isTurnedOver() &&
                                        _status.currentPhase != target && get.distance(_status.currentPhase, target, 'absolute') <= 3) return [0.5, 1];
                                },
                            },
                        },
                    },
                    kivagx: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:2",
                        derivation: ["kivatc", "zhaxiang", "qingjian"],
                        unique: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.hp == 1 && !player.storage.kivagx;
                        },
                        forced: true,
                        priority: 3,
                        content: function () {
                            player.loseMaxHp();
                            player.addSkill('zhaxiang');
                            player.addSkill('kivatc');
                            player.addSkill('qingjian');
                            player.awakenSkill('kivagx');
                            player.storage.hunzi = true;
                            game.createTrigger('phaseBegin', 'yinghun', player, trigger);
                        },
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 2;
                                return 0.5;
                            },
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (!target.hasFriend()) return;
                                    if (get.tag(card, 'damage') == 1 && target.hp == 2 && !target.isTurnedOver() &&
                                        _status.currentPhase != target && get.distance(_status.currentPhase, target, 'absolute') <= 3) return [0.5, 1];
                                },
                            },
                        },
                    },
                    kivajm: {
                        audio: "ext:王朝更替_策:2",
                        unique: true,
                        trigger: {
                            player: "gainAfter",
                        },
                        direct: true,
                        usable: 4,
                        filter: function (event, player) {
                            if (event.parent.parent.name == 'phaseDraw') return false;
                            return event.cards && event.cards.length > 0
                        },
                        content: function () {
                            "step 0"
                            event.cards = trigger.cards.slice(0);
                            "step 1"
                            player.chooseCardTarget({
                                filterCard: function (card) {
                                    return _status.event.getParent().cards.contains(card);
                                },
                                selectCard: [1, event.cards.length],
                                filterTarget: function (card, player, target) {
                                    return player != target;
                                },
                                ai1: function (card) {
                                    if (ui.selected.cards.length > 0) return -1;
                                    if (card.name == 'du') return 20;
                                    return (_status.event.player.countCards('h') - _status.event.player.hp);
                                },
                                ai2: function (target) {
                                    var att = get.attitude(_status.event.player, target);
                                    if (ui.selected.cards.length && ui.selected.cards[0].name == 'du') {
                                        if (target.hasSkillTag('nodu')) return 0;
                                        return 1 - att;
                                    }
                                    if (target.countCards('h') > _status.event.player.countCards('h')) return 0;
                                    return att - 4;
                                },
                                prompt: '请选择要送人的卡牌'
                            });
                            "step 2"
                            if (result.bool) {
                                player.storage.kivajm++;
                                player.logSkill('kivajm', result.targets);
                                result.targets[0].gain(result.cards, player);
                                player.$give(result.cards.length, result.targets[0]);
                                for (var i = 0; i < result.cards.length; i++) {
                                    event.cards.remove(result.cards[i]);
                                }
                                if (event.cards.length) event.goto(1);
                            }
                            else {
                                player.storage.counttrigger.qingjian--;
                            }
                        },
                        ai: {
                            expose: 0.3,
                        },
                    },
                    kivabf: {
                        trigger: {
                            player: "loseHpEnd",
                        },
                        forced: true,
                        audio: "ext:王朝更替_策:2",
                        content: function () {
                            player.draw(3);
                            if (_status.currentPhase == player) {
                                player.addTempSkill('kivabf2', { player: 'phaseAfter' });
                            }
                            else {
                                game.trySkillAudio('kivabf', player);
                            }
                        },
                        ai: {
                            maihp: true,
                        },
                    },
                    kivatc: {
                        trigger: {
                            player: "damageBefore",
                        },
                        forced: true,
                        priority: 10,
                        content: function () {
                            trigger.cancel();
                            player.loseHp();
                        },
                        audio: "ext:王朝更替_策:1",
                    },
                    kivall: {
                        audio: "ext:王朝更替_策:4",
                        init: function (player) {
                            player.storage.kivall = 0;
                            player.storage.kivall2 = 0;
                        },
                        intro: {
                            content: "mark",
                        },
                        trigger: {
                            source: "damageAfter",
                        },
                        forced: true,
                        filter: function (event) {
                            return event.card && event.card.name == 'sha';
                        },
                        content: function () {
                            player.storage.kivall++;
                            player.storage.kivall2++;
                            player.markSkill('kivall');
                        },
                        group: ["kivall_sha", "kivall_shan", "kivall_draw"],
                        subSkill: {
                            draw: {
                                trigger: {
                                    player: ["useCard", "respond"],
                                },
                                forced: true,
                                popup: false,
                                filter: function (event) {
                                    return event.skill == 'kivall_sha' || event.skill == 'kivall_shan';
                                },
                                content: function () {
                                    player.draw();
                                },
                                sub: true,
                            },
                            sha: {
                                enable: ["chooseToUse", "chooseToRespond"],
                                filterCard: {
                                    name: "shan",
                                },
                                viewAs: {
                                    name: "sha",
                                    suit: "diamond",
                                    number: 7,
                                    cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "diamond", "number": 7, "name": "shan", "cardid": "5240952392", "_transform": "translateX(174.85714285714286px)", "clone": { "name": "shan", "suit": "diamond", "number": 7, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 2549 }, "timeout": 2456, "original": "h" }],
                                },
                                viewAsFilter: function (player) {
                                    if (!player.storage.kivall) return false;
                                    if (!player.countCards('h', 'shan')) return false;
                                },
                                prompt: "将一张闪当杀使用或打出",
                                onuse: function (result, player) {
                                    player.storage.kivall--;
                                    if (!player.storage.kivall) {
                                        player.unmarkSkill('kivall');
                                    }
                                    else {
                                        player.updateMarks();
                                    }
                                },
                                check: function () { return 1 },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'respondSha') && current < 0) return 0.6
                                        },
                                    },
                                    respondSha: true,
                                    skillTagFilter: function (player) {
                                        if (!player.storage.kivall) return false;
                                        if (!player.countCards('h', 'shan')) return false;
                                    },
                                    order: function () {
                                        return get.order({ name: 'sha' }) + 0.1;
                                    },
                                    useful: -1,
                                    value: -1,
                                    basic: {
                                        useful: [5, 1],
                                        value: [5, 1],
                                    },
                                    result: {
                                        target: function (player, target) {
                                            if (player.hasSkill('jiu') && !target.num('e', 'baiyin')) {
                                                if (ai.get.attitude(player, target) > 0) {
                                                    return -6;
                                                }
                                                else {
                                                    return -3.05 + (sgs.getDefenseSha(target, player)) / 30;
                                                }
                                            }
                                            return -1.55 + (sgs.getDefenseSha(target, player)) / 30;
                                        },
                                    },
                                    tag: {
                                        respond: 1,
                                        respondShan: 1,
                                        damage: function (card) {
                                            if (card.nature == 'poison') return;
                                            return 1;
                                        },
                                        natureDamage: function (card) {
                                            if (card.nature) return 1;
                                        },
                                        fireDamage: function (card, nature) {
                                            if (card.nature == 'fire') return 1;
                                        },
                                        thunderDamage: function (card, nature) {
                                            if (card.nature == 'thunder') return 1;
                                        },
                                        poisonDamage: function (card, nature) {
                                            if (card.nature == 'poison') return 1;
                                        },
                                    },
                                },
                                sub: true,
                            },
                            shan: {
                                enable: ["chooseToRespond"],
                                filterCard: {
                                    name: "sha",
                                },
                                viewAs: {
                                    name: "shan",
                                },
                                prompt: "将一张杀当闪打出",
                                viewAsFilter: function (player) {
                                    if (!player.storage.kivall) return false;
                                    if (!player.countCards('h', 'sha')) return false;
                                },
                                onrespond: function (result, player) {
                                    player.storage.kivall--;
                                    if (!player.storage.kivall) {
                                        player.unmarkSkill('kivall');
                                    }
                                    else {
                                        player.updateMarks();
                                    }
                                },
                                check: function () { return 1 },
                                ai: {
                                    respondShan: true,
                                    skillTagFilter: function (player) {
                                        if (!player.storage.kivall) return false;
                                        if (!player.countCards('h', 'sha')) return false;
                                    },
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (!player.storage.kivall) return false;
                                            if (get.tag(card, 'respondShan') && current < 0) return 0.6
                                        },
                                    },
                                    order: 4,
                                    useful: -1,
                                    value: -1,
                                    basic: {
                                        useful: [7, 2],
                                        value: [7, 2],
                                    },
                                },
                                sub: true,
                            },
                        },
                    },
                    kivals: {
                        group: ["kivals1", "kivals2"],
                        ai: {
                            mingzhi: false,
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.tag(card, 'respondShan') || get.tag(card, 'respondSha')) {
                                        if (get.attitude(target, player) <= 0) {
                                            if (current > 0) return;
                                            if (target.countCards('h') == 0) return 1.6;
                                            if (target.countCards('h') == 1) return 1.2;
                                            if (target.countCards('h') == 2) return [0.8, 0.2, 0, -0.2];
                                            return [0.4, 0.7, 0, -0.7];
                                        }
                                    }
                                },
                            },
                        },
                    },
                    kivaxh: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        derivation: ["lirang", "zhuhai"],
                        unique: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.hp == 1 && !player.storage.kivaxh;
                        },
                        forced: true,
                        priority: 3,
                        content: function () {
                            player.loseMaxHp();
                            player.addSkill('lirang');
                            player.addSkill('zhuhai');
                            player.awakenSkill('kivaxh');
                            player.storage.hunzi = true;
                            game.createTrigger('phaseBegin', 'yinghun', player, trigger);
                        },
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 2;
                                return 0.5;
                            },
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (!target.hasFriend()) return;
                                    if (get.tag(card, 'damage') == 1 && target.hp == 2 && !target.isTurnedOver() &&
                                        _status.currentPhase != target && get.distance(_status.currentPhase, target, 'absolute') <= 3) return [0.5, 1];
                                },
                            },
                        },
                    },
                    kivazf: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        unique: true,
                        zhuSkill: true,
                        keepSkill: true,
                        derivation: "beige",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (!player.hasZhuSkill('kivazf')) return false;
                            if (player.storage.ruoyu) return false;
                            return player.isMinHp();
                        },
                        content: function () {
                            player.storage.ruoyu = true;
                            player.maxHp++;
                            player.update();
                            player.recover();
                            if (player.hasSkill('kivazf')) {
                                player.addSkill('beige');
                            }
                            else {
                                player.addAdditionalSkill('kivazf', 'beige');
                                j
                            }
                            if (!player.isZhu) {
                                player.storage.zhuSkill_ruoyu = ['beige'];
                            }
                            else {
                                event.trigger('zhuUpdate');
                            }
                            player.awakenSkill('kivazf');
                        },
                    },
                    kivacy: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        unique: true,
                        priority: -10,
                        derivation: "chouhai",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (player.storage.kivacy) return false;
                            return player.countCards('h') == 0;
                        },
                        content: function () {
                            "step 0"
                            player.awakenSkill('kivacy');
                            player.chooseControl('kivacy_recover', 'kivacy_draw', function (event, player) {
                                if (player.hp >= 2) return 'kivacy_draw';
                                return 'kivacy_recover';
                            });
                            "step 1"
                            if (result.control == 'kivacy_draw') {
                                player.draw(2);
                            }
                            else {
                                player.recover();
                            }
                            "step 2"
                            player.loseMaxHp();
                            player.storage.kivacy = true;
                            if (player.hp > player.maxHp) player.hp = player.maxHp;
                            player.update();
                            player.addSkill('chouhai');
                            game.createTrigger('phaseBegin', 'chouhai', player, trigger);
                        },
                    },
                    kivajz: {
                        audio: "ext:王朝更替_策:1",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        position: "he",
                        viewAs: {
                            name: "yangpijuan",
                            suit: "club",
                            number: 13,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "club", "number": 13, "name": "sha", "nature": "thunder", "cardid": "6231713325", "clone": { "name": "sha", "suit": "club", "number": 13, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 140 }, "timeout": 119, "original": "h" }],
                        },
                        viewAsFilter: function (player) {
                            if (!player.countCards('he', { color: 'black' })) return false;
                        },
                        prompt: "将一张黑色牌当羊皮卷使用",
                        check: function (card) { return 4 - get.value(card) },
                        ai: {
                            basic: {
                                order: 9,
                                useful: 1,
                                value: 5,
                            },
                            result: {
                                target: function (player, target) {
                                    var att = get.attitude(player, target);
                                    var nh = target.countCards('h');
                                    if (att > 0) {
                                        var js = target.getCards('j');
                                        if (js.length) {
                                            var jj = js[0].viewAs ? { name: js[0].viewAs } : js[0];
                                            if (jj.name == 'yangpijuan' || js.length > 1 || get.effect(target, jj, target, player) < 0) {
                                                return 2;
                                            }
                                        }
                                        if (target.getEquip('baiyin') && target.isDamaged() &&
                                            get.recoverEffect(target, player, player) > 0) {
                                            if (target.hp == 1 && !target.hujia) return 1.6;
                                            if (target.hp == 2) return 0.01;
                                            return 0;
                                        }
                                    }
                                    var es = target.getCards('e');
                                    var noe = (es.length == 0 || target.hasSkillTag('noe'));
                                    var noe2 = (es.length == 1 && es[0].name == 'baiyin' && target.isDamaged());
                                    var noh = (nh == 0 || target.hasSkillTag('noh'));
                                    if (noh && (noe || noe2)) return 0;
                                    if (att <= 0 && !target.countCards('he')) return 1.5;
                                    return -1.5;
                                },
                            },
                            tag: {
                                loseCard: 1,
                                discard: 1,
                            },
                            order: 7,
                            value: 7,
                            useful: 4,
                        },
                    },
                    kivazh: {
                        skillAnimation: true,
                        unique: true,
                        audio: "ext:王朝更替_策:1",
                        derivation: "shibei",
                        trigger: {
                            player: "dying",
                        },
                        priority: 10,
                        forced: true,
                        filter: function (event, player) {
                            return !player.storage.kunfen;
                        },
                        content: function () {
                            "step 0"
                            player.loseMaxHp();
                            "step 1"
                            if (player.hp < 2) {
                                player.recover(2 - player.hp);
                            }
                            "step 2"
                            player.addSkill('shibei');
                            player.storage.kunfen = true;
                            player.awakenSkill('kivazh');
                        },
                    },
                    kivapj: {
                        audio: "ext:王朝更替_策:1",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        position: "he",
                        viewAs: {
                            name: "gw_huangjiashenpan",
                            suit: "club",
                            number: 10,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "club", "number": 10, "name": "sha", "cardid": "1598414267", "clone": { "name": "sha", "suit": "club", "number": 10, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 165 }, "timeout": 141, "original": "h" }],
                        },
                        viewAsFilter: function (player) {
                            if (!player.countCards('he', { color: 'black' })) return false;
                        },
                        prompt: "将一张黑色牌当皇家审判使用",
                        check: function (card) { return 4 - get.value(card) },
                        ai: {
                            basic: {
                                order: 9,
                                useful: 1,
                                value: 5,
                            },
                            result: {
                                target: function (player, target) {
                                    var att = get.attitude(player, target);
                                    var nh = target.countCards('h');
                                    if (att > 0) {
                                        var js = target.getCards('j');
                                        if (js.length) {
                                            var jj = js[0].viewAs ? { name: js[0].viewAs } : js[0];
                                            if (jj.name == 'gw_huangjiashenpan' || js.length > 1 || get.effect(target, jj, target, player) < 0) {
                                                return 2;
                                            }
                                        }
                                        if (target.getEquip('baiyin') && target.isDamaged() &&
                                            get.recoverEffect(target, player, player) > 0) {
                                            if (target.hp == 1 && !target.hujia) return 1.6;
                                            if (target.hp == 2) return 0.01;
                                            return 0;
                                        }
                                    }
                                    var es = target.getCards('e');
                                    var noe = (es.length == 0 || target.hasSkillTag('noe'));
                                    var noe2 = (es.length == 1 && es[0].name == 'baiyin' && target.isDamaged());
                                    var noh = (nh == 0 || target.hasSkillTag('noh'));
                                    if (noh && (noe || noe2)) return 0;
                                    if (att <= 0 && !target.countCards('he')) return 1.5;
                                    return -1.5;
                                },
                                player: 1,
                            },
                            tag: {
                                loseCard: 1,
                                discard: 1,
                            },
                            value: 8,
                            useful: [6, 1],
                            order: 0.1,
                        },
                    },
                    kivakl: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        unique: true,
                        zhuSkill: true,
                        keepSkill: true,
                        derivation: "gongao",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (!player.hasZhuSkill('kivakl')) return false;
                            if (player.storage.kivakl) return false;
                            return player.isMinHp();
                        },
                        content: function () {
                            player.storage.kivakl = true;
                            player.maxHp++;
                            player.update();
                            player.recover();
                            if (player.hasSkill('kivakl')) {
                                player.addSkill('gongao');
                            }
                            else {
                                player.addAdditionalSkill('kivakl', 'gongao');
                            }
                            if (!player.isZhu) {
                                player.storage.zhuSkill_kivakl = ['gongao'];
                            }
                            else {
                                event.trigger('zhuUpdate');
                            }
                            player.awakenSkill('kivakl');
                        },
                    },
                    kivawl: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        unique: true,
                        trigger: {
                            source: "damageAfter",
                        },
                        forced: true,
                        derivation: "yinghun",
                        filter: function (event, player) {
                            return player.hp < player.maxHp;
                        },
                        content: function () {
                            player.awakenSkill('kivawl');
                            player.addSkill('yinghun');
                            player.loseMaxHp();
                        },
                    },
                    kivacx: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        derivation: ["buqu", "chouhai"],
                        unique: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.hp == 1 && !player.storage.kivacx;
                        },
                        forced: true,
                        priority: 3,
                        content: function () {
                            player.loseMaxHp();
                            player.addSkill('buqu');
                            player.addSkill('chouhai');
                            player.awakenSkill('kivacx');
                            player.storage.hunzi = true;
                            game.createTrigger('phaseBegin', 'yinghun', player, trigger);
                        },
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 2;
                                return 0.5;
                            },
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (!target.hasFriend()) return;
                                    if (get.tag(card, 'damage') == 1 && target.hp == 2 && !target.isTurnedOver() &&
                                        _status.currentPhase != target && get.distance(_status.currentPhase, target, 'absolute') <= 3) return [0.5, 1];
                                },
                            },
                        },
                    },
                    kivalb: {
                        audio: "ext:王朝更替_策:1",
                        filter: function (event, player) {
                            return player.countCards('he', { suit: 'diamond' }) > 0;
                        },
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.suit(card) == 'diamond';
                        },
                        position: "he",
                        viewAs: {
                            name: "shandian",
                            suit: "diamond",
                            number: 8,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "diamond", "number": 8, "name": "shan", "cardid": "3455925305", "clone": { "name": "shan", "suit": "diamond", "number": 8, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "fixed": true, "_transitionEnded": true, "timeout": 1241 }, "original": "h", "_transform": "translateY(0px)", "viewAs": "shandian" }],
                        },
                        prompt: "将一张方片牌当闪电使用",
                        check: function (card) { return 6 - get.value(card) },
                        ai: {
                            threaten: 1.5,
                            basic: {
                                order: 1,
                                useful: 1,
                                value: 8,
                            },
                            result: {
                                target: function (player, target) {
                                    var num = target.hp - target.countCards('h') - 2;
                                    if (num > -1) return -0.01;
                                    if (target.hp < 3) num--;
                                    if (target.isTurnedOver()) num /= 2;
                                    var dist = get.distance(player, target, 'absolute');
                                    if (dist < 1) dist = 1;
                                    return num / Math.sqrt(dist);
                                },
                            },
                            tag: {
                                skip: "phaseUse",
                            },
                        },
                    },
                    kivaly: {
                        audio: "ext:王朝更替_策:1",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        position: "he",
                        viewAs: {
                            name: "yiyi",
                            suit: "club",
                            number: 3,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "club", "number": 3, "name": "sha", "cardid": "5793172288", "clone": { "name": "sha", "suit": "club", "number": 3, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 743 }, "timeout": 657, "original": "h" }],
                        },
                        viewAsFilter: function (player) {
                            if (!player.countCards('he', { color: 'black' })) return false;
                        },
                        prompt: "将一张黑色牌当以逸待劳使用",
                        check: function (card) { return 4 - get.value(card) },
                        ai: {
                            basic: {
                                order: 9,
                                useful: 1,
                                value: 5,
                            },
                            result: {
                                target: function (player, target) {
                                    var att = get.attitude(player, target);
                                    var nh = target.countCards('h');
                                    if (att > 0) {
                                        var js = target.getCards('j');
                                        if (js.length) {
                                            var jj = js[0].viewAs ? { name: js[0].viewAs } : js[0];
                                            if (jj.name == 'yiyi' || js.length > 1 || get.effect(target, jj, target, player) < 0) {
                                                return 2;
                                            }
                                        }
                                        if (target.getEquip('baiyin') && target.isDamaged() &&
                                            get.recoverEffect(target, player, player) > 0) {
                                            if (target.hp == 1 && !target.hujia) return 1.6;
                                            if (target.hp == 2) return 0.01;
                                            return 0;
                                        }
                                    }
                                    var es = target.getCards('e');
                                    var noe = (es.length == 0 || target.hasSkillTag('noe'));
                                    var noe2 = (es.length == 1 && es[0].name == 'baiyin' && target.isDamaged());
                                    var noh = (nh == 0 || target.hasSkillTag('noh'));
                                    if (noh && (noe || noe2)) return 0;
                                    if (att <= 0 && !target.countCards('he')) return 1.5;
                                    return -1.5;
                                },
                            },
                            tag: {
                                loseCard: 1,
                                discard: 1,
                                norepeat: 1,
                            },
                            wuxie: function () {
                                return 0;
                            },
                        },
                    },
                    kivadh: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "dieBegin",
                        },
                        forced: true,
                        filter: function (event) {
                            return event.source && event.source.isIn();
                        },
                        content: function () {
                            trigger.source.clearSkills();
                        },
                        logTarget: "source",
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 0.2;
                                return 1.5;
                            },
                            effect: {
                                target: function (card, player, target, current) {
                                    if (!target.hasFriend()) return;
                                    if (target.hp <= 1 && get.tag(card, 'damage')) return [1, 0, 0, -2];
                                },
                            },
                        },
                    },
                    "kivaxh2": {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "dieBegin",
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('kivaxh2'), function (card, player, target) {
                                return player != target && _status.event.source != target;
                            }).set('ai', function (target) {
                                var num = get.attitude(_status.event.player, target);
                                if (num > 0) {
                                    if (target.hp == 1) {
                                        num += 2;
                                    }
                                    if (target.hp < target.maxHp) {
                                        num += 2;
                                    }
                                }
                                return num;
                            }).set('source', trigger.source);
                            "step 1"
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('kivaxh2', target);
                                target.recover();
                                target.draw(3);
                            }
                        },
                        ai: {
                            expose: 0.5,
                        },
                    },
                    kivadl: {
                        audio: "ext:王朝更替_策:1",
                        enable: "phaseUse",
                        usable: 1,
                        discard: false,
                        filter: function (event, player) {
                            return player.countCards('he', { suit: 'spade' }) > 0;
                        },
                        prepare: "throw",
                        position: "he",
                        filterCard: {
                            suit: "spade",
                        },
                        filterTarget: function (card, player, target) {
                            if (player == target) return false;
                            if (target.hasJudge('bingliang')) return true;
                            return lib.filter.targetEnabled({ name: 'bingliang' }, player, target);
                        },
                        check: function (card) {
                            return 7 - get.value(card);
                        },
                        content: function () {
                            if (target.hasJudge('bingliang')) {
                                target.discard(target.getJudge('bingliang'));
                            }
                            else {
                                var next = player.useCard({ name: 'bingliang' }, target, cards);
                                next.animate = false;
                                next.audio = false;
                            }
                            player.draw();
                        },
                        ai: {
                            result: {
                                target: function (player, target) {
                                    if (target.hasJudge('bingliang')) return -get.effect(target, { name: 'bingliang' }, player, target);
                                    return get.effect(target, { name: 'bingliang' }, player, target);
                                },
                            },
                            order: 9,
                        },
                    },
                    kivays: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "damageEnd",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return (event.source && event.source.countCards('he') && event.source != player);
                        },
                        content: function () {
                            player.gainPlayerCard(get.prompt('kivays', trigger.source), trigger.source, get.buttonValue, 'he').set('logSkill', ['kivays', trigger.source]);
                        },
                        ai: {
                            "maixie_defend": true,
                            effect: {
                                target: function (card, player, target) {
                                    if (player.countCards('he') > 1 && get.tag(card, 'damage')) {
                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -1.5];
                                        if (get.attitude(target, player) < 0) return [1, 1];
                                    }
                                },
                            },
                        },
                    },
                    kivalg: {
                        audio: "ext:王朝更替_策:1",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        viewAsFilter: function (player) {
                            return player.countCards('h', { color: 'black' }) > 0;
                        },
                        viewAs: {
                            name: "wuxie",
                            suit: "spade",
                            number: 1,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "spade", "number": 1, "name": "caomu", "cardid": "6093460324", "clone": { "name": "caomu", "suit": "spade", "number": 1, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 1849 }, "timeout": 1820, "original": "h" }],
                        },
                        prompt: "将一张黑色手牌当无懈可击使用",
                        check: function (card) { return 8 - get.value(card) },
                        threaten: 1.2,
                        ai: {
                            basic: {
                                useful: [6, 4],
                                value: [6, 4],
                            },
                            result: {
                                player: 1,
                            },
                            expose: 0.2,
                        },
                    },
                    kivajj: {
                        derivation: ["xinenyuan", "enyuan", "kivagc"],
                        audio: "ext:王朝更替_策:1",
                        unique: true,
                        enable: "chooseToUse",
                        mark: true,
                        skillAnimation: true,
                        animationColor: "fire",
                        init: function (player) {
                            player.storage.kivajj = false;
                        },
                        filter: function (event, player) {
                            if (player.storage.kivajj) return false;
                            if (event.type == 'dying') {
                                if (player != event.dying) return false;
                                return true;
                            }
                            return false;
                        },
                        content: function () {
                            'step 0'
                            player.awakenSkill('kivajj');
                            player.storage.jizhao = true;
                            var num = player.maxHp - player.countCards('h');
                            if (num > 0) {
                                player.draw(num);
                            }
                            'step 1'
                            if (player.hp < 2) {
                                player.recover(2 - player.hp);
                            }
                            'step 2'
                            player.removeSkill('shouyue');
                            player.removeSkill('wuhujiangdaqi');
                            player.addSkill('xinenyuan');
                            player.addSkill('enyuan');
                            player.addSkill('kivagc');
                        },
                        ai: {
                            order: 1,
                            skillTagFilter: function (player) {
                                if (player.storage.kivajj) return false;
                                if (player.hp > 0) return false;
                            },
                            save: true,
                            result: {
                                player: 10,
                            },
                        },
                        intro: {
                            content: "limited",
                        },
                    },
                    kivagc: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            global: "judge",
                        },
                        filter: function (event, player) {
                            return player.countCards('he', { color: 'red' }) > 0;
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            player.chooseCard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +
                                get.translation(trigger.player.judging[0]) + '，' + get.prompt('kivagc'), 'he', function (card) {
                                    return get.color(card) == 'red';
                                }).set('ai', function (card) {
                                    var trigger = _status.event.getTrigger();
                                    var player = _status.event.player;
                                    var judging = _status.event.judging;
                                    var result = trigger.judge(card) - trigger.judge(judging);
                                    var attitude = get.attitude(player, trigger.player);
                                    if (attitude == 0 || result == 0) return 0;
                                    if (attitude > 0) {
                                        return result;
                                    }
                                    else {
                                        return -result;
                                    }
                                }).set('judging', trigger.player.judging[0]);
                            "step 1"
                            if (result.bool) {
                                player.respond(result.cards, 'highlight');
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.bool) {
                                player.logSkill('kivagc');
                                player.$gain2(trigger.player.judging[0]);
                                player.gain(trigger.player.judging[0]);
                                trigger.player.judging[0] = result.cards[0];
                                if (!get.owner(result.cards[0], 'judge')) {
                                    trigger.position.appendChild(result.cards[0]);
                                }
                                game.log(trigger.player, '的判定牌改为', result.cards[0]);
                            }
                            "step 3"
                            game.delay(2);
                        },
                        ai: {
                            tag: {
                                rejudge: 1,
                            },
                        },
                    },
                    kivatzw: {
                        mod: {
                            maxHandcard: function (player, num) {
                                if (player.hasZhuSkill('kivatzw')) {
                                    return num + game.countPlayer(function (current) {
                                        if (player != current && current.group == 'wei') return 2;
                                    });
                                }
                                return num;
                            },
                        },
                        zhuSkill: true,
                    },
                    kivayx: {
                        enable: "phaseUse",
                        audio: "ext:王朝更替_策:1",
                        viewAsFilter: function (player) {
                            return player.countCards('hej', { suit: 'diamond' }) > 0;
                        },
                        viewAs: {
                            name: "chiyuxi",
                            suit: "diamond",
                            number: 8,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "diamond", "number": 8, "name": "shan", "cardid": "5283565363", "_transform": "translateX(224px)", "clone": { "name": "shan", "suit": "diamond", "number": 8, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 2758 }, "timeout": 2612, "original": "h" }],
                        },
                        filterCard: {
                            suit: "diamond",
                        },
                        check: function (card) {
                            return 8 - get.value(card);
                        },
                        ai: {
                            basic: {
                                order: 7.2,
                                useful: 4.5,
                                value: 9.2,
                            },
                            result: {
                                target: 2,
                            },
                            tag: {
                                draw: 2,
                                respond: 1,
                                respondShan: 1,
                                damage: 1,
                                natureDamage: 1,
                                fireDamage: 1,
                                multitarget: 1,
                                multineg: 1,
                            },
                            wuxie: function (target, card, player, viewer) {
                                if (get.attitude(viewer, target) > 0 && target.countCards('h', 'shan')) {
                                    if (!target.countCards('h') || target.hp == 1 || Math.random() < 0.7) return 0;
                                }
                            },
                        },
                    },
                    kivalp: {
                        audio: "ext:王朝更替_策:1",
                        enable: "phaseUse",
                        viewAs: {
                            name: "jingleishan",
                        },
                        filterCard: function (card, player) {
                            if (!player.storage.kivalp) return true;
                            return !player.storage.kivalp.contains(get.suit(card));
                        },
                        selectCard: 2,
                        check: function (card) {
                            return 6 - get.value(card);
                        },
                        ai: {
                            basic: {
                                order: 10,
                                useful: 1,
                                value: 5,
                            },
                            wuxie: function (target, card, player, viewer) {
                                if (get.attitude(viewer, target) > 0 && target.countCards('h', 'sha')) {
                                    if (!target.countCards('h') || target.hp == 1 || Math.random() < 0.7) return 0;
                                }
                            },
                            result: {
                                target: function (player, target) {
                                    if (player.hasUnknown(2) && get.mode() != 'guozhan') return 0;
                                    var nh = target.countCards('h');
                                    if (get.mode() == 'identity') {
                                        if (target.isZhu && nh <= 2 && target.hp <= 1) return -100;
                                    }
                                    if (nh == 0) return -2;
                                    if (nh == 1) return -1.7
                                    return -1.5;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: 1,
                                multitarget: 1,
                                multineg: 1,
                                respondSha: 1,
                                natureDamage: 1,
                                thunderDamage: 1,
                            },
                        },
                        group: ["kivalp_count", "kivalp_reset", "kivalp_respond"],
                        subSkill: {
                            reset: {
                                trigger: {
                                    player: "phaseAfter",
                                },
                                silent: true,
                                filter: function (event, player) {
                                    return player.storage.kivalp ? true : false;
                                },
                                content: function () {
                                    delete player.storage.kivalp;
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                            count: {
                                trigger: {
                                    player: "useCard",
                                },
                                silent: true,
                                filter: function (event) {
                                    return event.skill == 'kivalp';
                                },
                                content: function () {
                                    if (!player.storage.kivalp) {
                                        player.storage.kivalp = [];
                                    }
                                    for (var i = 0; i < trigger.cards.length; i++) {
                                        player.storage.kivalp.add(get.suit(trigger.cards[i]));
                                    }
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                            respond: {
                                trigger: {
                                    global: "respond",
                                },
                                silent: true,
                                filter: function (event) {
                                    return event.getParent(2).skill == 'kivalp' && event.player.isDamaged();
                                },
                                content: function () {
                                    trigger.player.draw();
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                        },
                    },
                    kivajh: {
                        audio: "ext:王朝更替_策:1",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.color(card) == 'red';
                        },
                        position: "hej",
                        viewAs: {
                            name: "chenhuodajie",
                        },
                        viewAsFilter: function (player) {
                            if (!player.countCards('hej', { color: 'red' })) return false;
                        },
                        prompt: "将一张红色牌当趁火打劫使用",
                        check: function (card) {
                            var player = _status.event.player;
                            var luxun = sgs.findPlayerBySkillName('reqianxun');
                            if (luxun && sgs.isFriend(player, luxun) && luxun.num('h') >= 3) return 7 - ai.get.value(card);
                            return 4 - ai.get.value(card);
                        },
                        ai: {
                            basic: {
                                order: 9,
                                useful: 1,
                                value: 5,
                            },
                            result: {
                                target: function (player, target) {
                                    var att = get.attitude(player, target);
                                    var nh = target.countCards('h');
                                    if (att > 0) {
                                        var js = target.getCards('j');
                                        if (js.length) {
                                            var jj = js[0].viewAs ? { name: js[0].viewAs } : js[0];
                                            if (jj.name == 'guohe' || js.length > 1 || get.effect(target, jj, target, player) < 0) {
                                                return 2;
                                            }
                                        }
                                        if (target.getEquip('baiyin') && target.isDamaged() &&
                                            get.recoverEffect(target, player, player) > 0) {
                                            if (target.hp == 1 && !target.hujia) return 1.6;
                                            if (target.hp == 2) return 0.01;
                                            return 0;
                                        }
                                    }
                                    var es = target.getCards('e');
                                    var noe = (es.length == 0 || target.hasSkillTag('noe'));
                                    var noe2 = (es.length == 1 && es[0].name == 'baiyin' && target.isDamaged());
                                    var noh = (nh == 0 || target.hasSkillTag('noh'));
                                    if (noh && (noe || noe2)) return 0;
                                    if (att <= 0 && !target.countCards('he')) return 1.5;
                                    return -1.5;
                                },
                            },
                            tag: {
                                loseCard: 1,
                                discard: 1,
                            },
                            order: 1,
                            useful: 6,
                            value: 6,
                        },
                    },
                    kivatj: {
                        group: "kivatj",
                        audio: "ext:王朝更替_策:1",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        position: "hej",
                        viewAs: {
                            name: "chenhuodajie",
                        },
                        viewAsFilter: function (player) {
                            if (!player.countCards('hej', { color: 'black' })) return false;
                        },
                        prompt: "将一张牌当【趁火打劫】使用",
                        check: function (card) {
                            var player = _status.event.player;
                            var luxun = sgs.findPlayerBySkillName('reqianxun');
                            if (luxun && sgs.isFriend(player, luxun) && luxun.num('h') >= 3) return 7 - ai.get.value(card);
                            return 4 - ai.get.value(card);
                        },
                        subSkill: {
                            discard: {
                                audio: false,
                                trigger: {
                                    global: "discardEnd",
                                },
                                filter: function (event, player) {
                                    if (_status.currentPhase != player || event.player == player) return false;
                                    for (var i = 0; i < event.cards.length; i++) {
                                        if (get.position(event.cards[i]) == 'd' && (get.type(event.cards[i]) == 'trick' || get.type(event.cards[i]) == 'delay')) {
                                            return true;
                                        }
                                    }
                                    return false;
                                },
                                forced: true,
                                unique: true,
                                gainable: true,
                                popup: false,
                                content: function () {
                                    player.gain(trigger.cards, 'gain2', 'log');
                                },
                                ai: {
                                    threaten: 1.4,
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            basic: {
                                order: 9,
                                useful: 1,
                                value: 5,
                            },
                            result: {
                                target: function (player, target) {
                                    var att = get.attitude(player, target);
                                    var nh = target.countCards('h');
                                    if (att > 0) {
                                        var js = target.getCards('j');
                                        if (js.length) {
                                            var jj = js[0].viewAs ? { name: js[0].viewAs } : js[0];
                                            if (jj.name == 'chenhuodajie' || js.length > 1 || get.effect(target, jj, target, player) < 0) {
                                                return 2;
                                            }
                                        }
                                        if (target.getEquip('baiyin') && target.isDamaged() &&
                                            get.recoverEffect(target, player, player) > 0) {
                                            if (target.hp == 1 && !target.hujia) return 1.6;
                                            if (target.hp == 2) return 0.01;
                                            return 0;
                                        }
                                    }
                                    var es = target.getCards('e');
                                    var noe = (es.length == 0 || target.hasSkillTag('noe'));
                                    var noe2 = (es.length == 1 && es[0].name == 'baiyin' && target.isDamaged());
                                    var noh = (nh == 0 || target.hasSkillTag('noh'));
                                    if (noh && (noe || noe2)) return 0;
                                    if (att <= 0 && !target.countCards('hej')) return 1.5;
                                    return -1.5;
                                },
                            },
                            tag: {
                                loseCard: 1,
                                discard: 1,
                            },
                            order: 1,
                            useful: 6,
                            value: 6,
                        },
                    },
                    kivasy: {
                        audio: "ext:王朝更替_策:1",
                        enable: "chooseToUse",
                        useable: 1,
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        position: "he",
                        viewAs: {
                            name: "huoshaolianying",
                            suit: "club",
                            number: 1,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "club", "number": 1, "name": "baiyin", "cardid": "9029572457", "clone": { "name": "baiyin", "suit": "club", "number": 1, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 6408 }, "original": "e", "timeout": 6386 }],
                        },
                        viewAsFilter: function (player) {
                            if (!player.countCards('he', { color: 'black' })) return false;
                        },
                        prompt: "将一张黑色牌当过河拆桥使用",
                        check: function (card) {
                            var player = _status.event.player;
                            var luxun = sgs.findPlayerBySkillName('reqianxun');
                            if (luxun && sgs.isFriend(player, luxun) && luxun.num('h') >= 3) return 7 - ai.get.value(card);
                            return 4 - ai.get.value(card);
                        },
                        ai: {
                            basic: {
                                order: 9,
                                useful: 1,
                                value: 5,
                            },
                            result: {
                                target: function (player, target) {
                                    var att = get.attitude(player, target);
                                    var nh = target.countCards('h');
                                    if (att > 0) {
                                        var js = target.getCards('j');
                                        if (js.length) {
                                            var jj = js[0].viewAs ? { name: js[0].viewAs } : js[0];
                                            if (jj.name == 'guohe' || js.length > 1 || get.effect(target, jj, target, player) < 0) {
                                                return 2;
                                            }
                                        }
                                        if (target.getEquip('baiyin') && target.isDamaged() &&
                                            get.recoverEffect(target, player, player) > 0) {
                                            if (target.hp == 1 && !target.hujia) return 1.6;
                                            if (target.hp == 2) return 0.01;
                                            return 0;
                                        }
                                    }
                                    var es = target.getCards('e');
                                    var noe = (es.length == 0 || target.hasSkillTag('noe'));
                                    var noe2 = (es.length == 1 && es[0].name == 'baiyin' && target.isDamaged());
                                    var noh = (nh == 0 || target.hasSkillTag('noh'));
                                    if (noh && (noe || noe2)) return 0;
                                    if (att <= 0 && !target.countCards('he')) return 1.5;
                                    return -1.5;
                                },
                            },
                            tag: {
                                loseCard: 1,
                                discard: 1,
                                damage: 1,
                                natureDamage: 1,
                                fireDamage: 1,
                            },
                            order: 5,
                            value: 6,
                        },
                    },
                    kivalj: {
                        mod: {
                            suit: function (card, suit) {
                                if (suit == 'heart') return 'diamond';
                            },
                        },
                    },
                    kivasj: {
                        trigger: {
                            global: "dieAfter",
                            audio: 1,
                        },
                        frequent: true,
                        content: function () {
                            'step 0'
                            player.draw(4);
                            var list = [];
                            if (!player.hasSkill('kivazs')) {
                                list.push('kivazs');
                            }
                            if (!player.hasSkill('wuyan')) {
                                list.push('wuyan');
                            }
                            if (!player.hasSkill('benghuai')) {
                                list.push('benghuai');
                            }
                            if (list.length) {
                                player.chooseControl(list).set('prompt', '选择获得一项技能');
                            }
                            'step 1'
                            player.addSkill(result.control);
                            player.popup(result.control);
                            game.log(player, '获得技能', '【' + get.translation(result.control) + '】');
                        },
                        ai: {
                            threaten: 1.4,
                        },
                    },
                    kivabw: {
                        audio: "ext:王朝更替_策:1",
                        unique: true,
                        zhuSkill: true,
                        trigger: {
                            player: "chooseToRespondBegin",
                        },
                        filter: function (event, player) {
                            if (event.responded) return false;
                            if (player.storage.hujiaing) return false;
                            if (!player.hasZhuSkill('hujia')) return false;
                            if (event.filterCard({ name: 'shan' }) == false) return false;
                            return game.hasPlayer(function (current) {
                                return current != player && current.group == 'wu';
                            });
                        },
                        check: function (event, player) {
                            if (get.damageEffect(player, event.player, player) >= 0) return false;
                            return true;
                        },
                        content: function () {
                            "step 0"
                            if (event.current == undefined) event.current = player.next;
                            if (event.current == player) {
                                event.finish();
                            }
                            else if (event.current.group == 'wu') {
                                if ((event.current == game.me && !_status.auto) || (
                                    get.attitude(event.current, player) > 2) ||
                                    event.current.isOnline()) {
                                    player.storage.hujiaing = true;
                                    var next = event.current.chooseToRespond('是否替' + get.translation(player) + '打出一张闪？', { name: 'shan' });
                                    next.set('ai', function () {
                                        var event = _status.event;
                                        return (get.attitude(event.player, event.source) - 2);
                                    });
                                    next.autochoose = lib.filter.autoRespondShan;
                                    next.set('source', player);
                                }
                            }
                            "step 1"
                            player.storage.hujiaing = false;
                            if (result.bool) {
                                event.finish();
                                trigger.result = result;
                                trigger.responded = true;
                                trigger.animate = false;
                                if (typeof event.current.ai.shown == 'number' && event.current.ai.shown < 0.95) {
                                    event.current.ai.shown += 0.3;
                                    if (event.current.ai.shown > 0.95) event.current.ai.shown = 0.95;
                                }
                            }
                            else {
                                event.current = event.current.next;
                                event.goto(0);
                            }
                        },
                    },
                    kivazs: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "useCard",
                        },
                        forced: true,
                        filter: function (event) {
                            return (get.type(event.card, 'trick') == 'trick' && event.cards[0] && event.cards[0] == event.card);
                        },
                        content: function () {
                            'step 0'
                            if (player.storage.kivazs > 0) {
                                player.chooseControl('选项一', '选项二').set('prompt', '诛神<br><br><div class="text">1:激昂的叫一下~</div><br><div class="text">2:受到一点伤害</div></br>').ai = function () {
                                    if (player.storage.kivazs > 6) return '选项一';
                                    if (player.hp + player.countCards('h', 'tao') > 3) return '选项二';
                                    return '选项一';
                                };
                            }
                            else {
                                player.damage('nosource');
                                event.finish();
                            }
                            'step 1'
                            if (result.control == '选项一') {
                                player.storage.kivazs--;
                                player.syncStorage('kivazs');
                            }
                            else {
                                player.damage('nosource');
                            }
                        },
                    },
                    kivasx: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            global: "dieAfter",
                        },
                        forced: true,
                        unique: true,
                        content: function () {
                            player.lostMaxHp();
                            player.recover();
                        },
                        ai: {
                            threaten: 1.5,
                        },
                    },
                    kivagh: {
                        skillAnimation: true,
                        unique: true,
                        audio: "ext:王朝更替_策:1",
                        derivation: "sheyan",
                        trigger: {
                            player: "dying",
                        },
                        priority: 10,
                        forced: true,
                        filter: function (event, player) {
                            return !player.storage.kunfen;
                        },
                        content: function () {
                            "step 0"
                            player.loseMaxHp();
                            "step 1"
                            if (player.hp < 2) {
                                player.recover(2 - player.hp);
                            }
                            "step 2"
                            player.addSkill('sheyan');
                            player.storage.kunfen = true;
                            player.awakenSkill('kivagh');
                        },
                    },
                    kivalz: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        derivation: ["qiangxi", "feiying"],
                        unique: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.hp == 1 && !player.storage.kivalz;
                        },
                        forced: true,
                        priority: 3,
                        content: function () {
                            player.loseMaxHp();
                            player.addSkill('qiangxi');
                            player.addSkill('feiying');
                            player.awakenSkill('kivalz');
                            player.storage.hunzi = true;
                            game.createTrigger('phaseBegin', 'yinghun', player, trigger);
                        },
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 2;
                                return 0.5;
                            },
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (!target.hasFriend()) return;
                                    if (get.tag(card, 'damage') == 1 && target.hp == 2 && !target.isTurnedOver() &&
                                        _status.currentPhase != target && get.distance(_status.currentPhase, target, 'absolute') <= 3) return [0.5, 1];
                                },
                            },
                        },
                    },
                    kivabm: {
                        trigger: {
                            source: "damageEnd",
                        },
                        audio: "ext:王朝更替_策:1",
                        check: function () {
                            return false;
                        },
                        filter: function (event, player) {
                            return get.distance(player, event.player) <= 1
                        },
                        content: function () {
                            trigger.untrigger(); trigger.finish();
                            {
                                trigger.player.addSkill('mashu');
                            }
                        },
                    },
                    kivazrs: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        derivation: ["tianyi", "retishen", "jiang"],
                        unique: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.hp == 1 && !player.storage.kivazrs;
                        },
                        forced: true,
                        priority: 3,
                        content: function () {
                            player.loseMaxHp();
                            player.addSkill('tianyi');
                            player.addSkill('retishen');
                            player.addSkill('jiang')
                            player.awakenSkill('kivazrs');
                            player.storage.hunzi = true;
                            game.createTrigger('phaseBegin', 'yinghun', player, trigger);
                        },
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 2;
                                return 0.5;
                            },
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (!target.hasFriend()) return;
                                    if (get.tag(card, 'damage') == 1 && target.hp == 2 && !target.isTurnedOver() &&
                                        _status.currentPhase != target && get.distance(_status.currentPhase, target, 'absolute') <= 3) return [0.5, 1];
                                },
                            },
                        },
                    },
                    kivasr: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.getStat('damage') >= 4 && !player.storage.kivasr;
                        },
                        content: function () {
                            "step 0"
                            player.removeSkill('reyicong');
                            "step 1"
                            player.recover();
                            player.awakenSkill('kivasr');
                            player.storage.wuji = true;

                            var card = get.cardPile('fangtian', 'field');
                            if (card) {
                                player.gain(card, 'gain2', 'log');
                            }
                        },
                    },
                    kivayc: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "ext:王朝更替_策:1",
                        filter: function (event, player) {
                            return player.countCards('h') > 0
                        },
                        chooseButton: {
                            dialog: function () {
                                var list = ['taoyuan', 'wugu', 'juedou', 'huogong', 'jiedao', 'tiesuo', 'guohe', 'shunshou', 'wuzhong', 'wanjian', 'nanman', 'chiyuxi', 'jingleishan', 'yiyi'];
                                for (var i = 0; i < list.length; i++) {
                                    list[i] = ['锦囊', '', list[i]];
                                }
                                return ui.create.dialog([list, 'vcard']);
                            },
                            filter: function (button, player) {
                                return lib.filter.filterCard({ name: button.link[2] }, player, _status.event.getParent());
                            },
                            check: function (button) {
                                var player = _status.event.player;
                                var recover = 0, lose = 1, players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    if (!players[i].isOut()) {
                                        if (players[i].hp < players[i].maxHp) {
                                            if (get.attitude(player, players[i]) > 0) {
                                                if (players[i].hp < 2) {
                                                    lose--;
                                                    recover += 0.5;
                                                }
                                                lose--;
                                                recover++;
                                            }
                                            else if (get.attitude(player, players[i]) < 0) {
                                                if (players[i].hp < 2) {
                                                    lose++;
                                                    recover -= 0.5;
                                                }
                                                lose++;
                                                recover--;
                                            }
                                        }
                                        else {
                                            if (get.attitude(player, players[i]) > 0) {
                                                lose--;
                                            }
                                            else if (get.attitude(player, players[i]) < 0) {
                                                lose++;
                                            }
                                        }
                                    }
                                }
                                if (lose > recover && lose > 0) return (button.link[2] == 'nanman') ? 1 : -1;
                                if (lose < recover && recover > 0) return (button.link[2] == 'taoyuan') ? 1 : -1;
                                return (button.link[2] == 'wuzhong') ? 1 : -1;
                            },
                            backup: function (links, player) {
                                return {
                                    filterCard: true,
                                    selectCard: -1,
                                    audio: 1,
                                    popname: true,
                                    viewAs: { name: links[0][2] },
                                }
                            },
                            prompt: function (links, player) {
                                return '将全部手牌当作' + get.translation(links[0][2]) + '使用';
                            },
                        },
                        ai: {
                            order: 1,
                            result: {
                                player: function (player) {
                                    var num = 0;
                                    var cards = player.getCards('h');
                                    if (cards.length >= 3 && player.hp >= 3) return 0;
                                    for (var i = 0; i < cards.length; i++) {
                                        num += Math.max(0, get.value(cards[i], player, 'raw'));
                                    }
                                    num /= cards.length;
                                    num *= Math.min(cards.length, player.hp);
                                    return 12 - num;
                                },
                            },
                            threaten: 1.6,
                        },
                    },
                    kivayj: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "damageEnd",
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('kivayj'), [1, trigger.num], function (card, player, target) {
                                return target.countCards('h') < Math.min(target.maxHp, 5);
                            }).set('ai', function (target) {
                                var att = get.attitude(_status.event.player, target);
                                if (att > 2) {
                                    return Math.min(5, target.maxHp) - target.countCards('h');
                                }
                                return att / 3;
                            });
                            "step 1"
                            if (result.bool) {
                                player.logSkill('kivayj', result.targets);
                                for (var i = 0; i < result.targets.length; i++) {
                                    result.targets[i].draw(Math.min(5, result.targets[i].maxHp) - result.targets[i].countCards('h'));
                                }
                            }
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.tag(card, 'damage') && target.hp > 1) {
                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                        var max = 0;
                                        var players = game.filterPlayer();
                                        for (var i = 0; i < players.length; i++) {
                                            if (get.attitude(target, players[i]) > 0) {
                                                max = Math.max(Math.min(5, players[i].hp) - players[i].countCards('h'), max);
                                            }
                                        }
                                        switch (max) {
                                            case 0: return 2;
                                            case 1: return 1.5;
                                            case 2: return [1, 2];
                                            default: return [0, max];
                                        }
                                    }
                                    if ((card.name == 'tao' || card.name == 'caoyao') &&
                                        target.hp > 1 && target.countCards('h') <= target.hp) return [0, 0];
                                },
                            },
                        },
                    },
                    kivahy: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        audioname: ["liubeikiva", "liubang"],
                        trigger: {
                            player: "dying",
                        },
                        priority: 6,
                        zhuSkill: true,
                        filter: function (event, player) {
                            if (player.storage.kivahy) return false;
                            if (player.hp > 0) return false;
                            if (!player.hasZhuSkill('kivahy')) return false;
                            return game.hasPlayer(function (current) {
                                return current != player && current.group == 'qun';
                            });
                        },
                        init: function (player) {
                            if (player.hasZhuSkill('kivahy')) {
                                player.markSkill('kivahy');
                                player.storage.kivahy = false;
                            }
                        },
                        intro: {
                            content: "limited",
                        },
                        unique: true,
                        content: function () {
                            'step 0'
                            player.storage.kivahy = true;
                            player.awakenSkill('kivahy');
                            var targets = game.filterPlayer();
                            targets.remove(player);
                            event.targets = targets;
                            event.damages = [];
                            'step 1'
                            if (event.targets.length) {
                                var current = event.targets.shift();
                                if (current.group == 'qun') {
                                    current.chooseBool('是否令' + get.translation(player) + '回复一点体力？').set('ai', function () {
                                        return get.attitude(_status.event.player, _status.event.target) > 2;
                                    }).set('target', player);
                                    event.current = current;
                                }
                                else {
                                    event.redo();
                                }
                            }
                            else {
                                event.goto(3);
                            }
                            'step 2'
                            if (result.bool) {
                                event.damages.push(event.current);
                                event.current.line(player, 'green');
                                game.log(event.current, '令', player, '回复一点体力');
                            }
                            if (event.targets.length) {
                                event.goto(1);
                            }
                            'step 3'
                            if (event.damages.length) {
                                player.recover(event.damages.length);
                            }
                            'step 4'
                            if (event.damages.length) {
                                event.damages.shift().damage('nosource');
                                event.redo();
                            }
                        },
                    },
                    kivahz: {
                        audio: "ext:王朝更替_策:1",
                        audioname: ["xiaohekiva"],
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num++;
                        },
                        ai: {
                            threaten: 1.5,
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                if (player.hp < player.maxHp) return num + player.maxHp - player.hp;
                            },
                        },
                    },
                    kivahux: {
                        trigger: {
                            source: "damageEnd",
                        },
                        audio: "ext:王朝更替_策:2",
                        silent: true,
                        filter: function (event, player) {
                            if (event._notrigger.contains(event.player)) return false;
                            return event.nature == 'fire';
                        },
                        content: function () {
                            if (!player.storage.kivahux) {
                                player.storage.kivahux = [];
                            }
                            player.storage.kivahux.add(trigger.player);
                        },
                        group: ["kivahux_draw", "kivahux_clear"],
                        subSkill: {
                            draw: {
                                trigger: {
                                    source: "damageAfter",
                                },
                                priority: -6,
                                filter: function (event, player) {
                                    if (!player.storage.kivahux || !player.storage.kivahux.length) return false;
                                    for (var i = 0; i < player.storage.kivahux.length; i++) {
                                        if (player.storage.kivahux[i].isIn()) return true;
                                    }
                                    return false;
                                },
                                check: function () {
                                    return false;
                                },
                                forced: true,
                                content: function () {
                                    for (var i = 0; i < player.storage.kivahux.length; i++) {
                                        if (!player.storage.kivahux[i].isIn()) {
                                            player.storage.kivahux.splice(i--, 1);
                                        }
                                    }
                                    game.asyncDraw(player.storage.kivahux);
                                    if (!player.storage.kivahux3) {
                                        player.storage.kivahux3 = [];
                                    }
                                    player.storage.kivahux3.addArray(player.storage.kivahux);
                                    player.addTempSkill('kivahux3');
                                },
                                sub: true,
                            },
                            clear: {
                                trigger: {
                                    source: "damageAfter",
                                },
                                priority: -7,
                                silent: true,
                                content: function () {
                                    delete player.storage.kivahux;
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                        },
                        forced: true,
                        popup: false,
                    },
                    kivaxuj: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        filter: function (event, player) {
                            return player.countCards('he', { color: 'red' }) > 0;
                        },
                        filterTarget: true,
                        selectTarget: function () {
                            var player = _status.event.player
                            return [1, Math.max(1, player.maxHp - player.hp)];
                        },
                        position: "he",
                        filterCard: {
                            color: "red",
                        },
                        check: function (card) {
                            return 8 - get.value(card);
                        },
                        multitarget: true,
                        multiline: true,
                        line: "fire",
                        content: function () {
                            'step 0'
                            event.delay = false;
                            for (var i = 0; i < targets.length; i++) {
                                if (!targets[i].isLinked()) {
                                    targets[i].link(true);
                                    event.delay = true;
                                }
                            }
                            'step 1'
                            if (event.delay) {
                                game.delay();
                            }
                            'step 2'
                            targets[0].damage('fire');
                        },
                        ai: {
                            threaten: 1.5,
                            order: 7,
                            result: {
                                target: function (player, target) {
                                    var eff = get.damageEffect(target, player, target, 'fire');
                                    if (target.isLinked()) {
                                        return eff / 10;
                                    }
                                    else {
                                        return eff;
                                    }
                                },
                            },
                        },
                    },
                    kivawuj: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.getStat('damage') >= 3 && !player.storage.kivawuj;
                        },
                        content: function () {
                            "step 0"
                            player.removeSkill('huxiao');
                            player.gainMaxHp();
                            "step 1"
                            player.recover();
                            player.awakenSkill('kivawuj');
                            player.storage.kivawuj = true;

                            var card = get.cardPile('qinglong', 'field');
                            if (card) {
                                player.gain(card, 'gain2', 'log');
                            }
                        },
                    },
                    kivayd: {
                        audio: "ext:王朝更替_策:1",
                        enable: ["chooseToRespond"],
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        viewAs: {
                            name: "shan",
                            suit: "club",
                            number: 12,
                        },
                        viewAsFilter: function (player) {
                            if (!player.countCards('h', { color: 'black' })) return false;
                        },
                        prompt: "将一张黑色手牌当闪打出",
                        check: function () { return 1 },
                        ai: {
                            respondShan: true,
                            skillTagFilter: function (player) {
                                if (!player.countCards('h', { color: 'black' })) return false;
                            },
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.tag(card, 'respondShan') && current < 0) return 0.6
                                },
                            },
                            basic: {
                                useful: [7, 2],
                                value: [7, 2],
                            },
                        },
                    },
                    kivatg: {
                        group: ["kivatg_shan", "kivatg_wuxie"],
                        audio: "ext:王朝更替_策:2",
                        ai: {
                            effect: {
                                target: function (card, player, target) {
                                    if ((card.name == 'shan' && get.color(card) == 'red') || card.name == 'wuxie') return [1, 0.6];
                                },
                                player: function (card, player, target) {
                                    if ((card.name == 'shan' && get.color(card) == 'red') || card.name == 'wuxie') return [1, 1];
                                },
                            },
                        },
                        subSkill: {
                            shan: {
                                audio: "kivatg",
                                priority: -5,
                                frequent: true,
                                trigger: {
                                    player: "shanBefore",
                                    target: "shanBefore",
                                },
                                filter: function (event, player) {
                                    return get.color(event.card) == 'red';
                                },
                                content: function () {
                                    player.draw();
                                },
                                sub: true,
                            },
                            wuxie: {
                                audio: "kivatg",
                                priority: 15,
                                frequent: true,
                                trigger: {
                                    player: "useCardToBefore",
                                    target: "useCardToBefore",
                                },
                                filter: function (event, player) {
                                    if (event.card.name == 'wuxie') return true;
                                },
                                content: function () {
                                    player.draw();
                                },
                                sub: true,
                            },
                        },
                    },
                    kivarc: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        unique: true,
                        trigger: {
                            source: "damageAfter",
                        },
                        forced: true,
                        derivation: "xinwuyan",
                        filter: function (event, player) {
                            return player.hp < player.maxHp;
                        },
                        content: function () {
                            player.awakenSkill('kivarc');
                            player.addSkill('xinwuyan');
                            player.loseMaxHp();
                        },
                    },
                    kivaws: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        derivation: ["xingshang", "rejianxiong"],
                        unique: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.hp == 1 && !player.storage.kivaws;
                        },
                        forced: true,
                        priority: 3,
                        content: function () {
                            player.loseMaxHp();
                            player.addSkill('xingshang');
                            player.addSkill('rejianxiong');
                            player.awakenSkill('kivaws');
                            player.storage.hunzi = true;
                            game.createTrigger('phaseBegin', 'yinghun', player, trigger);
                        },
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 2;
                                return 0.5;
                            },
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (!target.hasFriend()) return;
                                    if (get.tag(card, 'damage') == 1 && target.hp == 2 && !target.isTurnedOver() &&
                                        _status.currentPhase != target && get.distance(_status.currentPhase, target, 'absolute') <= 3) return [0.5, 1];
                                },
                            },
                        },
                    },
                    kivazyx: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: ["respond", "useCard"],
                        },
                        frequent: true,
                        filter: function (event, player) {
                            return player != _status.currentPhase && get.itemtype(event.cards) == 'cards';
                        },
                        content: function () {
                            "step 0"
                            event.card = get.cards()[0];
                            game.broadcast(function (card) {
                                ui.arena.classList.add('thrownhighlight');
                                card.copy('thrown', 'center', 'thrownhighlight', ui.arena).animate('start');
                            }, event.card);
                            event.node = event.card.copy('thrown', 'center', 'thrownhighlight', ui.arena).animate('start');
                            ui.arena.classList.add('thrownhighlight');
                            game.addVideo('thrownhighlight1');
                            game.addVideo('centernode', null, get.cardInfo(event.card));
                            if (get.type(event.card, 'trick') == get.type(trigger.card, 'trick')) {
                                player.chooseTarget('选择获得此牌的角色').set('ai', function (target) {
                                    var att = get.attitude(_status.event.player, target);
                                    if (_status.event.du) {
                                        if (target.hasSkillTag('nodu')) return 0;
                                        return -att;
                                    }
                                    if (att > 0) {
                                        return att + Math.max(0, 5 - target.countCards('h'));
                                    }
                                    return att;
                                }).set('du', event.card.name == 'du');
                            }
                            else {
                                player.chooseBool('是否弃置' + get.translation(event.card) + '？');
                                event.disbool = true;
                            }
                            game.delay(2);
                            "step 1"
                            if (event.disbool) {
                                if (!result.bool) {
                                    game.log(player, '展示了', event.card);
                                    ui.cardPile.insertBefore(event.card, ui.cardPile.firstChild);
                                }
                                else {
                                    game.log(player, '展示并弃掉了', event.card);
                                    event.card.discard();
                                }
                                game.addVideo('deletenode', player, [get.cardInfo(event.node)]);
                                event.node.delete();
                                game.broadcast(function (card) {
                                    ui.arena.classList.remove('thrownhighlight');
                                    if (card.clone) {
                                        card.clone.delete();
                                    }
                                }, event.card);
                            }
                            else if (result.targets) {
                                player.line(result.targets, 'green');
                                result.targets[0].gain(event.card, 'log');
                                event.node.moveDelete(result.targets[0]);
                                game.addVideo('gain2', result.targets[0], [get.cardInfo(event.node)]);
                                game.broadcast(function (card, target) {
                                    ui.arena.classList.remove('thrownhighlight');
                                    if (card.clone) {
                                        card.clone.moveDelete(target);
                                    }
                                }, event.card, result.targets[0]);
                            }
                            else {
                                game.log(player, '展示并弃掉了', event.card);
                                event.card.discard();
                                game.addVideo('deletenode', player, [get.cardInfo(event.node)]);
                                event.node.delete();
                                game.broadcast(function (card) {
                                    ui.arena.classList.remove('thrownhighlight');
                                    if (card.clone) {
                                        card.clone.delete();
                                    }
                                }, event.card);
                            }
                            game.addVideo('thrownhighlight2');
                            ui.arena.classList.remove('thrownhighlight');
                        },
                        ai: {
                            effect: {
                                target: function (card, player) {
                                    if (get.tag(card, 'respond') && player.countCards('h') > 1) return [1, 0.2];
                                },
                            },
                        },
                    },
                    kivaqw: {
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        audio: "ext:王朝更替_策:1",
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('yinyueqiang');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('yinyueqiang', 'diamond', 1), player);
                            }
                            else {
                                player.draw();
                            }
                        },
                    },
                    kivagz: {
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        audio: "ext:王朝更替_策:1",
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('qinggang');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('qinggang', 'diamond', 1), player);
                            }
                            else {
                                player.draw();
                            }
                        },
                    },
                    kivalsy: {
                        unique: true,
                        trigger: {
                            player: "phaseAfter",
                        },
                        audio: "ext:王朝更替_策:1",
                        direct: true,
                        init: function (player) {
                            player.storage.kivalsy = [];
                            // player.storage.xiongcai2=0;
                        },
                        intro: {
                            content: "characters",
                        },
                        content: function () {
                            'step 0'
                            // if(player.storage.xiongcai2<1){
                            //     player.storage.xiongcai2++;
                            //     event.finish();
                            // }
                            // else{
                            //     player.storage.xiongcai2=0;
                            // }
                            'step 1'
                            player.logSkill('kivalsy');
                            var list = [];
                            var list2 = [];
                            var players = game.players.concat(game.dead);
                            for (var i = 0; i < players.length; i++) {
                                list2.add(players[i].name);
                                list2.add(players[i].name1);
                                list2.add(players[i].name2);
                            }
                            for (var i in lib.character) {
                                if (lib.character[i][1] != 'shen') continue;
                                if (lib.character[i][4].contains('boss')) continue;
                                if (lib.character[i][4].contains('minskin')) continue;
                                if (player.storage.kivalsy.contains(i)) continue;
                                if (list2.contains(i)) continue;
                                list.push(i);
                            }
                            var name = list.randomGet();
                            player.storage.kivalsy.push(name);
                            player.markSkill('kivalsy');
                            var skills = lib.character[name][3];
                            for (var i = 0; i < skills.length; i++) {
                                player.addSkill(skills[i]);
                            }
                            event.dialog = ui.create.dialog('<div class="text center">' + get.translation(player) + '发动了【守约】', [[name], 'character']);
                            game.delay(2);
                            'step 2'
                            event.dialog.close();
                        },
                    },
                    kivahcw: {
                        unique: true,
                        trigger: {
                            player: "phaseAfter",
                        },
                        audio: "ext:王朝更替_策:1",
                        direct: true,
                        init: function (player) {
                            player.storage.kivahcw = [];
                            // player.storage.xiongcai2=0;
                        },
                        intro: {
                            content: "characters",
                        },
                        content: function () {
                            'step 0'
                            // if(player.storage.xiongcai2<1){
                            //     player.storage.xiongcai2++;
                            //     event.finish();
                            // }
                            // else{
                            //     player.storage.xiongcai2=0;
                            // }
                            'step 1'
                            player.logSkill('kivahcw');
                            var list = [];
                            var list2 = [];
                            var players = game.players.concat(game.dead);
                            for (var i = 0; i < players.length; i++) {
                                list2.add(players[i].name);
                                list2.add(players[i].name1);
                                list2.add(players[i].name2);
                            }
                            for (var i in lib.character) {
                                if (lib.character[i][1] != 'shu') continue;
                                if (lib.character[i][4].contains('boss')) continue;
                                if (lib.character[i][4].contains('minskin')) continue;
                                if (player.storage.kivahcw.contains(i)) continue;
                                if (list2.contains(i)) continue;
                                list.push(i);
                            }
                            var name = list.randomGet();
                            player.storage.kivahcw.push(name);
                            player.markSkill('kivahcw');
                            var skills = lib.character[name][3];
                            for (var i = 0; i < skills.length; i++) {
                                player.addSkill(skills[i]);
                            }
                            event.dialog = ui.create.dialog('<div class="text center">' + get.translation(player) + '发动了【楚王】', [[name], 'character']);
                            game.delay(2);
                            'step 2'
                            event.dialog.close();
                        },
                    },
                    kivaxcb: {
                        unique: true,
                        trigger: {
                            player: "phaseAfter",
                        },
                        audio: "ext:王朝更替_策:1",
                        direct: true,
                        init: function (player) {
                            player.storage.kivaxcb = [];
                            // player.storage.xiongcai2=0;
                        },
                        intro: {
                            content: "characters",
                        },
                        content: function () {
                            'step 0'
                            // if(player.storage.xiongcai2<1){
                            //     player.storage.xiongcai2++;
                            //     event.finish();
                            // }
                            // else{
                            //     player.storage.xiongcai2=0;
                            // }
                            'step 1'
                            player.logSkill('kivaxcb');
                            var list = [];
                            var list2 = [];
                            var players = game.players.concat(game.dead);
                            for (var i = 0; i < players.length; i++) {
                                list2.add(players[i].name);
                                list2.add(players[i].name1);
                                list2.add(players[i].name2);
                            }
                            for (var i in lib.character) {
                                if (lib.character[i][1] != 'wu') continue;
                                if (lib.character[i][4].contains('boss')) continue;
                                if (lib.character[i][4].contains('minskin')) continue;
                                if (player.storage.kivaxcb.contains(i)) continue;
                                if (list2.contains(i)) continue;
                                list.push(i);
                            }
                            var name = list.randomGet();
                            player.storage.kivaxcb.push(name);
                            player.markSkill('kivaxcb');
                            var skills = lib.character[name][3];
                            for (var i = 0; i < skills.length; i++) {
                                player.addSkill(skills[i]);
                            }
                            event.dialog = ui.create.dialog('<div class="text center">' + get.translation(player) + '发动了【成败】', [[name], 'character']);
                            game.delay(2);
                            'step 2'
                            event.dialog.close();
                        },
                    },
                    kivazzz: {
                        unique: true,
                        trigger: {
                            player: "phaseAfter",
                        },
                        audio: "ext:王朝更替_策:1",
                        direct: true,
                        init: function (player) {
                            player.storage.kivazzz = [];
                            // player.storage.xiongcai2=0;
                        },
                        intro: {
                            content: "characters",
                        },
                        content: function () {
                            'step 0'
                            // if(player.storage.xiongcai2<1){
                            //     player.storage.xiongcai2++;
                            //     event.finish();
                            // }
                            // else{
                            //     player.storage.xiongcai2=0;
                            // }
                            'step 1'
                            player.logSkill('kivazzz');
                            var list = [];
                            var list2 = [];
                            var players = game.players.concat(game.dead);
                            for (var i = 0; i < players.length; i++) {
                                list2.add(players[i].name);
                                list2.add(players[i].name1);
                                list2.add(players[i].name2);
                            }
                            for (var i in lib.character) {
                                if (lib.character[i][1] != 'qun') continue;
                                if (lib.character[i][4].contains('boss')) continue;
                                if (lib.character[i][4].contains('minskin')) continue;
                                if (player.storage.kivazzz.contains(i)) continue;
                                if (list2.contains(i)) continue;
                                list.push(i);
                            }
                            var name = list.randomGet();
                            player.storage.kivazzz.push(name);
                            player.markSkill('kivazzz');
                            var skills = lib.character[name][3];
                            for (var i = 0; i < skills.length; i++) {
                                player.addSkill(skills[i]);
                            }
                            event.dialog = ui.create.dialog('<div class="text center">' + get.translation(player) + '发动了【择主】', [[name], 'character']);
                            game.delay(2);
                            'step 2'
                            event.dialog.close();
                        },
                    },
                    kivayxsyr: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        position: "he",
                        filterCard: true,
                        selectCard: [1, Infinity],
                        prompt: "弃置任意张牌并摸等量的牌",
                        check: function (card) {
                            return 6 - get.value(card)
                        },
                        content: function () {
                            player.draw(cards.length);
                        },
                        ai: {
                            order: 1,
                            result: {
                                player: 1,
                            },
                            threaten: 1.5,
                        },
                    },
                    kivacjsy: {
                        trigger: {
                            player: "phaseBefore",
                        },
                        unique: true,
                        content: function () {
                            player.init('boss_caocao')
                            player.removeSkill('kivacsy')
                            player.removeSkill('tiandu')
                            player.removeSkill('bazhen')
                            player.draw();
                            var chat = ['参后为操'].randomGet()
                            player.say(chat)




                        },
                    },
                    kivacsy: {
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        audio: "ext:王朝更替_策:1",
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('langeguaiyi');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('langeguaiyi', 'diamond', 1), player);
                            }
                            else {
                                player.draw();
                            }
                        },
                    },
                    kivacc: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        derivation: ["kivacsy", "kivacjsy"],
                        unique: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.hp == 1 && !player.storage.kivacc;
                        },
                        forced: true,
                        priority: 3,
                        content: function () {
                            player.addSkill('kivacsy');
                            player.addSkill('kivacjsy');
                            player.awakenSkill('kivacc');
                            player.storage.kivacc = true;
                        },
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 2;
                                return 0.5;
                            },
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (!target.hasFriend()) return;
                                    if (get.tag(card, 'damage') == 1 && target.hp == 2 && !target.isTurnedOver() &&
                                        _status.currentPhase != target && get.distance(_status.currentPhase, target, 'absolute') <= 3) return [0.5, 1];
                                },
                            },
                        },
                    },
                    "kivabd3": {
                        trigger: {
                            global: ["useCardAfter", "useSkillAfter", "phaseAfter"],
                        },
                        silent: true,
                        filter: function (event) {
                            return event.skill != 'kivabd2' && event.skill != 'qinwang2';
                        },
                        content: function () {
                            player.removeSkill('kivabd3');
                        },
                        forced: true,
                        popup: false,
                    },
                    kivapxz: {
                        mod: {
                            suit: function (card, suit) {
                                if (suit == 'diamond') return 'club';
                            },
                        },
                    },
                    "kivabd1": {
                        audio: "kivabd",
                        enable: "chooseToUse",
                        filter: function (event, player) {
                            if (event.filterCard && !event.filterCard({ name: 'sha' }, player, event)) return false;
                            if (!player.hasZhuSkill('kivabd')) return false;
                            if (player.hasSkill('kivabd3')) return false;
                            if (!lib.filter.cardUsable({ name: 'sha' }, player)) return false;
                            return game.hasPlayer(function (current) {
                                return current != player && current.group == 'qun';
                            });
                        },
                        filterTarget: function (card, player, target) {
                            if (_status.event._backup &&
                                typeof _status.event._backup.filterTarget == 'function' &&
                                !_status.event._backup.filterTarget({ name: 'sha' }, player, target)) {
                                return false;
                            }
                            return player.canUse({ name: 'sha' }, target);
                        },
                        content: function () {
                            "step 0"
                            if (event.current == undefined) event.current = player.next;
                            if (event.current == player) {
                                player.addSkill('kivabd3');
                                event.getParent(2).step = 0;
                                event.finish();
                            }
                            else if (event.current.group == 'qun') {
                                var next = event.current.chooseToRespond('是否替' + get.translation(player) + '对' + get.translation(target) + '使用一张杀',
                                    function (card, player, event) {
                                        event = event || _status.event;
                                        return card.name == 'sha' && event.source.canUse(card, event.target);
                                    });
                                next.set('ai', function (card) {
                                    var event = _status.event;
                                    return get.effect(event.target, card, event.source, event.player);
                                });
                                next.set('source', player);
                                next.set('target', target);
                                next.autochoose = lib.filter.autoRespondSha;
                            }
                            else {
                                event.current = event.current.next;
                                event.redo();
                            }
                            "step 1"
                            if (result.bool) {
                                event.finish();
                                if (result.cards && result.cards.length == 1 && result.cards[0].name == 'sha') {
                                    player.useCard(result.cards[0], target).animate = false;
                                }
                                else {
                                    player.useCard({ name: 'sha' }, target).animate = false;
                                }
                                if (typeof event.current.ai.shown == 'number' && event.current.ai.shown < 0.95) {
                                    event.current.ai.shown += 0.3;
                                    if (event.current.ai.shown > 0.95) event.current.ai.shown = 0.95;
                                }
                            }
                            else {
                                event.current = event.current.next;
                                event.goto(0);
                            }
                        },
                        ai: {
                            result: {
                                target: function (player, target) {
                                    if (player.hasSkill('kivabd3')) return 0;
                                    return get.effect(target, { name: 'sha' }, player, target);
                                },
                            },
                            order: function () {
                                return get.order({ name: 'sha' }) - 0.1;
                            },
                        },
                    },
                    "kivabd2": {
                        audio: "kivabd",
                        trigger: {
                            player: "chooseToRespondBegin",
                        },
                        filter: function (event, player) {
                            if (event.responded) return false;
                            if (player.storage.kivabding) return false;
                            if (!player.hasZhuSkill('kivabd')) return false;
                            if (event.filterCard({ name: 'sha' }, player, event) == false) return false;
                            return game.hasPlayer(function (current) {
                                return current != player && current.group == 'qun';
                            });
                        },
                        content: function () {
                            "step 0"
                            if (event.current == undefined) event.current = player.next;
                            if (event.current == player) {
                                event.finish();
                            }
                            else if (event.current.group == 'qun') {
                                player.storage.jijianging = true;
                                var next = event.current.chooseToRespond('是否替' + get.translation(player) + '打出一张杀？', { name: 'sha' });
                                next.set('ai', function () {
                                    var event = _status.event;
                                    return (get.attitude(event.player, event.source) - 2);
                                });
                                next.set('source', player);
                                next.autochoose = lib.filter.autoRespondSha;
                            }
                            else {
                                event.current = event.current.next;
                                event.redo();
                            }
                            "step 1"
                            player.storage.kivabding = false;
                            if (result.bool) {
                                event.finish();
                                trigger.result = result;
                                trigger.responded = true;
                                trigger.animate = false;
                                if (typeof event.current.ai.shown == 'number' && event.current.ai.shown < 0.95) {
                                    event.current.ai.shown += 0.3;
                                    if (event.current.ai.shown > 0.95) event.current.ai.shown = 0.95;
                                }
                            }
                            else {
                                event.current = event.current.next;
                                event.goto(0);
                            }
                        },
                    },
                    kivabd: {
                        unique: true,
                        audio: "ext:王朝更替_策:1",
                        group: ["kivabd2", "kivabd1"],
                        zhuSkill: false,
                    },
                    kivast: {
                        trigger: {
                            player: "phaseBefore",
                        },
                        audio: "ext:王朝更替_策:1",
                        unique: true,
                        content: function () {
                            player.init('zhugeliangkiva')
                            player.addSkill('niepan')
                            player.draw();
                            var chat = ['师傅，我们一起上吧！'].randomGet()
                            player.say(chat)




                        },
                    },
                    kivaffj: {
                        trigger: {
                            player: "phaseBefore",
                        },
                        audio: "ext:王朝更替_策:1",
                        unique: true,
                        content: function () {
                            player.init('boss_zhaoyun')
                            player.addSkill('enyuan')
                            player.draw();
                            var chat = ['子龙将军可立大功！'].randomGet()
                            player.say(chat)




                        },
                    },
                    kivahenshin: {
                        trigger: {
                            player: "phaseBefore",
                        },
                        audio: "ext:王朝更替_策:1",
                        unique: true,
                        zhuSkill: true,
                        content: function () {
                            player.init('zhangxiuhenshinkiva')
                            player.addSkill('fangquan')
                            player.addSkill('kongju')
                            player.addSkill('hanqiang')
                            player.addSkill('biaoqi')
                            player.draw();
                            var chat = ['我乃北地枪王！'].randomGet()
                            player.say(chat)




                        },
                    },
                    kivazy: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        check: function () { return 1; },
                        content: function () {
                            'step 0'
                            trigger.finish();
                            trigger.untrigger();
                            event.cards = get.cards(2);
                            player.showCards(event.cards);
                            'step 1'
                            if (get.color(event.cards[0]) != get.color(event.cards[1])) {
                                player.addTempSkill('xinzhongyong', 'phaseAfter');
                                player.addTempSkill('longyin', 'phaseAfter');
                            }
                            player.gain(event.cards);
                        },
                    },
                    kivazbsm: {
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        audio: "ext:王朝更替_策:1",
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('zhangba');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('zhangba', 'diamond', 1), player);
                            }
                            else {
                                player.draw();
                            }
                        },
                    },
                    kivaqlyyd: {
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        audio: "ext:王朝更替_策:1",
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('qinglong');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('qinglong', 'diamond', 1), player);
                            }
                            else {
                                player.draw();
                            }
                        },
                    },
                    "kiva3": {
                        trigger: {
                            player: "phaseBefore",
                        },
                        unique: true,
                        content: function () {
                            player.init('zhangfeikiva')
                            player.removeSkill('zz_GY')
                            player.removeSkill('zz_ML')
                            player.draw();
                            var chat = ['燕人张翼德在此！'].randomGet()
                            player.say(chat)




                        },
                    },
                    "kiva2": {
                        trigger: {
                            player: "phaseBefore",
                        },
                        unique: true,
                        content: function () {
                            player.init('guanyukiva')
                            player.removeSkill('zz_GY')
                            player.removeSkill('zz_ML')
                            player.draw();
                            var chat = ['关羽在此，尔等受死！'].randomGet()
                            player.say(chat)




                        },
                    },
                    kivazx: {
                        trigger: {
                            player: "phaseBefore",
                        },
                        unique: true,
                        content: function () {
                            player.init('simayikiva')
                            player.addSkill('yiji')
                            player.removeSkill('zz_ML')
                            player.draw();
                            var chat = ['那就这样吧......'].randomGet()
                            player.say(chat)




                        },
                    },
                    kivasxk: {
                        trigger: {
                            player: "phaseBefore",
                        },
                        unique: true,
                        content: function () {
                            player.init('suncekiva')
                            player.addSkill('suishi')
                            player.removeSkill('zz_ML')
                            player.draw();
                            var chat = ['哥哥，让我们一起努力吧！'].randomGet()
                            player.say(chat)




                        },
                    },
                    kivawj: {
                        audio: "ext:王朝更替_策:1",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        viewAsFilter: function (player) {
                            return player.countCards('h', { color: 'black' }) > 0;
                        },
                        viewAs: {
                            name: "tiesuo",
                            suit: "club",
                            number: 6,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "club", "number": 6, "name": "shuchui", "cardid": "2576686405", "_transform": "translateX(112px)", "clone": { "name": "shuchui", "suit": "club", "number": 6, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 4366 }, "timeout": 4347, "original": "h" }],
                        },
                        prompt: "将一张黑色手牌当铁索连环使用",
                        check: function (card) { return 8 - get.value(card) },
                        threaten: 1.2,
                        ai: {
                            basic: {
                                useful: [6, 4],
                                value: [6, 4],
                                order: 7,
                            },
                            result: {
                                player: 1,
                                target: function (player, target) {
                                    if (target.isLinked()) return 1;
                                    if (get.attitude(player, target) >= 0) return -0.9;
                                    if (ui.selected.targets.length) return -0.9;
                                    if (game.hasPlayer(function (current) {
                                        return get.attitude(player, current) <= -1 && current != target && !current.isLinked();
                                    })) {
                                        return -0.9;
                                    }
                                    return 0;
                                },
                            },
                            expose: 0.2,
                            wuxie: function () {
                                if (Math.random() < 0.5) return 0;
                            },
                            tag: {
                                multitarget: 1,
                                multineg: 1,
                                norepeat: 1,
                            },
                        },
                    },
                    kivazbz: {
                        trigger: {
                            player: "huogongBegin",
                        },
                        content: function () {
                            player.draw();
                            var chat = ['魏军士气高盛，不可轻敌！', '魏国，可徐徐图之。'].randomGet()
                            player.say(chat)


                        },
                        group: "kivazbz",
                        subSkill: {
                            "1": {
                                enable: "phaseUse",
                                filterCard: true,
                                position: "hej",
                                usable: 1,
                                viewAs: {
                                    name: "juedou",
                                    suit: "club",
                                    number: 13,
                                    cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "club", "number": 13, "name": "sha", "cardid": "4536044426", "clone": { "name": "sha", "suit": "club", "number": 13, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 10043 }, "timeout": 9996, "original": "h" }],
                                },
                                ai: {
                                    basic: {
                                        order: 4,
                                        value: [3, 1],
                                        useful: 1,
                                    },
                                    wuxie: function (target, card, player, current, state) {
                                        if (get.attitude(current, player) >= 0 && state > 0) return false;
                                    },
                                    result: {
                                        player: function (player) {
                                            var nh = player.countCards('h');
                                            if (nh <= player.hp && nh <= 4 && _status.event.name == 'chooseToUse') {
                                                if (typeof _status.event.filterCard == 'function' &&
                                                    _status.event.filterCard({ name: 'juedou' })) {
                                                    return -10;
                                                }
                                                if (_status.event.skill) {
                                                    var viewAs = get.info(_status.event.skill).viewAs;
                                                    if (viewAs == 'juedou') return -10;
                                                    if (viewAs && viewAs.name == 'juedou') return -10;
                                                }
                                            }
                                            return 0;
                                        },
                                        target: function (player, target) {
                                            if (target.hasSkill('juedou2') || target.countCards('h') == 0) return 0;
                                            if (player.countCards('h') <= 1) return 0;
                                            if (target == player) {
                                                if (typeof _status.event.filterCard == 'function' &&
                                                    _status.event.filterCard({ name: 'juedou' })) {
                                                    return -1.5;
                                                }
                                                if (_status.event.skill) {
                                                    var viewAs = get.info(_status.event.skill).viewAs;
                                                    if (viewAs == 'juedou') return -1.5;
                                                    if (viewAs && viewAs.name == 'juedou') return -1.5;
                                                }
                                                return 0;
                                            }
                                            return -1.5;
                                        },
                                    },
                                    tag: {
                                        damage: 1,
                                        fireDamage: 1,
                                        natureDamage: 1,
                                        norepeat: 1,
                                        respond: 2,
                                        respondSha: 2,
                                    },
                                },
                                sub: true,
                            },
                        },
                    },
                    kivatzb: {
                        audio: "ext:王朝更替_策:1",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.suit(card) == 'diamond';
                        },
                        viewAsFilter: function (player) {
                            return player.countCards('h', { suit: 'diamond' }) > 0;
                        },
                        viewAs: {
                            name: "wugu",
                            suit: "diamond",
                            number: 8,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "diamond", "number": 8, "name": "sha", "cardid": "2767105321", "clone": { "name": "sha", "suit": "diamond", "number": 8, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 709 }, "timeout": 690, "original": "h" }],
                        },
                        prompt: "将一张方片手牌当五谷丰登使用",
                        check: function (card) { return 8 - get.value(card) },
                        threaten: 1.2,
                        ai: {
                            basic: {
                                useful: [6, 4],
                                value: [6, 4],
                                order: 3,
                            },
                            result: {
                                player: 1,
                                target: function (player, target) {
                                    if (get.is.versus()) {
                                        if (target == player) return 1.5;
                                        return 1;
                                    }
                                    if (player.hasUnknown(2)) {
                                        return 0;
                                    }
                                    return 2 - 2 * get.distance(player, target, 'absolute') / game.countPlayer();
                                },
                            },
                            expose: 0.2,
                            wuxie: function () {
                                if (Math.random() < 0.5) return 0;
                            },
                            tag: {
                                draw: 1,
                                multitarget: 1,
                            },
                        },
                    },
                    kivaszb: {
                        trigger: {
                            global: "damageBefore",
                        },
                        audio: "ext:王朝更替_策:1",
                        priority: 6,
                        filter: function (event, player) {
                            return event.player != player && event.player.hp == 1 && player.countCards('he', { type: 'equip' }) > 0;
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            var next = player.chooseToDiscard(get.prompt('kivaszb', trigger.player), { type: 'equip' }, 'he');
                            next.logSkill = ['kivaszb', trigger.player];
                            next.set('ai', function (card) {
                                var player = _status.event.player;
                                if (get.attitude(player, _status.event.getTrigger().player) > 3) {
                                    return 11 - get.value(card);
                                }
                                return -1;
                            });
                            "step 1"
                            if (result.bool) {
                                player.turnOver();
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            trigger.cancel();
                        },
                        ai: {
                            expose: 0.5,
                        },
                    },
                    kivaft: {
                        trigger: {
                            player: "phaseBefore",
                        },
                        unique: true,
                        content: function () {
                            player.init('mayunlukiva')
                            player.removeSkill('zz_GY')
                            player.removeSkill('zz_ML')
                            player.draw('tao');
                            var chat = ['阿里嘎多'].randomGet()
                            player.say(chat)




                        },
                    },
                    kivagwd: {
                        trigger: {
                            player: "phaseBefore",
                        },
                        unique: true,
                        skillAnimation: true,
                        forceunique: true,
                        filter: function (event, player) {
                            return player.storage.fanghun > 0;
                        },
                        prompt: function (event, player) {
                            var num = player.storage.fanghun2;
                            var mode = get.mode();
                            if (mode != 'chess' && mode != 'tafang' && mode != 'stone') {
                                num = Math.min(num, game.players.length + game.dead.length);
                            }
                            return get.prompt('kivagwd') + '（体力上限：' + num + '）';
                        },
                        check: function (event, player) {
                            var num = player.storage.fanghun2;
                            if (num == 1) return false;
                            if (player.hp <= 1) return true;
                            if (num == 2) return false;
                            if (num == 3) return player.hp < 3 && player.isMinHp();
                            return true;
                        },
                        content: function () {
                            'step 0'
                            var list;
                            if (_status.connectMode) {
                                list = get.charactersOL(function (i) {
                                    return lib.character[i][1] != 'hankiva';
                                });
                            }
                            else {
                                list = get.gainableCharacters(function (info) {
                                    return info[1] == 'hankiva';
                                });
                            }
                            var players = game.players.concat(game.dead);
                            for (var i = 0; i < players.length; i++) {
                                list.remove(players[i].name);
                                list.remove(players[i].name1);
                                list.remove(players[i].name2);
                            }
                            var dialog = ui.create.dialog('将武将牌替换为一名角色', 'hidden');
                            dialog.add([list.randomGets(5), 'character']);
                            player.chooseButton(dialog, true).ai = function (button) {
                                return get.rank(button.link, true) - lib.character[button.link][2];
                            };
                            player.awakenSkill('kivagwd');
                            'step 1'
                            var num = player.storage.fanghun2;
                            var mode = get.mode();
                            if (mode != 'chess' && mode != 'tafang' && mode != 'stone') {
                                num = Math.min(num, game.players.length + game.dead.length);
                            }
                            player.reinit('liuxiukiva', result.links[0], num);
                        },
                    },
                    kivajww: {
                        audio: "ext:王朝更替_策:1",
                        audioname: ["heqi", "sunce"],
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num + 5;
                        },
                        ai: {
                            threaten: 1.5,
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                if (player.hp < player.maxHp) return num + player.maxHp - player.hp;
                            },
                        },
                    },
                    kivadll: {
                        trigger: {
                            player: "phaseEnd",
                        },
                        audio: "ext:王朝更替_策:1",
                        frequent: true,
                        filter: function (event, player) {
                            var list = ['wei', 'shu', 'wu', 'qun', 'hankiva', 'tangkiva', 'jinkiva'];
                            var players = game.filterPlayer();
                            var num = 0;
                            for (var i = 0; i < players.length && list.length; i++) {
                                if (list.contains(players[i].group)) {
                                    list.remove(players[i].group);
                                    num++;
                                }
                            }
                            return player.countCards('h') < num;
                        },
                        content: function () {
                            var list = ['wei', 'shu', 'wu', 'qun', 'hankiva', 'tangkiva', 'jinkiva'];
                            var players = game.filterPlayer();
                            var num = 0;
                            for (var i = 0; i < players.length && list.length; i++) {
                                if (list.contains(players[i].group)) {
                                    list.remove(players[i].group);
                                    num++;
                                }
                            }
                            player.draw(num - player.countCards('h'));
                        },
                        ai: {
                            threaten: 1.3,
                        },
                    },
                    kivaxc: {
                        audio: "ext:王朝更替_策:1",
                        audioname: ["heqi", "sunce"],
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num++;
                        },
                        ai: {
                            threaten: 1.5,
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                if (player.hp < player.maxHp) return num + player.maxHp - player.hp;
                            },
                        },
                    },
                    kivafj: {
                        unique: true,
                        gainable: true,
                        group: ["luoying1", "luoying2"],
                    },
                    kivajjjjjjj: {
                        audio: "ext:王朝更替_策:1",
                        enable: "phaseUse",
                        usable: 1,
                        discard: false,
                        filter: function (event, player) {
                            return player.countCards('he', { suit: 'club' }) > 0;
                        },
                        prepare: "throw",
                        position: "he",
                        filterCard: {
                            suit: "club",
                        },
                        filterTarget: function (card, player, target) {
                            if (player == target) return false;
                            if (target.hasJudge('caomu')) return true;
                            return lib.filter.targetEnabled({ name: 'caomu' }, player, target);
                        },
                        check: function (card) {
                            return 7 - get.value(card);
                        },
                        content: function () {
                            if (target.hasJudge('caomu')) {
                                player.logSkill("kivagou", targets);
                                target.discard(target.getJudge('caomu'));
                            }
                            else {
                                player.logSkill('kivagou', targets);
                                var next = player.useCard({ name: 'caomu' }, target, cards);
                                next.animate = false;
                                next.audio = false;
                            }
                            player.draw(2);
                        },
                        ai: {
                            result: {
                                target: function (player, target) {
                                    if (target.hasJudge('caomu')) return -get.effect(target, { name: 'caomu' }, player, target);
                                    return get.effect(target, { name: 'caomu' }, player, target);
                                },
                            },
                            order: 9,
                        },
                        direct: true,
                    },
                    kivalyw: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        unique: true,
                        zhuSkill: true,
                        keepSkill: true,
                        derivation: "kivawjsm",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (!player.hasZhuSkill('kivalyw')) return false;
                            if (player.storage.kivalyw) return false;
                            return player.isMinHp();
                        },
                        content: function () {
                            player.storage.kivalyw = true;
                            player.maxHp++;
                            player.update();
                            player.recover();
                            if (player.hasSkill('kivalyw')) {
                                player.addSkill('kivawjsm');
                            }
                            else {
                                player.addAdditionalSkill('kivalyw', 'kivawjsm');
                            }
                            if (!player.isZhu) {
                                player.storage.zhuSkill_kivalyw = ['kivawjsm'];
                            }
                            else {
                                event.trigger('zhuUpdate');
                            }
                            player.awakenSkill('kivalyw');
                        },
                    },
                    kivawjsm: {
                        mod: {
                            maxHandcard: function (player, num) {
                                if (player.hp < player.maxHp) return num + player.maxHp - player.hp;
                            },
                            targetEnabled: function (card, player, target, now) {
                                if (target.countCards('h') < target.maxHp) {
                                    if (card.name == 'shunshou' || card.name == 'guohe') return false;
                                }
                                else if (target.countCards('h') > target.maxHp) {
                                    if (card.name == 'lebu') return false;
                                }
                            },
                        },
                    },
                    kivasjj: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:true",
                        derivation: ["benghuai", "kivayxx"],
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.maxHp > game.players.length && player.hp < player.maxHp && !player.storage.kivasjj;
                        },
                        forced: true,
                        unique: true,
                        content: function () {
                            var num = player.maxHp - player.countCards('h');
                            if (num > 0) {
                                player.draw(num),
                                    player.lostHp++;
                            }
                            player.addSkill('benghuai');
                            player.addSkill('kivayxx');
                            player.storage.kivasjj = true;
                            player.awakenSkill('kivasjj');
                        },
                    },
                    kivayxx: {
                        trigger: {
                            player: "phaseBefore",
                        },
                        unique: true,
                        content: function () {
                            player.init('simayikiva')
                            player.addSkill('huaiyi')
                            player.addSkill('xinkuanggu')
                            player.removeSkill('kivajj')
                            player.maxHp++;
                            var chat = ['父亲，助我背水一战！'].randomGet()
                            player.say(chat)




                        },
                    },
                    kivazxlx: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        unique: true,
                        zhuSkill: true,
                        keepSkill: true,
                        derivation: "kivazmm",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (!player.hasZhuSkill('kivazxlx')) return false;
                            if (player.storage.kivazxlx) return false;
                            return player.isMinHp();
                        },
                        content: function () {
                            player.storage.kivazxlx = true;
                            player.maxHp++;
                            player.update();
                            player.recover();
                            if (player.hasSkill('kivazxlx')) {
                                player.addSkill('kivazmm');
                            }
                            else {
                                player.addAdditionalSkill('kivazxlx', 'kivazmm');
                            }
                            if (!player.isZhu) {
                                player.storage.zhuSkill_kivazxlx = ['kivazmm'];
                            }
                            else {
                                event.trigger('zhuUpdate');
                            }
                            player.awakenSkill('kivazxlx');
                        },
                    },
                    kivazmm: {
                        unique: true,
                        mod: {
                            selectTarget: function (card, player, range) {
                                if (range[1] == -1) return;
                                if (player.getEquip(1)) return;
                                if (card.name == 'sha') range[1] += 2;
                            },
                            cardUsable: function (card, player, num) {
                                if (player.getEquip(1)) return;
                                if (card.name == 'sha') return num + 1;
                            },
                        },
                        ai: {
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.subtype(card) == 'equip1') return -1;
                                },
                            },
                        },
                    },
                    kivaht: {
                        audio: "ext:王朝更替_策:1",
                        audioname: ["heqi", "sunce"],
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num++;
                        },
                        ai: {
                            threaten: 1.5,
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                if (player.hp < player.maxHp) return num + player.maxHp - player.hp;
                            },
                        },
                    },
                    kivasd: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseEnd",
                        },
                        frequent: true,
                        content: function () {
                            player.draw(2);
                        },
                    },
                    kivakyss: {
                        trigger: {
                            player: "phaseBegin",
                        },
                        audio: "ext:王朝更替_策:1",
                        skillAnimation: true,
                        filter: function (event, player) {
                            return !player.storage.kivakyss;
                        },
                        intro: {
                            content: "limited",
                        },
                        mark: true,
                        direct: true,
                        unique: true,
                        content: function () {
                            "step 0"
                            var check = (player.hp == 1 || (player.hp == 2 && player.countCards('h') <= 1));
                            player.chooseTarget(get.prompt('kivakyss')).set('ai', function (target) {
                                if (!_status.event.check) return 0;
                                return get.attitude(_status.event.player, target);
                            }).set('check', check);
                            "step 1"
                            if (result.bool) {
                                player.storage.suiren = true;
                                player.awakenSkill('kivakyss');
                                player.logSkill('kivakyss', result.targets);
                                player.removeSkill('kongju');
                                player.addSkill('kivastl');
                                player.addSkill('kivasd');
                                player.addSkill('kivaht');
                                ; player.gainMaxHp();
                                player.recover();
                                result.targets[0].draw(3);
                            }
                        },
                    },
                    kivastl: {
                        skillAnimation: true,
                        audio: "ext:王朝更替_策:1",
                        derivation: ["kongju", "kivaaszl"],
                        unique: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        filter: function (event, player) {
                            return player.hp == 1 && !player.storage.kivastl;
                        },
                        forced: true,
                        priority: 3,
                        content: function () {
                            player.gainMaxHp();
                            player.addSkill('kivaaszl');
                            player.removeSkill('kivasd');
                            player.removeSkill('kivaht');
                            player.addSkill('kongju');
                            player.awakenSkill('kivastl');
                            player.storage.kivastl = true;
                        },
                        ai: {
                            threaten: function (player, target) {
                                if (target.hp == 1) return 2;
                                return 0.5;
                            },
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (!target.hasFriend()) return;
                                    if (get.tag(card, 'damage') == 1 && target.hp == 2 && !target.isTurnedOver() &&
                                        _status.currentPhase != target && get.distance(_status.currentPhase, target, 'absolute') <= 3) return [0.5, 1];
                                },
                            },
                        },
                    },
                    kivaaszl: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "damageEnd",
                        },
                        forced: true,
                        check: function () {
                            return false;
                        },
                        filter: function (event, player) {
                            return event.card && event.card.name == 'sha' && (get.color(event.card) == 'black' || event.source.hasSkill('jiu'));
                        },
                        content: function () {
                            player.loseMaxHp();
                        },
                    },
                    kivasssssss: {
                        audio: "ext:王朝更替_策:1",
                        enable: "phaseUse",
                        usable: 3,
                        discard: false,
                        filter: function (event, player) {
                            return player.countCards('he', { suit: 'diamond' }) > 0;
                        },
                        prepare: "throw",
                        position: "he",
                        filterCard: {
                            suit: "diamond",
                        },
                        filterTarget: function (card, player, target) {
                            if (player == target) return false;
                            if (target.hasJudge('lebu')) return true;
                            return lib.filter.targetEnabled({ name: 'lebu' }, player, target);
                        },
                        check: function (card) {
                            return 7 - get.value(card);
                        },
                        content: function () {
                            if (target.hasJudge('lebu')) {
                                player.logSkill("kivaj1", targets);
                                target.discard(target.getJudge('lebu'));
                            }
                            else {
                                player.logSkill('kivajr1', targets);
                                var next = player.useCard({ name: 'lebu' }, target, cards);
                                next.animate = false;
                                next.audio = false;
                            }
                            player.draw(2);
                            player.gainMaxHp();
                            player.addSkill('jueqing');
                            player.removeSkill('kivaaz');
                        },
                        ai: {
                            result: {
                                target: function (player, target) {
                                    if (target.hasJudge('lebu')) return -get.effect(target, { name: 'lebu' }, player, target);
                                    return get.effect(target, { name: 'lebu' }, player, target);
                                },
                            },
                            order: 9,
                        },
                        direct: true,
                    },
                    kivalx: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                        },
                        forced: true,
                        check: function () {
                            return false;
                        },
                        filter: function (event, player) {
                            return event.card && event.card.name == 'sha' && (get.color(event.card) == 'black' || event.source.hasSkill('jiu'));
                        },
                        content: function () {
                            player.loseMaxHp(2);
                        },
                    },
                    kivaaz: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseEnd",
                        },
                        frequent: true,
                        content: function () {
                            player.draw(4);
                        },
                    },
                    "kivajr1": {
                        audio: "ext:王朝更替_策:1",
                    },
                    "kivaj1": {
                        audio: "ext:王朝更替_策:1",
                    },
                    kivayjc: {
                        trigger: {
                            player: "dieBegin",
                        },
                        direct: true,
                        audio: "ext:王朝更替_策:1",
                        skillAnimation: true,
                        animationColor: "thunder",
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivayjc'), function (card, player, target) {
                                return target != player;
                            }).set('ai', function (target) {
                                return get.attitude(_status.event.player, target) / Math.sqrt(target.hp + 1);
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0]
                                player.logSkill('kivayjc', target);
                                target.addSkill(lib.skill.kivayjc.derivation.randomGet());
                                target.addTempSkill('juexiang_club', { player: 'phaseBegin' });
                            }
                        },
                        derivation: ["yiji", "tiandu", "fankui", "guicai"],
                        subSkill: {
                            ji: {
                                mark: true,
                                nopop: true,
                                intro: {
                                    content: "info",
                                },
                                trigger: {
                                    player: "damageEnd",
                                },
                                filter: function (event, player) {
                                    return event.source && event.source.isIn() && event.source != player;
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.source) < 0;
                                },
                                logTarget: "source",
                                content: function () {
                                    trigger.source.loseHp();
                                    var card = get.cardPile(function (card) {
                                        return get.type(card) == 'equip';
                                    });
                                    if (card) {
                                        trigger.source.equip(card, true).set('delay', true);
                                    }
                                },
                                ai: {
                                    "maixie_defend": true,
                                },
                                sub: true,
                            },
                            lie: {
                                mark: true,
                                nopop: true,
                                intro: {
                                    content: "info",
                                },
                                trigger: {
                                    player: "recoverEnd",
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('yiji'), function (card, player, target) {
                                        return target != player;
                                    }).set('ai', function (target) {
                                        return -get.attitude(player, target) / (1 + target.hp);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('yiji', target);
                                        target.loseHp();
                                        var card = get.cardPile(function (card) {
                                            return get.type(card) == 'equip';
                                        });
                                        if (card) {
                                            target.equip(card, true).set('delay', true);
                                        }
                                    }
                                },
                                sub: true,
                            },
                            rou: {
                                mark: true,
                                nopop: true,
                                intro: {
                                    content: "info",
                                },
                                trigger: {
                                    player: "damageEnd",
                                },
                                filter: function (event, player) {
                                    return event.source && event.source.isIn() && event.source != player;
                                },
                                check: function (event, player) {
                                    var att = get.attitude(player, event.source);
                                    if (player.isHealthy()) {
                                        return att < 0;
                                    }
                                    else {
                                        return att > 0
                                    }
                                },
                                logTarget: "source",
                                content: function () {
                                    trigger.source.recover();
                                    if (trigger.source.countCards('he', { type: 'equip' })) {
                                        trigger.source.chooseToDiscard('he', true, '弃置一张装备牌', function (card) {
                                            return get.type(card) == 'equip';
                                        });
                                    }
                                },
                                ai: {
                                    "maixie_defend": true,
                                },
                                sub: true,
                            },
                            he: {
                                mark: true,
                                nopop: true,
                                intro: {
                                    content: "info",
                                },
                                trigger: {
                                    player: "recoverEnd",
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('tiandu'), function (card, player, target) {
                                        return target != player;
                                    }).set('ai', function (target) {
                                        var att = get.attitude(_status.event.player, target);
                                        if (target.isHealthy() && target.countCards('he')) {
                                            return -att;
                                        }
                                        else {
                                            return 10 * att / (1 + target.hp);
                                        }
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('tiandu', target);
                                        target.recover();
                                        if (target.countCards('he', { type: 'equip' })) {
                                            target.chooseToDiscard('he', true, '弃置一张装备牌', function (card) {
                                                return get.type(card) == 'equip';
                                            });
                                        }
                                    }
                                },
                                sub: true,
                            },
                            club: {
                                mark: true,
                                nopop: true,
                                intro: {
                                    content: "info",
                                },
                                mod: {
                                    targetEnabled: function (card, player, target) {
                                        if (get.suit(card) == 'club' && player != target) {
                                            return false;
                                        }
                                    },
                                },
                                sub: true,
                            },
                        },
                    },
                    kivaty: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "damageEnd",
                        },
                        frequent: true,
                        filter: function (event) {
                            return (event.num > 0)
                        },
                        content: function () {
                            "step 0"
                            event.cards = get.cards(1 * trigger.num);
                            "step 1"
                            if (event.cards.length > 1) {
                                player.chooseCardButton('将“遗计”牌分配给任意角色', true, event.cards, [1, event.cards.length]).set('ai', function (button) {
                                    if (ui.selected.buttons.length == 0) return 1;
                                    return 0;
                                });
                            }
                            else if (event.cards.length == 1) {
                                event._result = { links: event.cards.slice(0), bool: true };
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.bool) {
                                for (var i = 0; i < result.links.length; i++) {
                                    event.cards.remove(result.links[i]);
                                }
                                event.togive = result.links.slice(0);
                                player.chooseTarget('将' + get.translation(result.links) + '交给一名角色', true).set('ai', function (target) {
                                    var att = get.attitude(_status.event.player, target);
                                    if (_status.event.enemy) {
                                        return -att;
                                    }
                                    else if (att > 0) {
                                        return att / (1 + target.countCards('h'));
                                    }
                                    else {
                                        return att / 100;
                                    }
                                }).set('enemy', get.value(event.togive[0]) < 0);
                            }
                            "step 3"
                            if (result.targets.length) {
                                result.targets[0].gain(event.togive, 'draw');
                                player.line(result.targets[0], 'green');
                                game.log(result.targets[0], '获得了' + get.cnNumber(event.togive.length) + '张牌');
                                event.goto(1);
                            }
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                        if (!target.hasFriend()) return;
                                        var num = 1;
                                        if (get.attitude(player, target) > 0) {
                                            if (player.needsToDiscard()) {
                                                num = 0.7;
                                            }
                                            else {
                                                num = 0.5;
                                            }
                                        }
                                        if (target.hp >= 4) return [1, num * 2];
                                        if (target.hp == 3) return [1, num * 1.5];
                                        if (target.hp == 2) return [1, num * 0.5];
                                    }
                                },
                            },
                        },
                    },
                    kivaqyc: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBefore",
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            var check;
                            var i, num = game.countPlayer(function (current) {
                                return current != player && current.countCards('h') && get.attitude(player, current) <= 0;
                            });
                            check = (num >= 2);
                            player.chooseTarget(get.prompt('kivaqyc'), [1, 2], function (card, player, target) {
                                return target.countCards('h') > 0 && player != target;
                            }, function (target) {
                                if (!_status.event.aicheck) return 0;
                                var att = get.attitude(_status.event.player, target);
                                if (target.hasSkill('tuntian')) return att / 10;
                                return 1 - att;
                            }).set('aicheck', check);
                            "step 1"
                            if (result.bool) {
                                player.logSkill('kivaqyc', result.targets);
                                player.gainMultiple(result.targets);
                                trigger.cancel();
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            game.delay();
                        },
                        ai: {
                            threaten: 2,
                            expose: 0.3,
                        },
                    },
                    kivazzc: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            global: ["turnOverAfter", "linkAfter"],
                        },
                        filter: function (event, player) {
                            if (event.name == 'link') return event.player.isLinked();
                            return true;
                        },
                        check: function (event, player) {
                            return get.attitude(player, event.player) > 0;
                        },
                        logTarget: "player",
                        content: function () {
                            trigger.player.recover();
                        },
                        ai: {
                            expose: 0.2,
                        },
                    },
                    kivaqmqy: {
                        trigger: {
                            player: "phaseEnd",
                        },
                        audio: "ext:王朝更替_策:1",
                        skillAnimation: true,
                        filter: function (event, player) {
                            return !player.storage.kivaqmqy;
                        },
                        intro: {
                            content: "limited",
                        },
                        mark: true,
                        direct: true,
                        unique: true,
                        content: function () {
                            "step 0"
                            var check = (player.hp == 1 || (player.hp == 2 && player.countCards('h') <= 1));
                            player.chooseTarget(get.prompt('kivaqmqy')).set('ai', function (target) {
                                if (!_status.event.check) return 0;
                                return get.attitude(_status.event.player, target);
                            }).set('check', check);
                            "step 1"
                            if (result.bool) {
                                player.storage.suiren = true;
                                player.awakenSkill('kivaqmqy');
                                player.logSkill('kivaqmqy', result.targets);
                                player.addSkill('shiyong');
                                player.gainMaxHp();
                                player.recover();
                                result.targets[0].addSkill('kivawgz');
                            }
                        },
                    },
                    kivawgz: {
                        enable: "phaseUse",
                        audio: "ext:王朝更替_策:1",
                        usable: 1,
                        filterCard: true,
                        selectCard: [1, Infinity],
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        check: function (card) {
                            if (ui.selected.cards.length) return -1;
                            var val = get.value(card);
                            if (get.type(card) == 'basic') return 8 - get.value(card);
                            return 5 - get.value(card);
                        },
                        filterTarget: function (card, player, target) {
                            return player != target;
                        },
                        content: function () {
                            "step 0"
                            var types = [];
                            for (var i = 0; i < cards.length; i++) {
                                types.add(get.type(cards[i], 'trick'));
                            }
                            target.chooseToDiscard(function (card) {
                                return !_status.event.types.contains(get.type(card, 'trick'));
                            }).set('ai', function (card) {
                                if (_status.event.player.isTurnedOver()) return -1;
                                return 8 - get.value(card);
                            }).set('types', types).set('dialog', ['弃置一张与' + get.translation(player) + '弃置的牌类别均不同的牌，或将武将牌翻面', 'hidden', cards]);
                            "step 1"
                            if (!result.bool) {
                                target.turnOver();
                                target.draw(cards.length);
                            }
                        },
                        ai: {
                            order: 2,
                            expose: 0.3,
                            threaten: 1.8,
                            result: {
                                target: function (player, target) {
                                    if (target.hasSkillTag('noturn')) return 0;
                                    if (target.isTurnedOver()) return 2;
                                    return -1 / (target.countCards('h') + 1);
                                },
                            },
                        },
                    },
                    kivabwxy: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseBegin",
                        },
                        frequent: true,
                        content: function () {
                            player.draw();
                            player.addSkill('tianyi');
                            player.addSkill('wushuang');
                            player.removeSkill('renxin');
                            player.removeSkill('kivaxcxy');
                        },
                    },
                    kivaxcxy: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseEnd",
                        },
                        frequent: true,
                        content: function () {
                            player.draw();
                            player.addSkill('jiang');
                            player.addSkill('kaikang');
                            player.removeSkill('mashu');
                            player.removeSkill('kivabwxy');
                        },
                    },
                    kivagou: {
                        audio: "ext:王朝更替_策:true",
                    },
                    kivash: {
                        trigger: {
                            player: "phaseEnd",
                        },
                        audio: "ext:王朝更替_策:1",
                        frequent: true,
                        filter: function (event, player) {
                            var list = ['wei', 'shu', 'wu', 'qun', 'hankiva', 'tangkiva', 'jinkiva', 'suikiva', 'qinkiva', 'chukiva', 'songkiva', 'liaokiva', 'jinkiva', 'xiakiva', 'xixiakiva', 'shangkiva', 'zhoukiva', 'mingkiva', 'qingkiva', 'nankiva', 'beikiva', 'wushikiva'];
                            var players = game.filterPlayer();
                            var num = 0;
                            for (var i = 0; i < players.length && list.length; i++) {
                                if (list.contains(players[i].group)) {
                                    list.remove(players[i].group);
                                    num++;
                                }
                            }
                            return player.countCards('h') < num;
                        },
                        content: function () {
                            var list = ['wei', 'shu', 'wu', 'qun', 'hankiva', 'tangkiva', 'jinkiva', 'suikiva', 'qinkiva', 'chukiva', 'songkiva', 'liaokiva', 'jinkiva', 'xiakiva', 'xixiakiva', 'shangkiva', 'zhoukiva', 'mingkiva', 'qingkiva', 'nankiva', 'beikiva', 'wushikiva'];
                            var players = game.filterPlayer();
                            var num = 0;
                            for (var i = 0; i < players.length && list.length; i++) {
                                if (list.contains(players[i].group)) {
                                    list.remove(players[i].group);
                                    num++;
                                }
                            }
                            player.draw(num - player.countCards('h'));
                        },
                        ai: {
                            threaten: 1.3,
                        },
                    },
                    kivadz: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseDrawBefore",
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            var check;
                            var i, num = game.countPlayer(function (current) {
                                return current != player && current.countCards('h') && get.attitude(player, current) <= 0;
                            });
                            check = (num >= 7);
                            player.chooseTarget(get.prompt('kivadz'), [1, 7], function (card, player, target) {
                                return target.countCards('h') > 0 && player != target;
                            }, function (target) {
                                if (!_status.event.aicheck) return 0;
                                var att = get.attitude(_status.event.player, target);
                                if (target.hasSkill('tuntian')) return att / 10;
                                return 1 - att;
                            }).set('aicheck', check);
                            "step 1"
                            if (result.bool) {
                                player.logSkill('kivadz', result.targets);
                                player.gainMultiple(result.targets);
                                trigger.cancel();
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            game.delay();
                        },
                        ai: {
                            threaten: 7,
                            expose: 0.3,
                        },
                    },
                    kivajsh: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "dieBegin",
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('kivajsh'), function (card, player, target) {
                                return player != target && _status.event.source != target;
                            }).set('ai', function (target) {
                                var num = get.attitude(_status.event.player, target);
                                if (num > 0) {
                                    if (target.hp == 1) {
                                        num += 2;
                                    }
                                    if (target.hp < target.maxHp) {
                                        num += 2;
                                    }
                                }
                                return num;
                            }).set('source', trigger.source);
                            "step 1"
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('kivajsh', target);
                                target.addSkill('benghuai');
                            }
                        },
                        ai: {
                            expose: 0.5,
                        },
                    },
                    kivakh: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            global: "shaBegin",
                        },
                        filter: function (event, player) {
                            return get.distance(player, event.target) <= 1;
                        },
                        check: function (event, player) {
                            return get.attitude(player, event.target) >= 0;
                        },
                        content: function () {
                            "step 0"
                            player.draw(2);
                            player.gainMaxHp();
                            player.addSkill('rerende');
                            if (trigger.target != player) {
                                player.chooseCard(true, 'he', '交给' + get.translation(trigger.target) + '一张牌').set('ai', function (card) {
                                    if (get.position(card) == 'e') return -1;
                                    if (card.name == 'shan') return 1;
                                    if (get.type(card) == 'equip') return 0.5;
                                    return 0;
                                });
                            }
                            else {
                                event.finish();
                            }
                            "step 1"
                            trigger.target.gain(result.cards, player);
                            player.$give(result.cards, trigger.target);
                            game.delay();
                            event.card = result.cards[0];
                            if (get.type(event.card) != 'equip') event.finish();
                            "step 2"
                            if (!trigger.target.isMin()) {
                                trigger.target.chooseBool('是否装备' + get.translation(event.card) + '？').set('ai', function () {
                                    var current = _status.event.player.getCards('e', { subtype: get.subtype(_status.event.card) });
                                    if (current && current.length) {
                                        return get.equipValue(event.card) > get.equipValue(current[0]);
                                    }
                                    return true;
                                }).set('card', event.card);
                            }
                            else {
                                event.finish();
                            }
                            "step 3"
                            if (result.bool) {
                                trigger.target.equip(event.card);
                            }
                        },
                        ai: {
                            threaten: 1.1,
                        },
                    },
                    kivaljlj: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "ext:王朝更替_策:1",
                        position: "he",
                        filterCard: function (card) {
                            return card.name == 'wanjian' || get.type(card) == 'equip';
                        },
                        filter: function (event, player) {
                            return player.countCards('h', 'wanjian') > 0 || player.countCards('he', { type: 'equip' }) > 0;
                        },
                        check: function (card) { return 8 - get.value(card) },
                        selectTarget: 2,
                        multitarget: true,
                        discard: false,
                        targetprompt: ["休养生息，实为良策。", "焚书坑儒，万万不可！"],
                        prepare: "give",
                        filterTarget: function (card, player, target) {
                            if (ui.selected.targets.length == 0) {
                                return player != target;
                            }
                            else {
                                return lib.filter.filterTarget({ name: 'wanjian' }, ui.selected.targets[0], target);
                            }
                        },
                        content: function () {
                            "step 0"
                            targets[0].gain(cards, player);
                            "step 1"
                            targets[0].chooseControl('draw_card', '焚书坑儒', function () {
                                var player = _status.event.player;
                                var target = _status.event.target;
                                if (get.effect(_status.event.target, { name: 'wanjian' }, player, player) > 0) {
                                    return 1;
                                }
                                return 0;
                            }).set('target', targets[1]).set('prompt', '对' + get.translation(targets[1]) + '使用一张万箭，或摸两张牌');
                            "step 2"
                            if (result.control == 'draw_card') {
                                targets[0].draw(2);
                            }
                            else {
                                targets[0].useCard({ name: 'wanjian' }, targets[1]);
                            }
                        },
                        ai: {
                            result: {
                                player: function (player) {
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] != player && get.attitude(player, players[i]) > 1 && get.attitude(players[i], player) > 1) {
                                            return 1;
                                        }
                                    }
                                    return 0;
                                },
                                target: function (player, target) {
                                    if (ui.selected.targets.length) {
                                        return -0.1;
                                    }
                                    return 1;
                                },
                            },
                            order: 8.5,
                            expose: 0.2,
                        },
                    },
                    "kivaFa♂": {
                        audio: "ext:王朝更替_策:false",
                        trigger: {
                            player: "damageAfter",
                            source: "damageAfter",
                        },
                        forced: true,
                        popup: false,
                        filter: function (event, player) {
                            return event.parent.skill == 'kivaljlj';
                        },
                        content: function () {
                            player.storage.kivamo = trigger.player;
                        },
                    },
                    kivamo: {
                        audio: "ext:王朝更替_策:false",
                        trigger: {
                            player: "phaseBefore",
                        },
                        silent: true,
                        content: function () {
                            player.storage.kivaljlj = 0;
                        },
                        forced: true,
                        popup: false,
                    },
                    kivanian: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "loseEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (player.countCards('h')) return false;
                            for (var i = 0; i < event.cards.length; i++) {
                                if (event.cards[i].original == 'h') return true;
                            }
                            return false;
                        },
                        content: function () { },
                    },
                    kivasxx: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseDiscardEnd",
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            var check;
                            var i, num = game.countPlayer(function (current) {
                                return current != player && current.countCards('h') && get.attitude(player, current) <= 0;
                            });
                            check = (num >= 1);
                            player.chooseTarget(get.prompt('kivasxx'), [1, 1], function (card, player, target) {
                                return target.countCards('h') > 0 && player != target;
                            }, function (target) {
                                if (!_status.event.aicheck) return 0;
                                var att = get.attitude(_status.event.player, target);
                                if (target.hasSkill('tuntian')) return att / 10;
                                return 1 - att;
                            }).set('aicheck', check);
                            "step 1"
                            if (result.bool) {
                                player.logSkill('kivasxx', result.targets);
                                player.gainMultiple(result.targets);
                                trigger.cancel();
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            game.delay();
                        },
                        ai: {
                            threaten: 1,
                            expose: 0.3,
                        },
                    },
                    kivajyy: {
                        unique: true,
                        trigger: {
                            player: "damageEnd",
                        },
                        animationColor: "fire",
                        skillAnimation: "legend",
                        filter: function (event, player) {
                            return !player.storage.kivajyy;
                        },
                        init: function (player) {
                            player.storage.kivajyy = false;
                        },
                        mark: true,
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivajyy'), function (card, player, target) {
                                return target.sex == 'male' && target != player;
                            }).set('ai', function (target) {
                                if (!_status.event.goon) return 0;
                                var player = _status.event.player;
                                var att = get.attitude(player, target);
                                if (att <= 1) return 0;
                                var mode = get.mode();
                                if (mode == 'identity' || (mode == 'versus' && _status.mode == 'four')) {
                                    if (target.name && lib.character[target.name]) {
                                        for (var i = 0; i < lib.character[target.name][3].length; i++) {
                                            if (lib.skill[lib.character[target.name][3][i]].zhuSkill) {
                                                return att * 2;
                                            }
                                        }
                                    }
                                }
                                return att;
                            }).set('goon', !player.hasUnknown());
                            'step 1'
                            if (result.bool) {
                                player.awakenSkill('kivajyy');
                                player.storage.kivajyy = true;
                                player.logSkill('kivajyy', result.targets);
                                var target = result.targets[0];
                                target.addSkill('tianyi');
                                var mode = get.mode();
                                if (mode == 'identity' || (mode == 'versus' && _status.mode == 'four')) {
                                    if (target.name && lib.character[target.name]) {
                                        var skills = lib.character[target.name][3];
                                        target.storage.zhuSkill_kivajyy = [];
                                        for (var i = 0; i < skills.length; i++) {
                                            var info = lib.skill[skills[i]];
                                            if (info.zhuSkill) {
                                                target.storage.zhuSkill_kivajyy.push(skills[i]);
                                                if (info.init) {
                                                    info.init(target);
                                                }
                                                if (info.init2) {
                                                    info.init2(target);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        ai: {
                            expose: 0.2,
                        },
                        intro: {
                            content: "limited",
                        },
                    },
                    kivagy: {
                        audio: "ext:王朝更替_策:2",
                        mod: {
                            targetEnabled: function (card, player, target, now) {
                                if (target.countCards('h') == 0) {
                                    if (card.name == 'nanman' || card.name == 'wanjian' || card.name == 'sha' || card.name == 'juedou') return false;
                                }
                            },
                        },
                        group: "kivanian",
                        ai: {
                            noh: true,
                            skillTagFilter: function (player, tag) {
                                if (tag == 'noh') {
                                    if (player.countCards('h') != 1) return false;
                                }
                            },
                        },
                    },
                    kivazb: {
                        audio: "ext:王朝更替_策:2",
                        audioname: ["jiangwei"],
                        trigger: {
                            player: "phaseEnd",
                        },
                        frequent: true,
                        content: function () {
                            'step 0'
                            event.num = Math.min(5, game.countPlayer());
                            event.cards = get.cards(event.num);
                            event.chosen = [];
                            'step 1'
                            var js = player.getCards('j');
                            var pos;
                            var choice = -1;
                            var getval = function (card, pos) {
                                if (js[pos]) {
                                    return (get.judge(js[pos]))(card);
                                }
                                else {
                                    return get.value(card);
                                }
                            };
                            for (pos = 0; pos < Math.min(event.cards.length, js.length + 2); pos++) {
                                var max = getval(event.cards[pos], pos);
                                for (var j = pos + 1; j < event.cards.length; j++) {
                                    var current = getval(event.cards[j], pos);
                                    if (current > max) {
                                        choice = j;
                                        max = current;
                                    }
                                }
                                if (choice != -1) {
                                    break;
                                }
                            }
                            player.chooseCardButton('占卜：选择要移动的牌', event.cards).set('filterButton', function (button) {
                                return !_status.event.chosen.contains(button.link);
                            }).set('chosen', event.chosen).set('ai', function (button) {
                                return button.link == _status.event.choice ? 1 : 0;
                            }).set('choice', event.cards[choice]);
                            event.pos = pos;
                            'step 2'
                            if (result.bool) {
                                var card = result.links[0];
                                var index = event.cards.indexOf(card);
                                event.card = card;
                                event.chosen.push(card);
                                event.cards.remove(event.card);
                                var buttons = event.cards.slice(0);
                                player.chooseControl(function () {
                                    return _status.event.controlai;
                                }).set('controlai', event.pos || 0).set('sortcard', buttons).set('tosort', card);
                            }
                            else {
                                event.goto(4);
                            }
                            'step 3'
                            if (typeof result.index == 'number') {
                                if (result.index > event.cards.length) {
                                    ui.cardPile.appendChild(event.card);
                                }
                                else {
                                    event.cards.splice(result.index, 0, event.card);
                                }
                                event.num--;
                                if (event.num > 0) {
                                    event.goto(1);
                                }
                            }
                            'step 4'
                            while (event.cards.length) {
                                ui.cardPile.insertBefore(event.cards.pop(), ui.cardPile.firstChild);
                            }
                            var js = player.getCards('j');
                            if (js.length == 1) {
                                if ((get.judge(js[0]))(ui.cardPile.firstChild) < 0) {
                                    player.addTempSkill('kivazb_fail');
                                }
                            }
                        },
                        ai: {
                            kivazb: true,
                        },
                    },
                    kivaqy: {
                        trigger: {
                            player: "loseEnd",
                        },
                        audio: "ext:王朝更替_策:2",
                        frequent: true,
                        filter: function (event, player) {
                            if (player.countCards('h')) return false;
                            for (var i = 0; i < event.cards.length; i++) {
                                if (event.cards[i].original == 'h') return true;
                            }
                            return false;
                        },
                        content: function () {
                            player.draw(3);
                        },
                        ai: {
                            effect: {
                                target: function (card) {
                                    if (card.name == 'guohe' || card.name == 'liuxinghuoyu') return 0.5;
                                },
                            },
                        },
                    },
                    kivalm: {
                        trigger: {
                            player: ["phaseBefore", "changeHp"],
                        },
                        forced: true,
                        popup: false,
                        unique: true,
                        derivation: ["bazhen", "gongxin", "kanpo", "guanxing", "wansha", "lianpo"],
                        content: function () {
                            player.removeAdditionalSkill('kivalm');
                            var list = [];
                            if (player.hp <= 3) {
                                list.push('bazhen');
                            }
                            if (player.hp <= 3) {
                                list.push('guanxing');
                            }
                            if (player.hp <= 2) {
                                list.push('gongxin');
                            }
                            if (player.hp <= 2) {
                                list.push('kanpo');
                            }
                            if (player.hp <= 1) {
                                list.push('wansha');
                            }
                            if (player.hp <= 1) {
                                list.push('lianpo');
                            }
                            if (list.length) {
                                player.addAdditionalSkill('kivalm', list);
                            }
                        },
                        ai: {
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (!target.hasFriend()) return;
                                        if (target.hp >= 4) return [0, 1];
                                    }
                                    if (get.tag(card, 'recover') && player.hp >= player.maxHp - 1) return [0, 0];
                                },
                            },
                        },
                    },
                    kivayr: {
                        trigger: {
                            player: ["phaseBefore", "changeHp"],
                        },
                        forced: true,
                        popup: false,
                        unique: true,
                        derivation: ["tiaoxin", "juejing", "reyingzi", "yeyan"],
                        content: function () {
                            player.removeAdditionalSkill('kivayr');
                            var list = [];
                            if (player.hp <= 2) {
                                list.push('tiaoxin');
                            }
                            if (player.hp <= 1) {
                                list.push('juejing');
                            }
                            if (player.hp <= 2) {
                                list.push('reyingzi');
                            }
                            if (player.hp <= 1) {
                                list.push('yeyan');
                            }
                            if (list.length) {
                                player.addAdditionalSkill('kivayr', list);
                            }
                        },
                        ai: {
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (!target.hasFriend()) return;
                                        if (target.hp >= 4) return [0, 1];
                                    }
                                    if (get.tag(card, 'recover') && player.hp >= player.maxHp - 1) return [0, 0];
                                },
                            },
                        },
                    },
                    kivaccjj: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            global: "shaBegin",
                        },
                        filter: function (event, player) {
                            return get.distance(player, event.target) <= 1;
                        },
                        check: function (event, player) {
                            return get.attitude(player, event.target) >= 0;
                        },
                        content: function () {
                            "step 0"
                            player.draw(3);
                            if (trigger.target != player) {
                                player.chooseCard(true, 'he', '交给' + get.translation(trigger.target) + '一张牌').set('ai', function (card) {
                                    if (get.position(card) == 'e') return -4;
                                    if (card.name == 'shan') return 4;
                                    if (get.type(card) == 'equip') return 0.5;
                                    return 0;
                                });
                            }
                            else {
                                event.finish();
                            }
                            "step 1"
                            trigger.target.gain(result.cards, player);
                            player.$give(result.cards, trigger.target);
                            game.delay();
                            event.card = result.cards[0];
                            if (get.type(event.card) != 'equip') event.finish();
                            "step 2"
                            if (!trigger.target.isMin()) {
                                trigger.target.chooseBool('是否装备' + get.translation(event.card) + '？').set('ai', function () {
                                    var current = _status.event.player.getCards('e', { subtype: get.subtype(_status.event.card) });
                                    if (current && current.length) {
                                        return get.equipValue(event.card) > get.equipValue(current[0]);
                                    }
                                    return true;
                                }).set('card', event.card);
                            }
                            else {
                                event.finish();
                            }
                            "step 3"
                            if (result.bool) {
                                trigger.target.equip(event.card);
                            }
                        },
                        ai: {
                            threaten: 1.1,
                        },
                    },
                    kivacctc: {
                        trigger: {
                            player: "duBegin",
                        },
                        audio: "ext:王朝更替_策:1",
                        forced: true,
                        content: function () {
                            player.draw(1);
                            player.addTeamSkill('reqixi');
                        },
                        ai: {
                            threaten: 1.2,
                            nodu: true,
                            usedu: true,
                        },
                        group: "moxie2",
                    },
                    kivacclj: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "damageEnd",
                        },
                        forced: true,
                        check: function () {
                            return false;
                        },
                        filter: function (event, player) {
                            return event.card && event.card.name == 'sha' && (get.color(event.card) == 'red' || event.source.hasSkill('jiu'));
                        },
                        content: function () {
                            player.gainMaxHp();
                            player.addSkill('moxie');
                        },
                    },
                    kivacccl: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "damageEnd",
                        },
                        filter: function (event, player) {
                            return event.source && event.source.isIn() && event.source != player && !event.source.hasJudge('bingliang');
                        },
                        check: function (event, player) {
                            return get.attitude(player, event.source) <= 0;
                        },
                        logTarget: "source",
                        content: function () {
                            var card = game.createCard('bingliang');
                            trigger.source.addJudge(card);
                            trigger.source.$draw(card);
                            game.delay();
                        },
                        ai: {
                            "maixie_defend": true,
                        },
                    },
                    kivaccjs: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (player.isLinked()) return true;
                            return game.hasPlayer(function (current) {
                                return current != player && !current.isLinked();
                            });
                        },
                        content: function () {
                            "step 0"
                            event.targets = game.filterPlayer();
                            event.targets.remove(player);
                            event.targets.sort(lib.sort.seat);
                            if (player.isLinked()) player.link();
                            "step 1"
                            if (event.targets.length) {
                                var target = event.targets.shift();
                                if (!target.isLinked()) {
                                    target.link();
                                    player.line(target, 'green');
                                }
                                event.redo();
                            }
                        },
                    },
                    kivatl: {
                        enable: "chooseToUse",
                        filter: function (event, player) {
                            return player.countCards('e') > 0;
                        },
                        filterCard: true,
                        position: "e",
                        viewAs: {
                            name: "shunshou",
                        },
                        prompt: "将一张装备区内的牌当顺手牵羊使用",
                        check: function (card) {
                            var player = _status.currentPhase;
                            if (player.countCards('he', { subtype: get.subtype(card) }) > 1) {
                                return 11 - get.equipValue(card);
                            }
                            if (player.countCards('h') < player.hp) {
                                return 6 - get.value(card);
                            }
                            return 2 - get.equipValue(card);
                        },
                        ai: {
                            order: 9,
                            threaten: 1.1,
                            wuxie: function (target, card, player, viewer) {
                                if (get.attitude(viewer, target) > 0 && target.countCards('h', 'sha')) {
                                    if (!target.countCards('h') || target.hp == 1 || Math.random() < 0.7) return 0;
                                }
                            },
                            basic: {
                                order: 9,
                                useful: [5, 1],
                                value: 5,
                            },
                            result: {
                                target: function (player, target) {
                                    if (player.hasUnknown(2) && get.mode() != 'guozhan') return 0;
                                    var nh = target.countCards('h');
                                    if (get.mode() == 'identity') {
                                        if (target.isZhu && nh <= 2 && target.hp <= 1) return -100;
                                    }
                                    if (nh == 0) return -2;
                                    if (nh == 1) return -1.7
                                    return -1.5;
                                },
                                player: function (player, target) {
                                    if (get.attitude(player, target) < 0 && !target.countCards('he')) {
                                        return 0;
                                    }
                                    if (get.attitude(player, target) > 1) {
                                        var js = target.getCards('j');
                                        if (js.length) {
                                            var jj = js[0].viewAs ? { name: js[0].viewAs } : js[0];
                                            if (jj.name == 'shunshou') return 1;
                                            if (js.length == 1 && get.effect(target, jj, target, player) >= 0) {
                                                return 0;
                                            }
                                            return 1;
                                        }
                                        return 0;
                                    }
                                    return 1;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondSha: 1,
                                damage: 1,
                                multitarget: 1,
                                multineg: 1,
                                loseCard: 1,
                                gain: 1,
                            },
                        },
                    },
                    kivags: {
                        mod: {
                            globalFrom: function (from, to, distance) {
                                return distance - 5;
                            },
                        },
                    },
                    kivayys: {
                        unique: true,
                        mod: {
                            selectTarget: function (card, player, range) {
                                if (range[1] == -1) return;
                                if (player.getEquip(1)) return;
                                if (card.name == 'shunshou') range[1] += 2;
                            },
                            cardUsable: function (card, player, num) {
                                if (player.getEquip(1)) return;
                                if (card.name == 'sha') return num + 1;
                            },
                        },
                        ai: {
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.subtype(card) == 'equip1') return -1;
                                },
                            },
                        },
                    },
                    kivagod: {
                        mod: {
                            targetEnabled: function (card, player, target, now) {
                                if (card.name == 'shunshou' || card.name == 'lebu' || card.name == 'bingliang' || card.name == 'guohe' || card.name == 'sha' || card.name == 'nanman' || card.name == 'wanjian') return false;
                            },
                        },
                    },
                    kivawm: {
                        trigger: {
                            global: "phaseBefore",
                        },
                        forced: true,
                        priority: 10,
                        audio: "ext:王朝更替_策:2",
                        filter: function (event, player) {
                            return !player.storage.kivawm;
                        },
                        content: function () {
                            'step 0'
                            player.storage.zongzuo = true;
                            var list = ['wei', 'shu', 'wu', 'qun', 'qinkiva', 'chukiva', 'hankiva', 'jinkiva', 'nanbeikiva', 'suikiva', 'tangkiva', 'wushikiva', 'songkiva', 'liaokiva', 'xixiakiva', 'sankiva', 'jinkiva', 'yuankiva', 'mingkiva', 'qingkiva', 'minkiva', 'zhongguokiva'];
                            var num = game.countPlayer(function (current) {
                                if (list.contains(current.group)) {
                                    list.remove(current.group);
                                    return true;
                                }
                            });
                            player.gainMaxHp(num);
                            event.num = num;
                            'step 1'
                            player.hp += event.num;
                            player.update();
                        },
                        group: "zongzuo_lose",
                        subSkill: {
                            lose: {
                                trigger: {
                                    global: "dieAfter",
                                },
                                forced: true,
                                audio: "zongzuo",
                                filter: function (event, player) {
                                    var list = ['wei', 'shu', 'wu', 'qun', 'qinkiva', 'chukiva', 'hankiva', 'jinkiva', 'nanbeikiva', 'suikiva', 'tangkiva', 'wushikiva', 'songkiva', 'liaokiva', 'xixiakiva', 'sankiva', 'jinkiva', 'yuankiva', 'mingkiva', 'qingkiva', 'minkiva', 'zhongguokiva'];
                                    if (!list.contains(event.player.group)) return false;
                                    if (game.hasPlayer(function (current) {
                                        return current.group == event.player.group;
                                    })) {
                                        return false;
                                    }
                                    return true;
                                },
                                content: function () {
                                    player.loseMaxHp();
                                },
                                sub: true,
                            },
                        },
                    },
                    kivaxwx: {
                        trigger: {
                            player: "phaseBegin",
                        },
                        skillAnimation: true,
                        filter: function (event, player) {
                            return !player.storage.kivaxwx;
                        },
                        intro: {
                            content: "limited",
                        },
                        mark: true,
                        direct: true,
                        unique: true,
                        content: function () {
                            "step 0"
                            var check = (player.hp == 1 || (player.hp == 2 && player.countCards('h') <= 1));
                            player.chooseTarget(get.prompt('kivaxwx')).set('ai', function (target) {
                                if (!_status.event.check) return 0;
                                return get.attitude(_status.event.player, target);
                            }).set('check', check);
                            "step 1"
                            if (result.bool) {
                                player.storage.suiren = true;
                                player.awakenSkill('kivaxwx');
                                player.logSkill('kivaxwx', result.targets);
                                result.targets[0].addSkill('kivaxbr100');
                                result.targets[0].addSkill('kivaxxx');
                                result.targets[0].gainMaxHp(4);
                                result.targets[0].recover(4);
                                player.gainMaxHp();
                                player.recover();
                                result.targets[0].draw(3);
                            }
                        },
                    },
                    kivaxxx: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        check: function () {
                            return false;
                        },
                        filter: function (event, player) {
                            return !player.isMinHp();
                        },
                        content: function () {
                            "step 0"
                            player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                if (player.hp == player.maxHp) return 'baonue_hp';
                                if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                return 'baonue_hp';
                            });
                            "step 1"
                            if (result.control == 'baonue_hp') {
                                player.loseHp();
                            }
                            else {
                                player.loseMaxHp(true);
                            }
                        },
                        ai: {
                            threaten: 0.5,
                            neg: true,
                        },
                        audioname: ["zhugedan"],
                    },
                    "kivaxbr100": {
                        audio: "ext:王朝更替_策:true",
                        trigger: {
                            player: ["gainMaxHpEnd", "loseMaxHpEnd"],
                        },
                        forced: true,
                        content: function () {
                            player.draw(2);
                        },
                    },
                    kivadzx: {
                        trigger: {
                            player: "shaBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.hp > 0;
                        },
                        content: function () {
                            'step 0'
                            event.cards = get.cards(game.countPlayer());
                            event.chosen = [];
                            event.num = player.hp;
                            'step 1'
                            var js = player.getCards('j');
                            var pos;
                            var choice = -1;
                            var getval = function (card, pos) {
                                if (js[pos]) {
                                    return (get.judge(js[pos]))(card);
                                }
                                else {
                                    return get.value(card);
                                }
                            };
                            for (pos = 0; pos < Math.min(event.cards.length, js.length + 2); pos++) {
                                var max = getval(event.cards[pos], pos);
                                for (var j = pos + 1; j < event.cards.length; j++) {
                                    var current = getval(event.cards[j], pos);
                                    if (current > max) {
                                        choice = j;
                                        max = current;
                                    }
                                }
                                if (choice != -1) {
                                    break;
                                }
                            }
                            player.chooseCardButton('毒宗：选择要移动的牌（还能移动' + event.num + '张）', event.cards).set('filterButton', function (button) {
                                return !_status.event.chosen.contains(button.link);
                            }).set('chosen', event.chosen).set('ai', function (button) {
                                return button.link == _status.event.choice ? 1 : 0;
                            }).set('choice', event.cards[choice]);
                            event.pos = pos;
                            'step 2'
                            if (result.bool) {
                                var card = result.links[0];
                                var index = event.cards.indexOf(card);
                                event.card = card;
                                event.chosen.push(card);
                                event.cards.remove(event.card);
                                var buttons = event.cards.slice(0);
                                player.chooseControl(function () {
                                    return _status.event.controlai;
                                }).set('controlai', event.pos || 0).set('sortcard', buttons).set('tosort', card);
                            }
                            else {
                                event.goto(4);
                            }
                            'step 3'
                            if (typeof result.index == 'number') {
                                if (result.index > event.cards.length) {
                                    ui.cardPile.appendChild(event.card);
                                }
                                else {
                                    event.cards.splice(result.index, 0, event.card);
                                }
                                event.num--;
                                if (event.num > 0) {
                                    event.goto(1);
                                }
                            }
                            'step 4'
                            while (event.cards.length) {
                                ui.cardPile.insertBefore(event.cards.pop(), ui.cardPile.firstChild);
                            }
                            var js = player.getCards('j');
                            if (js.length == 1) {
                                if ((get.judge(js[0]))(ui.cardPile.firstChild) < 0) {
                                    player.addTempSkill('guanxing_fail');
                                }
                            }
                        },
                        ai: {
                            guanxing: true,
                        },
                    },
                    kivadxx: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                        },
                        frequent: true,
                        filter: function (event) {
                            return (event.num > 0)
                        },
                        content: function () {
                            "step 0"
                            event.cards = get.cards(1 * trigger.num);
                            "step 1"
                            if (event.cards.length > 1) {
                                player.chooseCardButton('将“独秀”牌分配给任意角色', true, event.cards, [1, event.cards.length]).set('ai', function (button) {
                                    if (ui.selected.buttons.length == 0) return 1;
                                    return 0;
                                });
                            }
                            else if (event.cards.length == 1) {
                                event._result = { links: event.cards.slice(0), bool: true };
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.bool) {
                                for (var i = 0; i < result.links.length; i++) {
                                    event.cards.remove(result.links[i]);
                                }
                                event.togive = result.links.slice(0);
                                player.chooseTarget('将' + get.translation(result.links) + '交给一名角色', true).set('ai', function (target) {
                                    var att = get.attitude(_status.event.player, target);
                                    if (_status.event.enemy) {
                                        return -att;
                                    }
                                    else if (att > 0) {
                                        return att / (1 + target.countCards('h'));
                                    }
                                    else {
                                        return att / 100;
                                    }
                                }).set('enemy', get.value(event.togive[0]) < 0);
                            }
                            "step 3"
                            if (result.targets.length) {
                                result.targets[0].gain(event.togive, 'draw');
                                player.line(result.targets[0], 'green');
                                game.log(result.targets[0], '获得了' + get.cnNumber(event.togive.length) + '张牌');
                                event.goto(1);
                            }
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                        if (!target.hasFriend()) return;
                                        var num = 1;
                                        if (get.attitude(player, target) > 0) {
                                            if (player.needsToDiscard()) {
                                                num = 0.7;
                                            }
                                            else {
                                                num = 0.5;
                                            }
                                        }
                                        if (target.hp >= 4) return [1, num * 2];
                                        if (target.hp == 3) return [1, num * 1.5];
                                        if (target.hp == 2) return [1, num * 0.5];
                                    }
                                },
                            },
                        },
                    },
                    kivakqq: {
                        unique: true,
                        trigger: {
                            player: "damageEnd",
                        },
                        animationColor: "fire",
                        skillAnimation: "legend",
                        filter: function (event, player) {
                            return !player.storage.kivakqq;
                        },
                        init: function (player) {
                            player.storage.kivakqq = false;
                        },
                        mark: true,
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivakqq'), function (card, player, target) {
                                return target.sex == 'male' && target != player;
                            }).set('ai', function (target) {
                                if (!_status.event.goon) return 0;
                                var player = _status.event.player;
                                var att = get.attitude(player, target);
                                if (att <= 1) return 0;
                                var mode = get.mode();
                                if (mode == 'identity' || (mode == 'versus' && _status.mode == 'four')) {
                                    if (target.name && lib.character[target.name]) {
                                        for (var i = 0; i < lib.character[target.name][3].length; i++) {
                                            if (lib.skill[lib.character[target.name][3][i]].zhuSkill) {
                                                return att * 2;
                                            }
                                        }
                                    }
                                }
                                return att;
                            }).set('goon', !player.hasUnknown());
                            'step 1'
                            if (result.bool) {
                                player.awakenSkill('kivakqq');
                                player.storage.kivakqq = true;
                                player.logSkill('kivakqq', result.targets);
                                var target = result.targets[0];
                                target.addSkill('kivaqlq');
                                var mode = get.mode();
                                if (mode == 'identity' || (mode == 'versus' && _status.mode == 'four')) {
                                    if (target.name && lib.character[target.name]) {
                                        var skills = lib.character[target.name][3];
                                        target.storage.zhuSkill_kivakqq = [];
                                        for (var i = 0; i < skills.length; i++) {
                                            var info = lib.skill[skills[i]];
                                            if (info.zhuSkill) {
                                                target.storage.zhuSkill_kivakqq.push(skills[i]);
                                                if (info.init) {
                                                    info.init(target);
                                                }
                                                if (info.init2) {
                                                    info.init2(target);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        ai: {
                            expose: 0.2,
                        },
                        intro: {
                            content: "limited",
                        },
                    },
                    kivakyq: {
                        trigger: {
                            player: "phaseBegin",
                        },
                        skillAnimation: true,
                        filter: function (event, player) {
                            return !player.storage.kivakyq;
                        },
                        intro: {
                            content: "limited",
                        },
                        mark: true,
                        direct: true,
                        unique: true,
                        content: function () {
                            "step 0"
                            var check = (player.hp == 1 || (player.hp == 2 && player.countCards('h') <= 1));
                            player.chooseTarget(get.prompt('kivakyq')).set('ai', function (target) {
                                if (!_status.event.check) return 0;
                                return get.attitude(_status.event.player, target);
                            }).set('check', check);
                            "step 1"
                            if (result.bool) {
                                player.storage.suiren = true;
                                player.awakenSkill('kivakyq');
                                player.logSkill('kivakyq', result.targets);
                                player.draw();
                                result.targets[0].addSkill('kivayzq');
                            }
                        },
                    },
                    kivakxq: {
                        audio: "ext:王朝更替_策:2",
                        audioname: ["heqi", "sunce"],
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num++;
                        },
                        ai: {
                            threaten: 1.5,
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                if (player.hp < player.maxHp) return num + player.maxHp - player.hp;
                            },
                        },
                    },
                    kivayzq: {
                        trigger: {
                            player: "useCard",
                        },
                        audio: "ext:王朝更替_策:2",
                        forced: true,
                        audioname: ["re_zhangfei", "guanzhang", "xiahouba"],
                        filter: function (event, player) {
                            if (_status.currentPhase != player) return false;
                            if (event.parent.parent.name != 'phaseUse') return false;
                            if (event.skill == 'qinglong_skill') return false;
                            return (event.card.name == 'sha' && player.hasSkill('kivayzq') && player.getStat().card.sha > 1);
                        },
                        content: function () { },
                        mod: {
                            cardUsable: function (card, player, num) {
                                if (card.name == 'sha') return Infinity;
                            },
                        },
                        ai: {
                            unequip: true,
                            skillTagFilter: function (player, tag, arg) {
                                if (!get.zhu(player, 'shouyue')) return false;
                                if (arg && arg.name == 'sha') return true;
                                return false;
                            },
                        },
                    },
                    kivaqlq: {
                        unique: true,
                        gainable: true,
                        group: ["yinghun", "xunxun", "tuxi", "biyue", "zhanjue", "chouhai"],
                    },
                    kivawwm: {
                        trigger: {
                            player: "taoBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.hp > 0;
                        },
                        content: function () {
                            'step 0'
                            event.cards = get.cards(game.countPlayer());
                            event.chosen = [];
                            event.num = player.hp;
                            'step 1'
                            var js = player.getCards('j');
                            var pos;
                            var choice = -1;
                            var getval = function (card, pos) {
                                if (js[pos]) {
                                    return (get.judge(js[pos]))(card);
                                }
                                else {
                                    return get.value(card);
                                }
                            };
                            for (pos = 0; pos < Math.min(event.cards.length, js.length + 2); pos++) {
                                var max = getval(event.cards[pos], pos);
                                for (var j = pos + 1; j < event.cards.length; j++) {
                                    var current = getval(event.cards[j], pos);
                                    if (current > max) {
                                        choice = j;
                                        max = current;
                                    }
                                }
                                if (choice != -1) {
                                    break;
                                }
                            }
                            player.chooseCardButton('武王：选择要移动的牌（还能移动' + event.num + '张）', event.cards).set('filterButton', function (button) {
                                return !_status.event.chosen.contains(button.link);
                            }).set('chosen', event.chosen).set('ai', function (button) {
                                return button.link == _status.event.choice ? 1 : 0;
                            }).set('choice', event.cards[choice]);
                            event.pos = pos;
                            'step 2'
                            if (result.bool) {
                                var card = result.links[0];
                                var index = event.cards.indexOf(card);
                                event.card = card;
                                event.chosen.push(card);
                                event.cards.remove(event.card);
                                var buttons = event.cards.slice(0);
                                player.chooseControl(function () {
                                    return _status.event.controlai;
                                }).set('controlai', event.pos || 0).set('sortcard', buttons).set('tosort', card);
                            }
                            else {
                                event.goto(4);
                            }
                            'step 3'
                            if (typeof result.index == 'number') {
                                if (result.index > event.cards.length) {
                                    ui.cardPile.appendChild(event.card);
                                }
                                else {
                                    event.cards.splice(result.index, 0, event.card);
                                }
                                event.num--;
                                if (event.num > 0) {
                                    event.goto(1);
                                }
                            }
                            'step 4'
                            while (event.cards.length) {
                                ui.cardPile.insertBefore(event.cards.pop(), ui.cardPile.firstChild);
                            }
                            var js = player.getCards('j');
                            if (js.length == 1) {
                                if ((get.judge(js[0]))(ui.cardPile.firstChild) < 0) {
                                    player.addTempSkill('guanxing_fail');
                                }
                            }
                        },
                        ai: {
                            guanxing: true,
                        },
                    },
                    kivazsm: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "recoverAfter",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return _status.currentPhase == event.player;
                        },
                        content: function () {
                            'step 0'
                            if (player == trigger.player) {
                                player.chooseControl('摸一张', '摸一张', 'cancel2', function () {
                                    return '摸一张';
                                }).set('prompt', get.prompt('kivazsm'));
                                event.single = true;
                            }
                            else {
                                player.chooseTarget(get.prompt('kivazsm'), function (card, player, target) {
                                    return target == _status.event.player || target == _status.event.target;
                                }).set('target', trigger.player).set('ai', function (target) {
                                    var player = _status.event.player;
                                    if (player == target) return 1;
                                    return get.attitude(player, target) - 1.5;
                                });
                            }
                            'step 1'
                            if (event.single) {
                                if (result.control != 'cancel2') {
                                    player.logSkill('kivazsm', player);
                                    if (result.control == '摸一张') {
                                        player.draw();
                                    }
                                    else {
                                        player.draw();
                                        player.storage.kivazsm = player;
                                    }
                                }
                            }
                            else if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('kivazsm', target);
                                if (target == player) {
                                    target.draw();
                                }
                                else {
                                    target.draw();
                                    if (target.storage.kivazsm) {
                                        target.storage.kivazsm.add(player);
                                    }
                                    else {
                                        target.storage.kivazsm = [player];
                                    }
                                }
                            }
                        },
                        ai: {
                            expose: 0.1,
                        },
                    },
                    kivaxfm: {
                        audio: "ext:王朝更替_策:2",
                        audioname: ["heqi", "sunce"],
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num++;
                        },
                        ai: {
                            threaten: 1.5,
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                if (player.hp < player.maxHp) return num + player.maxHp - player.hp;
                            },
                        },
                    },
                    kivasgm: {
                        audio: "ext:王朝更替_策:2",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        viewAsFilter: function (player) {
                            return player.countCards('h', { color: 'black' }) > 0;
                        },
                        viewAs: {
                            name: "tao",
                        },
                        prompt: "将一张黑色手牌当桃使用",
                        check: function (card) { return 8 - get.value(card) },
                        threaten: 1.2,
                        ai: {
                            basic: {
                                useful: [6, 4],
                                respondTao: true,
                                save: true,
                                value: [6, 4],
                                order: function (card, player) {
                                    if (player.hasSkillTag('pretao')) return 5;
                                    return 2;
                                },
                            },
                            result: {
                                player: 1,
                                target: function (player, target) {
                                    // if(player==target&&player.hp<=0) return 2;
                                    var nd = player.needsToDiscard();
                                    var keep = false;
                                    if (nd <= 0) {
                                        keep = true;
                                    }
                                    else if (nd == 1 && target.hp >= 2 && target.countCards('h', 'tao') <= 1) {
                                        keep = true;
                                    }
                                    var mode = get.mode();
                                    if (target.hp >= 2 && keep && target.hasFriend()) {
                                        if (target.hp > 2 || nd == 0) return 0;
                                        if (target.hp == 2) {
                                            if (game.hasPlayer(function (current) {
                                                if (target != current && get.attitude(target, current) >= 3) {
                                                    if (current.hp <= 1) return true;
                                                    if ((mode == 'identity' || mode == 'versus' || mode == 'chess') && current.identity == 'zhu' && current.hp <= 2) return true;
                                                }
                                            })) {
                                                return 0;
                                            }
                                        }
                                    }
                                    if (target.hp < 0 && target != player && target.identity != 'zhu') return 0;
                                    var att = get.attitude(player, target);
                                    if (att < 3 && att >= 0 && player != target) return 0;
                                    var tri = _status.event.getTrigger();
                                    if (mode == 'identity' && player.identity == 'fan' && target.identity == 'fan') {
                                        if (tri && tri.name == 'dying' && tri.source && tri.source.identity == 'fan' && tri.source != target) {
                                            var num = game.countPlayer(function (current) {
                                                if (current.identity == 'fan') {
                                                    return current.countCards('h', 'tao');
                                                }
                                            });
                                            if (num > 1 && player == target) return 2;
                                            return 0;
                                        }
                                    }
                                    if (mode == 'identity' && player.identity == 'zhu' && target.identity == 'nei') {
                                        if (tri && tri.name == 'dying' && tri.source && tri.source.identity == 'zhong') {
                                            return 0;
                                        }
                                    }
                                    if (mode == 'stone' && target.isMin() &&
                                        player != target && tri && tri.name == 'dying' && player.side == target.side &&
                                        tri.source != target.getEnemy()) {
                                        return 0;
                                    }
                                    return 2;
                                },
                            },
                            expose: 0.2,
                            tag: {
                                recover: 1,
                                save: 1,
                            },
                        },
                    },
                    kivajlm: {
                        mod: {
                            suit: function (card, suit) {
                                if (suit == 'heart' || suit == 'diamond') return 'spade';
                            },
                        },
                    },
                    kivaqd: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('kivaqd'), [1, trigger.num], function (card, player, target) {
                                return target.countCards('h') < Math.min(target.maxHp, 5);
                            }).set('ai', function (target) {
                                var att = get.attitude(_status.event.player, target);
                                if (att > 2) {
                                    return Math.min(5, target.maxHp) - target.countCards('h');
                                }
                                return att / 3;
                            });
                            "step 1"
                            if (result.bool) {
                                player.logSkill('jieming', result.targets);
                                for (var i = 0; i < result.targets.length; i++) {
                                    result.targets[i].draw(Math.min(5, result.targets[i].maxHp) - result.targets[i].countCards('h'));
                                }
                            }
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.tag(card, 'damage') && target.hp > 1) {
                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                        var max = 0;
                                        var players = game.filterPlayer();
                                        for (var i = 0; i < players.length; i++) {
                                            if (get.attitude(target, players[i]) > 0) {
                                                max = Math.max(Math.min(5, players[i].hp) - players[i].countCards('h'), max);
                                            }
                                        }
                                        switch (max) {
                                            case 0: return 2;
                                            case 1: return 1.5;
                                            case 2: return [1, 2];
                                            default: return [0, max];
                                        }
                                    }
                                    if ((card.name == 'tao' || card.name == 'caoyao') &&
                                        target.hp > 1 && target.countCards('h') <= target.hp) return [0, 0];
                                },
                            },
                        },
                    },
                    kivassd: {
                        mod: {
                            targetEnabled: function (card, player, target, now) {
                                if (card.name == 'shunshou' || card.name == 'lebu' || card.name == 'bingliang' || card.name == 'guohe' || card.name == 'sha' || card.name == 'nanman' || card.name == 'wanjian') return false;
                            },
                        },
                    },
                    kivajjn: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 999,
                        filter: function (event, player) {
                            return player.countCards('h', { type: ['trick', 'delay'], color: 'black' });
                        },
                        filterCard: function (card) {
                            return get.color(card) == 'black' && get.type(card, 'trick') == 'trick';
                        },
                        filterTarget: function (card, player, target) {
                            return target != player && target.countCards('h') > 0;
                        },
                        discard: false,
                        delay: false,
                        check: function (card) {
                            return 8 - get.value(card);
                        },
                        content: function () {
                            'step 0'
                            player.showCards(cards);
                            'step 1'
                            ui.cardPile.insertBefore(cards[0], ui.cardPile.firstChild);
                            var n1 = target.getCards('he', function (card) {
                                if (!lib.filter.cardDiscardable(card, player)) return false;
                                return get.type(card, 'trick') == 'trick';
                            });
                            var n2 = target.getCards('he', function (card) {
                                if (!lib.filter.cardDiscardable(card, player)) return false;
                                return get.type(card, 'trick') != 'trick';
                            });
                            if (n1.length > 1 || n2.length > 2 || (n1.length == 1 && n2.length == 2)) {
                                target.chooseToDiscard('弃置一张锦囊牌，或两张非锦囊牌', true, 'he', function (card, player) {
                                    if (!lib.filter.cardDiscardable(card, player)) return false;
                                    if (!_status.event.nontrick) {
                                        return get.type(card, 'trick') == 'trick';
                                    }
                                    if (ui.selected.cards.length) {
                                        return get.type(card, 'trick') != 'trick';
                                    }
                                    return true;
                                }).set('ai', function (card) {
                                    if (get.type(card, 'trick') == 'trick') {
                                        return 8 - get.value(card);
                                    }
                                    return -get.value(card);
                                }).set('selectCard', function () {
                                    if (ui.selected.cards.length == 1 && get.type(ui.selected.cards[0], 'trick') == 'trick') {
                                        return 1;
                                    }
                                    return 2;
                                }).set('nontrick', n2.length >= 2).set('complexCard', true);
                            }
                            else {
                                if (n1.length) {
                                    target.discard(n1);
                                }
                                else if (n2.length) {
                                    target.discard(n2);
                                }
                            }
                        },
                        ai: {
                            order: 9,
                            result: {
                                target: -1,
                            },
                        },
                    },
                    kivascl: {
                        unique: true,
                        gainable: true,
                        group: ["rerende", "mingjian"],
                    },
                    kivalss: {
                        unique: true,
                        trigger: {
                            player: "damageEnd",
                        },
                        animationColor: "fire",
                        skillAnimation: "legend",
                        filter: function (event, player) {
                            return !player.storage.kivalss;
                        },
                        init: function (player) {
                            player.storage.kivalss = false;
                        },
                        mark: true,
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivalss'), function (card, player, target) {
                                return target.sex == 'female' && target != player;
                            }).set('ai', function (target) {
                                if (!_status.event.goon) return 0;
                                var player = _status.event.player;
                                var att = get.attitude(player, target);
                                if (att <= 1) return 0;
                                var mode = get.mode();
                                if (mode == 'identity' || (mode == 'versus' && _status.mode == 'four')) {
                                    if (target.name && lib.character[target.name]) {
                                        for (var i = 0; i < lib.character[target.name][3].length; i++) {
                                            if (lib.skill[lib.character[target.name][3][i]].zhuSkill) {
                                                return att * 2;
                                            }
                                        }
                                    }
                                }
                                return att;
                            }).set('goon', !player.hasUnknown());
                            'step 1'
                            if (result.bool) {
                                player.awakenSkill('kivalss');
                                player.storage.kivalss = true;
                                player.logSkill('kivalss', result.targets);
                                var target = result.targets[0];
                                target.addSkill('wengua');
                                var mode = get.mode();
                                if (mode == 'identity' || (mode == 'versus' && _status.mode == 'four')) {
                                    if (target.name && lib.character[target.name]) {
                                        var skills = lib.character[target.name][3];
                                        target.storage.zhuSkill_kivalss = [];
                                        for (var i = 0; i < skills.length; i++) {
                                            var info = lib.skill[skills[i]];
                                            if (info.zhuSkill) {
                                                target.storage.zhuSkill_kivalss.push(skills[i]);
                                                if (info.init) {
                                                    info.init(target);
                                                }
                                                if (info.init2) {
                                                    info.init2(target);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        ai: {
                            expose: 0.2,
                        },
                        intro: {
                            content: "limited",
                        },
                    },
                    kivajqq: {
                        audio: "ext:王朝更替_策:2",
                        forced: true,
                        trigger: {
                            global: "useCard",
                        },
                        filter: function (event, player, card) {
                            var card = event.card;
                            if (get.color(card) != 'red') return false;
                            if (player == event.player) return false;
                            return card.name == 'nanman' || card.name == 'wanjian' || card.name == 'taoyuan' || card.name == 'wugu';
                        },
                        content: function () { },
                        mod: {
                            targetEnabled: function (card) {
                                if ((get.type(card) == 'trick' || get.type(card) == 'delay') && get.color(card) == 'red') return false;
                            },
                        },
                    },
                    kivaqsj: {
                        mod: {
                            globalFrom: function (from, to, distance) {
                                return distance - 100;
                            },
                        },
                    },
                    kivagold: {
                        locked: true,
                        group: ["huoshou1", "huoshou2", "zhanjue"],
                        ai: {
                            effect: {
                                target: function (card, player, target) {
                                    if (card.name == 'nanman') return 0;
                                },
                            },
                        },
                    },
                    kivaxss: {
                        unique: true,
                        gainable: true,
                        group: ["kivaxss1", "kivaxss2", "kivaxss3"],
                    },
                    kivarqq: {
                        trigger: {
                            player: "loseHpEnd",
                        },
                        locked: true,
                        forced: true,
                        filter: function (event) { return (event.num > 0) },
                        content: function () {
                            player.logSkill("kivarqq");
                            player.removeSkill('jueqing');
                            player.recover();
                            if (_status.currentPhase == player) {
                            }
                            else {
                                game.trySkillAudio('kivarqq', player);
                            }
                        },
                    },
                    "kivaxss1": {
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('feilongduofeng');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('feilongduofeng', 'heart', 13), player);
                            }
                            else {
                                player.removeSkill('jueqing');
                            }
                        },
                    },
                    "kivaxss2": {
                        trigger: {
                            player: ["phaseEnd", "damageEnd"],
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('taipingyaoshu');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('taipingyaoshu', 'diamond', 1), player);
                            }
                            else {
                                player.removeSkill('jueqing');
                            }
                        },
                    },
                    "kivaxss3": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                        },
                        frequent: true,
                        filter: function (event) {
                            return (event.num > 0)
                        },
                        content: function () {
                            "step 0"
                            event.cards = get.cards(1 * trigger.num);
                            "step 1"
                            if (event.cards.length > 1) {
                                player.chooseCardButton('将“小杀”牌分配给任意角色', true, event.cards, [1, event.cards.length]).set('ai', function (button) {
                                    if (ui.selected.buttons.length == 0) return 1;
                                    return 0;
                                });
                            }
                            else if (event.cards.length == 1) {
                                event._result = { links: event.cards.slice(0), bool: true };
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.bool) {
                                for (var i = 0; i < result.links.length; i++) {
                                    event.cards.remove(result.links[i]);
                                }
                                event.togive = result.links.slice(0);
                                player.chooseTarget('将' + get.translation(result.links) + '交给一名角色', true).set('ai', function (target) {
                                    var att = get.attitude(_status.event.player, target);
                                    if (_status.event.enemy) {
                                        return -att;
                                    }
                                    else if (att > 0) {
                                        return att / (1 + target.countCards('h'));
                                    }
                                    else {
                                        return att / 100;
                                    }
                                }).set('enemy', get.value(event.togive[0]) < 0);
                            }
                            "step 3"
                            if (result.targets.length) {
                                result.targets[0].gain(event.togive, 'draw');
                                player.line(result.targets[0], 'green');
                                game.log(result.targets[0], '获得了' + get.cnNumber(event.togive.length) + '张牌');
                                event.goto(1);
                            }
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": false,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                        if (!target.hasFriend()) return;
                                        var num = 1;
                                        if (get.attitude(player, target) > 0) {
                                            if (player.needsToDiscard()) {
                                                num = 0.7;
                                            }
                                            else {
                                                num = 0.5;
                                            }
                                        }
                                        if (target.hp >= 4) return [1, num * 2];
                                        if (target.hp == 3) return [1, num * 1.5];
                                        if (target.hp == 2) return [1, num * 0.5];
                                    }
                                },
                            },
                        },
                    },
                    kivatxx: {
                        trigger: {
                            player: "damageEnd",
                        },
                        direct: true,
                        notemp: true,
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        init: function (player) {
                            player.storage.kivatxx = [];
                        },
                        content: function () {
                            'step 0'
                            player.chooseCard(get.prompt('kivatxx'), 'he', [1, trigger.num]).set('ai', function (card) {
                                if (card.name == 'du') return 20;
                                return 7 - get.useful(card);
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('kivatxx');
                                player.lose(result.cards, ui.special);
                                player.$give(result.cards, player);
                                for (var i = 0; i < result.cards.length; i++) {
                                    player.storage.kivatxx.push(result.cards[i]);
                                }
                                player.markSkill('kivatxx');
                            }
                        },
                        marktext: "秀",
                        intro: {
                            content: "cards",
                        },
                        group: "kivatxx2",
                        ai: {
                            threaten: 0.8,
                            maixie: true,
                            "maixie_hp": true,
                        },
                    },
                    kivayryr: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 2,
                        position: "hej",
                        filterCard: true,
                        selectCard: [1, Infinity],
                        prompt: "弃置任意张牌并摸等量的牌",
                        check: function (card) {
                            return 6 - get.value(card)
                        },
                        content: function () {
                            player.draw(cards.length);
                        },
                        ai: {
                            order: 1,
                            result: {
                                player: 1,
                            },
                            threaten: 1.5,
                        },
                    },
                    kivasxsx: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        frequent: true,
                        content: function () {
                            player.addSkill('kivancnc');
                            player.draw();
                        },
                    },
                    kivaqhh: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        position: "hej",
                        filterCard: true,
                        selectCard: [1, 4],
                        prompt: "弃置1-4牌并摸等量的牌，并让一名角色获得技能【飞影】【马术】",
                        check: function (card) {
                            return 6 - get.value(card)
                        },
                        content: function () {
                            player.draw(cards.length);
                            player.addSkill('mashu');
                            player.addSkill('feiying');
                        },
                        ai: {
                            order: 1,
                            result: {
                                player: 1,
                            },
                            threaten: 1.5,
                        },
                    },
                    kivadww: {
                        trigger: {
                            player: "phaseEnd",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return player.countCards('he', { color: 'red' }) > 0;
                        },
                        content: function () {
                            "step 0"
                            var next = player.chooseToDiscard(get.prompt('kivadww'), 'he', { color: 'red' });
                            next.logSkill = 'kivadww';
                            next.ai = function (card) {
                                return 6 - get.value(card);
                            };
                            "step 1"
                            if (result.bool) {
                                player.addSkill('kivadwwshow');
                            }
                        },
                    },
                    kivadwwshow: {
                        trigger: {
                            player: "phaseBegin",
                        },
                        direct: true,
                        mark: true,
                        intro: {
                            content: "下个准备阶段令一名距离1以内的角色回复一点体力或摸两张牌",
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivadww'), function (card, player, target) {
                                return get.distance(player, target) <= 1;
                            }).ai = function (target) {
                                var att = get.attitude(player, target);
                                if (att > 0) {
                                    if (target.hp == 1 && target.maxHp > 1) return att * 2;
                                }
                                return att;
                            };
                            player.removeSkill('kivadwwshow');
                            'step 1'
                            if (result.bool) {
                                player.logSkill('kivadww', result.targets);
                                result.targets[0].chooseDrawRecover(2, true);
                            }
                        },
                    },
                    kivazyy: {
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        filter: function (event, player) {
                            return Math.min(5, player.hp) > player.countCards('h') && !player.skipList.contains('phaseUse') && !player.skipList.contains('phaseDiscard');
                        },
                        check: function (event, player) {
                            var nh = player.countCards('h');
                            if (Math.min(5, player.hp) - nh >= 2) return true;
                            return false;
                        },
                        content: function () {
                            var num = Math.min(5, player.hp) - player.countCards('h');
                            var cards = [];
                            while (num--) {
                                cards.push(game.createCard('sha'));
                            }
                            player.gain(cards, 'gain2');
                            player.skip('phaseUse');
                            player.skip('phaseDiscard');
                        },
                    },
                    kivancnc: {
                        unique: true,
                        gainable: true,
                        group: ["mashu", "feiying"],
                    },
                    kivadzsf: {
                        unique: true,
                        gainable: true,
                        group: ["kivadzsf1", "kivadzsf2", "kivadzsf3", "kivadzsf4", "lianpo"],
                    },
                    kivaqtds: {
                        unique: true,
                        gainable: true,
                        group: ["kivaqtds1", "kivaqtds2"],
                    },
                    kivang: {
                        trigger: {
                            player: "phaseBegin",
                        },
                        skillAnimation: true,
                        filter: function (event, player) {
                            return !player.storage.kivang;
                        },
                        intro: {
                            content: "limited",
                        },
                        mark: true,
                        direct: true,
                        unique: true,
                        content: function () {
                            "step 0"
                            var check = (player.hp == 1 || (player.hp == 2 && player.countCards('h') <= 1));
                            player.chooseTarget(get.prompt('kivang')).set('ai', function (target) {
                                if (!_status.event.check) return 0;
                                return get.attitude(_status.event.player, target);
                            }).set('check', check);
                            "step 1"
                            if (result.bool) {
                                player.storage.kivang = true;
                                player.awakenSkill('kivang');
                                player.logSkill('kivang', result.targets);
                                player.removeSkill('kivaqtds');
                                player.gainMaxHp();
                                player.recover();
                                result.targets[0].loseHp();
                            }
                        },
                    },
                    "kivadzsf1": {
                        enable: "phaseUse",
                        usable: 2,
                        audio: ["qice_backup"],
                        filter: function (event, player) {
                            return player.countCards('h') > 0
                        },
                        chooseButton: {
                            dialog: function () {
                                var list = ['juedou', 'zhibi'];
                                for (var i = 0; i < list.length; i++) {
                                    list[i] = ['火眼金睛', '', list[i]];
                                }
                                return ui.create.dialog([list, 'vcard']);
                            },
                            filter: function (button, player) {
                                return lib.filter.filterCard({ name: button.link[2] }, player, _status.event.getParent());
                            },
                            check: function (button) {
                                var player = _status.event.player;
                                var recover = 0, lose = 1, players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    if (!players[i].isOut()) {
                                        if (players[i].hp < players[i].maxHp) {
                                            if (get.attitude(player, players[i]) > 0) {
                                                if (players[i].hp < 2) {
                                                    lose--;
                                                    recover += 0.5;
                                                }
                                                lose--;
                                                recover++;
                                            }
                                            else if (get.attitude(player, players[i]) < 0) {
                                                if (players[i].hp < 2) {
                                                    lose++;
                                                    recover -= 0.5;
                                                }
                                                lose++;
                                                recover--;
                                            }
                                        }
                                        else {
                                            if (get.attitude(player, players[i]) > 0) {
                                                lose--;
                                            }
                                            else if (get.attitude(player, players[i]) < 0) {
                                                lose++;
                                            }
                                        }
                                    }
                                }
                                if (lose > recover && lose > 0) return (button.link[2] == 'nanman') ? 1 : -1;
                                if (lose < recover && recover > 0) return (button.link[2] == 'taoyuan') ? 1 : -1;
                                return (button.link[2] == 'wuzhong') ? 1 : -1;
                            },
                            backup: function (links, player) {
                                return {
                                    filterCard: true,
                                    selectCard: -1,
                                    audio: 2,
                                    popname: true,
                                    viewAs: { name: links[0][2] },
                                }
                            },
                            prompt: function (links, player) {
                                return '将全部手牌当作' + get.translation(links[0][2]) + '使用';
                            },
                        },
                        ai: {
                            order: 1,
                            result: {
                                player: function (player) {
                                    var num = 0;
                                    var cards = player.getCards('h');
                                    if (cards.length >= 3 && player.hp >= 3) return 0;
                                    for (var i = 0; i < cards.length; i++) {
                                        num += Math.max(0, get.value(cards[i], player, 'raw'));
                                    }
                                    num /= cards.length;
                                    num *= Math.min(cards.length, player.hp);
                                    return 12 - num;
                                },
                            },
                            threaten: 1.6,
                        },
                    },
                    "kivadzsf2": {
                        forced: true,
                        locked: true,
                        group: ["kivajyjy1", "kivahyhy2"],
                        audio: "ext:王朝更替_策:2",
                        audioname: ["re_lvbu"],
                    },
                    "kivaqtds1": {
                        mod: {
                            cardEnabled: function (card, player) {
                                if (card.name == 'tao' && _status.event.skill != 'kivaqtds1') return false;
                            },
                            cardUsable: function (card, player) {
                                if (card.name == 'tao' && _status.event.skill != 'kivaqtds1') return false;
                            },
                            cardRespondable: function (card, player) {
                                if (card.name == 'tao' && _status.event.skill != 'kivaqtds1') return false;
                            },
                            cardSavable: function (card, player) {
                                if (card.name == 'tao' && _status.event.skill != 'kivaqtds1') return false;
                            },
                        },
                        enable: ["chooseToUse", "chooseToRespond"],
                        filter: function (event, player) {
                            return player.countCards('h', 'tao') > 0;
                        },
                        filterCard: {
                            name: "tao",
                        },
                        viewAs: {
                            name: "sha",
                            suit: "heart",
                            number: 4,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "heart", "number": 4, "name": "tao", "cardid": "1527216369", "_transform": "translateX(112px)", "clone": { "name": "tao", "suit": "heart", "number": 4, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 351 }, "timeout": 316, "original": "h" }],
                        },
                        viewAsFilter: function (player) {
                            if (!player.countCards('h', 'tao')) return false;
                        },
                        check: function () { return 1 },
                        ai: {
                            skillTagFilter: function (player) {
                                if (!player.countCards('h', 'tao')) return false;
                            },
                            respondSha: true,
                            order: 4,
                            useful: -1,
                            value: -1,
                            basic: {
                                useful: [5, 1],
                                value: [5, 1],
                            },
                            result: {
                                target: function (player, target) {
                                    if (player.hasSkill('tao') && !target.getEquip('baiyin')) {
                                        if (get.attitude(player, target) > 0) {
                                            return -6;
                                        }
                                        else {
                                            return -3;
                                        }
                                    }
                                    return -1.5;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function (card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function (card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function (card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function (card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function (card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                            },
                        },
                    },
                    "kivaqtds2": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        frequent: true,
                        content: function () {
                            player.changeHujia();
                        },
                    },
                    "kivadzsf3": {
                        mod: {
                            targetEnabled: function (card, player, target, now) {
                                if (card.name == 'bingliang' || card.name == 'lebu' || card.name == 'gw_zhihuanjun' || card.name == 'gw_zumoshoukao') return false;
                            },
                        },
                    },
                    kivaswjj: {
                        group: ["kivaswjj1", "kivaswjj2"],
                        audio: "ext:王朝更替_策:2",
                        audioname: ["sp_lvmeng"],
                        ai: {
                            effect: {
                                target: function (card, player, target) {
                                    if (card.name == 'juedou' || card.name == 'zhibi') return [1, 0.6];
                                },
                                player: function (card, player, target) {
                                    if (card.name == 'juedou' || card.name == 'zhibi') return [1, 1];
                                },
                            },
                        },
                        subSkill: {
                            juedou: {
                                audio: "kivaswjj",
                                audioname: ["sp_lvmeng"],
                                priority: 15,
                                frequent: true,
                                trigger: {
                                    player: "useCardToBefore",
                                    target: "useCardToBefore",
                                },
                                filter: function (event, player) {
                                    if (event.card.name == 'juedou') return true;
                                },
                                content: function () {
                                    player.draw();
                                },
                                sub: true,
                            },
                            zhibi: {
                                audio: "kivaswjj",
                                audioname: ["sp_lvmeng"],
                                priority: 15,
                                frequent: true,
                                trigger: {
                                    player: "useCardToBefore",
                                    target: "useCardToBefore",
                                },
                                filter: function (event, player) {
                                    if (event.card.name == 'zhibi') return true;
                                },
                                content: function () {
                                    player.draw();
                                },
                                sub: true,
                            },
                        },
                    },
                    "kivadzsf4": {
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('jingukiva');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('jingukiva', 'heart', 13), player);
                            }
                            else {
                                player.changeHujia();
                                player.loseHp();
                            }
                        },
                    },
                    "kivajyjy1": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "juedou",
                            target: "juedou",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return event.turn != player;
                        },
                        priority: -1,
                        content: function () {
                            "step 0"
                            var next = trigger.turn.chooseToRespond({ name: 'sha' }, '请打出一张杀响应决斗');
                            next.set('prompt2', '（共需打出2张杀）');
                            next.autochoose = lib.filter.autoRespondSha;
                            next.set('ai', function (card) {
                                var player = _status.event.player;
                                var trigger = _status.event.getTrigger();
                                if (get.attitude(trigger.turn, player) < 0 && trigger.turn.countCards('h', 'sha') > 1) {
                                    return get.unuseful2(card);
                                }
                                return -1;
                            });
                            "step 1"
                            if (result.bool == false) {
                                trigger.directHit = true;
                            }
                        },
                        ai: {
                            result: {
                                target: function (card, player, target) {
                                    if (card.name == 'juedou' && target.countCards('h') > 0) return [1, 0, 0, -1];
                                },
                            },
                        },
                        audioname: ["re_lvbu"],
                    },
                    "kivahyhy2": {
                        audio: "ext:王朝更替_策:2",
                        unique: true,
                        enable: "phaseUse",
                        filter: function (event, player) {
                            return !player.storage.kivahyhy2;
                        },
                        init: function (player) {
                            player.storage.kivahyhy2 = false;
                        },
                        mark: true,
                        intro: {
                            content: "limited",
                        },
                        skillAnimation: "epic",
                        animationColor: "thunder",
                        filterTarget: function (card, player, target) {
                            return target != player;
                        },
                        selectTarget: -1,
                        multitarget: true,
                        multiline: true,
                        content: function () {
                            "step 0"
                            player.unmarkSkill('kivahyhy2')
                            player.storage.kivahyhy2 = true;
                            event.current = player.next;
                            "step 1"
                            event.current.animate('target');
                            event.current.chooseToUse('火眼：使用一张杀或获得技能定神', { name: 'sha' }, function (card, player, target) {
                                if (player == target) return false;
                                if (!player.canUse('sha', target)) return false;
                                if (get.distance(player, target) <= 1) return true;
                                if (game.hasPlayer(function (current) {
                                    return current != player && get.distance(player, current) < get.distance(player, target);
                                })) {
                                    return false;
                                }
                                return true;
                            });
                            "step 2"
                            if (result.bool == false) event.current.addSkill('kivadsdsds');
                            if (event.current.next != player) {
                                event.current = event.current.next;
                                game.delay(0.5);
                                event.goto(1);
                            }
                        },
                        ai: {
                            order: 1,
                            result: {
                                player: function (player) {
                                    if (lib.config.mode == 'identity' && game.zhu.isZhu && player.identity == 'fan') {
                                        if (game.zhu.hp == 1 && game.zhu.countCards('h') <= 2) return 1;
                                    }
                                    var num = 0;
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        var att = get.attitude(player, players[i]);
                                        if (att > 0) att = 1;
                                        if (att < 0) att = -1;
                                        if (players[i] != player && players[i].hp <= 3) {
                                            if (players[i].countCards('h') == 0) num += att / players[i].hp;
                                            else if (players[i].countCards('h') == 1) num += att / 2 / players[i].hp;
                                            else if (players[i].countCards('h') == 2) num += att / 4 / players[i].hp;
                                        }
                                        if (players[i].hp == 1) num += att * 1.5;
                                    }
                                    if (player.hp == 1) {
                                        return -num;
                                    }
                                    if (player.hp == 2) {
                                        return -game.players.length / 4 - num;
                                    }
                                    return -game.players.length / 3 - num;
                                },
                            },
                        },
                    },
                    kivadsdsds: {
                        mark: true,
                        intro: {
                            mark: function (dialog, content, player) {
                                var hs = player.getCards('h');
                                if (hs.length) {
                                    dialog.addSmall(hs);
                                }
                                else {
                                    dialog.addText('看透了');
                                }
                            },
                            content: function (content, player) {
                                var hs = player.getCards('h');
                                if (hs.length) {
                                    return get.translation(hs);
                                }
                                else {
                                    return '看透了';
                                }
                            },
                        },
                    },
                    "kivaswjj1": {
                        audio: "kivaswjj",
                        audioname: ["sp_lvmeng"],
                        priority: 15,
                        frequent: true,
                        trigger: {
                            player: "useCardToBefore",
                            target: "useCardToBefore",
                        },
                        filter: function (event, player) {
                            if (event.card.name == 'juedou') return true;
                        },
                        content: function () {
                            player.draw();
                        },
                        sub: true,
                    },
                    "kivaswjj2": {
                        audio: "kivaswjj",
                        audioname: ["sp_lvmeng"],
                        priority: 15,
                        frequent: true,
                        trigger: {
                            player: "useCardToBefore",
                            target: "useCardToBefore",
                        },
                        filter: function (event, player) {
                            if (event.card.name == 'zhibi') return true;
                        },
                        content: function () {
                            player.draw();
                        },
                        sub: true,
                    },
                    kivaby: {
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('nvwashi');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('nvwashi', 'spade', 12), player);
                            }
                            else {
                                player.loseMaxHp();
                                player.recover();
                            }
                        },
                    },
                    kivawz: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        filterCard: true,
                        usable: 1,
                        selectCard: 2,
                        check: function (card) {
                            var player = get.owner(card);
                            if (player.countCards('h') > player.hp)
                                return 8 - get.value(card)
                            if (player.hp < player.hp)
                                return 6 - get.value(card)
                            return 4 - get.value(card)

                        },
                        filterTarget: function (card, player, target) {
                            if (target == player) return false;
                            return true;
                        },
                        content: function () {
                            player.loseHp(1);
                            target.loseHp(2);
                        },
                        ai: {
                            order: 5.5,
                            result: {
                                player: function (player) {
                                    if (player.hp < player.hp) return 4;
                                    if (player.countCards('h') > player.hp) return 0
                                    return -1;
                                },
                                target: 4,
                            },
                            threaten: 2,
                        },
                    },
                    kivadoubiej: {
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        forced: true,
                        derivation: ["wamiankiva", "kivaqqqqqqq"],
                        filter: function (event, player) {
                            return !player.getEquip('wamiankiva');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('wamiankiva', 'diamond', 11), player);
                            }
                            else {
                                player.draw();
                            }
                        },
                    },
                    kivawam: {
                        trigger: {
                            player: "shaBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !event.directHit && player.getEquip(1);
                        },
                        priority: -1,
                        content: function () {
                            if (typeof trigger.shanRequired == 'number') {
                                trigger.shanRequired++;
                            }
                            else {
                                trigger.shanRequired = 3;
                            }
                        },
                    },
                    kivajzj: {
                        trigger: {
                            player: ["phaseBefore", "changeHp"],
                        },
                        forced: true,
                        popup: false,
                        unique: true,
                        derivation: ["wamiankiva"],
                        content: function () {
                            player.removeAdditionalSkill('kivajzj');
                            var list = [];
                            if (player.hp <= 1) {
                                list.push('mashu');
                            }
                            if (player.hp <= 2) {
                                list.push('wansha');
                            }
                            if (player.hp <= 1) {
                                list.push('retuxi');
                            }
                            if (player.hp <= 3) {
                                list.push('duanbing');
                            }
                            if (player.hp <= 1) {
                                list.push('reyingzi');
                            }
                            if (list.length) {
                                player.addAdditionalSkill('kivajzj', list);
                            }
                        },
                        ai: {
                            maixie: false,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (!target.hasFriend()) return;
                                        if (target.hp >= 4) return [0, 1];
                                    }
                                    if (get.tag(card, 'recover') && player.hp >= player.maxHp - 1) return [0, 0];
                                },
                            },
                        },
                    },
                    kivaqqqqqqq: {
                        unique: true,
                        gainable: true,
                        group: ["kivajzj", "kivadoubiej", "kivawam"],
                    },
                    "kiva100": {
                        unique: true,
                        gainable: true,
                        group: ["kivafenlong", "mashu"],
                    },
                    "kiva102": {
                        mod: {
                            targetEnabled: function (card, player, target, now) {
                                if (card.name == 'sha' || card.name == 'tao') return false;
                            },
                        },
                    },
                    "kiva104": {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        filterCard: true,
                        usable: 1,
                        selectCard: [3, Infinity],
                        check: function (card) {
                            var player = get.owner(card);
                            if (player.countCards('h') > player.hp)
                                return 8 - get.value(card)
                            if (player.hp < player.maxHp)
                                return 6 - get.value(card)
                            return 4 - get.value(card)

                        },
                        filterTarget: function (card, player, target) {
                            if (target == player) return false;
                            return true;
                        },
                        content: function () {
                            "step 0"
                            event.num = player.hp;
                            player.draw(event.num);
                            "step 1"
                            player.storage.kiva104 = true;
                            var cards = [];
                            for (var i = 0; i < 1; i++) {
                                cards.push(game.createCard('kiva103'));
                            }
                            player.gain(cards, 'gain2');
                        },
                        ai: {
                            order: 5.5,
                            result: {
                                player: function (player) {
                                    if (player.hp < player.maxHp) return 4;
                                    if (player.countCards('h') > player.hp) return 0
                                    return -1;
                                },
                                target: 4,
                            },
                            threaten: 2,
                        },
                    },
                    "kiva106": {
                        mod: {
                            targetEnabled: function (card, player, target, now) {
                                if (card.name == 'jiu' || card.name == 'tiesuo') return false;
                            },
                        },
                    },
                    "kiva108": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "loseEnd",
                        },
                        frequent: true,
                        filter: function (event, player) {
                            if (player.countCards('h')) return false;
                            for (var i = 0; i < event.cards.length; i++) {
                                if (event.cards[i].original == 'h') return true;
                            }
                            return false;
                        },
                        content: function () {
                            event.num = player.hp;
                            player.draw(event.num);
                        },
                        ai: {
                            threaten: 0.8,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'guohe' || card.name == 'liuxinghuoyu') return 0.5;
                                },
                            },
                            noh: true,
                            skillTagFilter: function (player, tag) {
                                if (tag == 'noh') {
                                    if (player.countCards('h') != 1) return false;
                                }
                            },
                        },
                    },
                    "测试": {
                        audio: "ext:王朝更替_策:2",
                        audioname: ["boss_qinglong"],
                        trigger: {
                            player: "respond",
                        },
                        filter: function (event, player) {
                            return event.card.name == 'shan';
                        },
                        direct: true,
                        content: function () {
                            "step 0";
                            player.chooseTarget(get.prompt('releiji')).ai = function (target) {
                                if (target.hasSkill('hongyan')) return 0;
                                return get.damageEffect(target, _status.event.player, _status.event.player, 'thunder');
                            };
                            "step 1"
                            if (result.bool) {
                                player.logSkill('releiji', result.targets, 'thunder');
                                event.target = result.targets[0];
                                event.target.judge(function (card) {
                                    var suit = get.suit(card);
                                    if (suit == 'spade') return -4;
                                    if (suit == 'club') return -2;
                                    return 0;
                                });
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.suit == 'club') {
                                event.target.damage('thunder');
                                player.recover();
                            }
                            else if (result.suit == 'spade') {
                                event.target.damage(2, 'thunder');
                            }
                        },
                        ai: {
                            useShan: true,
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.tag(card, 'respondShan')) {
                                        var hastarget = game.hasPlayer(function (current) {
                                            return get.attitude(target, current) < 0;
                                        });
                                        var be = target.countCards('e', { color: 'black' });
                                        if (target.countCards('h', 'shan') && be) {
                                            if (!target.hasSkill('guidao')) return 0;
                                            return [0, hastarget ? target.countCards('he') / 2 : 0];
                                        }
                                        if (target.countCards('h', 'shan') && target.countCards('h') > 2) {
                                            if (!target.hasSkill('guidao')) return 0;
                                            return [0, hastarget ? target.countCards('h') / 4 : 0];
                                        }
                                        if (target.countCards('h') > 3 || (be && target.countCards('h') >= 2)) {
                                            return [0, 0];
                                        }
                                        if (target.countCards('h') == 0) {
                                            return [1.5, 0];
                                        }
                                        if (target.countCards('h') == 1 && !be) {
                                            return [1.2, 0];
                                        }
                                        if (!target.hasSkill('guidao')) return [1, 0.05];
                                        return [1, Math.min(0.5, (target.countCards('h') + be) / 4)];
                                    }
                                },
                            },
                        },
                    },
                    "kiva109": {
                        mod: {
                            cardUsable: function (card) {
                                if (card.name == 'jiu') return Infinity;
                            },
                        },
                    },
                    "kiva110": {
                        audio: "ext:王朝更替_策:2",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        viewAsFilter: function (player) {
                            return player.countCards('h', { color: 'black' }) > 0;
                        },
                        viewAs: {
                            name: "jiu",
                            suit: "club",
                            number: 13,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "club", "number": 13, "name": "kiva112", "cardid": "4550572265", "_transform": "translateX(224px)", "clone": { "name": "kiva112", "suit": "club", "number": 13, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "fixed": true, "timeout": 259 }, "timeout": 229, "original": "h" }],
                        },
                        prompt: "将一张黑色手牌当酒使用",
                        check: function (card) { return 8 - get.value(card) },
                        threaten: 1.2,
                        ai: {
                            basic: {
                                useful: [6, 4],
                                value: [6, 4],
                            },
                            result: {
                                player: 1,
                                target: function (player, target) {
                                    if (target && target.isDying()) return 2;
                                    if (lib.config.mode == 'stone' && !player.isMin()) {
                                        if (player.getActCount() + 1 >= player.actcount) return 0;
                                    }
                                    var shas = player.getCards('h', 'sha');
                                    if (shas.length > 1 && player.getCardUsable('sha') > 1) {
                                        return 0;
                                    }
                                    var card;
                                    if (shas.length) {
                                        for (var i = 0; i < shas.length; i++) {
                                            if (lib.filter.filterCard(shas[i], target)) {
                                                card = shas[i]; break;
                                            }
                                        }
                                    }
                                    else if (player.hasSha() && player.needsToDiscard()) {
                                        if (player.countCards('h', 'hufu') != 1) {
                                            card = { name: 'sha' };
                                        }
                                    }
                                    if (card) {
                                        if (game.hasPlayer(function (current) {
                                            return (get.attitude(target, current) < 0 &&
                                                target.canUse(card, current, true, true) &&
                                                !current.getEquip('baiyin') &&
                                                get.effect(current, card, target) > 0);
                                        })) {
                                            return 1;
                                        }
                                    }
                                    return 0;
                                },
                            },
                            expose: 0.2,
                            order: function () {
                                return get.order({ name: 'sha' }) + 0.2;
                            },
                            tag: {
                                save: 1,
                            },
                        },
                    },
                    "kiva111": {
                        unique: true,
                        gainable: true,
                        group: ["kiva109", "kiva110"],
                    },
                    "kiva116": {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        prompt: "你可以用1张牌获得一点护甲，每回合限一次",
                        content: function () {
                            "step 0"
                            player.chooseToDiscard('h', true);
                            "step 1"
                            player.changeHujia();
                        },
                        ai: {
                            basic: {
                                order: 1,
                            },
                            result: {
                                player: function (player) {
                                    if (player.countCards('h') >= 1) return -1;
                                    return 1;
                                },
                            },
                        },
                    },
                    "kiva117": {
                        trigger: {
                            source: "damageBefore",
                        },
                        forced: true,
                        content: function () {
                            trigger.nature = 'thunder';
                        },
                    },
                    kivaleishen: {
                        trigger: {
                            player: "shaBegin",
                        },
                        content: function () {
                            'step 0'
                            event.num = trigger.num;
                            'step 1'
                            player.judge();
                            'step 2'
                            event.color = result.color;
                            if (event.color == 'black') {
                                player.chooseTarget('弃置一名角色区域内的一张牌', true, function (card, player, target) {
                                    return target.countCards('hej');
                                }).set('ai', function (target) {
                                    var player = _status.event.player;
                                    var att = get.attitude(player, target);
                                    if (att < 0) {
                                        att = -Math.sqrt(-att);
                                    }
                                    else {
                                        att = Math.sqrt(att);
                                    }
                                    return att * lib.card.guohe.ai.result.target(player, target);
                                })
                            }
                            else {
                                var next = player.chooseTarget('令一名角色摸一张牌', true);
                                var xianfu = game.findPlayer(function (current) {
                                    return current.hasSkill('xianfu2') && current.storage.xianfu2 == player;
                                });
                                if (xianfu) {
                                    next.set('prompt2', '（若目标为' + get.translation(xianfu) + '则改为摸两张牌）');
                                }
                                next.set('ai', function (target) {
                                    var player = _status.event.player;
                                    var att = get.attitude(player, target) / Math.sqrt(1 + target.countCards('h'));
                                    if (target.storage.xianfu2 == player) return att * 2;
                                    return att;
                                })
                            }
                            'step 3'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.line(target, 'green');
                                if (event.color == 'black') {
                                    player.discardPlayerCard(target, 'hej', true);
                                }
                                else {
                                    if (target.hasSkill('xianfu2') && target.storage.xianfu2 == player) {
                                        var cards = [];
                                        for (var i = 0; i < 3; i++) {
                                            cards.push(game.createCard('kivapoison_sha'));
                                        }
                                        target.gain(cards, 'gain2');
                                    }
                                    else {
                                        var cards = [];
                                        for (var i = 0; i < 1; i++) {
                                            cards.push(game.createCard('jingleishan'));
                                        }
                                        target.gain(cards, 'gain2');
                                    }
                                }
                            }
                            'step 4'
                            if (--event.num > 0) {
                                player.chooseBool('是否再次发动【雷神天明闪】？');
                            }
                            else {
                                event.finish();
                            }
                            'step 5'
                            if (result.bool) {
                                event.goto(1);
                            }
                        },
                        ai: {
                            maixie: false,
                            "maixie_hp": false,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                        if (!target.hasFriend()) return;
                                        if (target.hp >= 4) return [1, get.tag(card, 'damage') * 1.5];
                                        if (target.hp == 3) return [1, get.tag(card, 'damage') * 1];
                                        if (target.hp == 2) return [1, get.tag(card, 'damage') * 0.5];
                                    }
                                },
                            },
                        },
                    },
                    kivawujin: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        content: function () {
                            "step 0"
                            player.recover(2);
                            "step 1"
                            player.turnOver();
                        },
                        ai: {
                            basic: {
                                order: 1,
                            },
                            result: {
                                player: function (player) {
                                    if (player.hp = player.MaxHp - 2) return -1;
                                    if (player.hp = 1) return -1;
                                    return 1;
                                },
                            },
                        },
                    },
                    kivaweiyan: {
                        mod: {
                            globalFrom: function (from, to, distance) {
                                return distance - 1;
                            },
                        },
                    },
                    kivagongxin: {
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.isUnseen();
                        },
                        content: function () {
                            trigger.num++;
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        group: "kivagongxin2",
                    },
                    "kivagongxin2": {
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (player.isUnseen()) return false;
                            return game.hasPlayer(function (current) {
                                return player.canUse('zhibi', current);
                            });
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget('攻心：选择知己知彼的目标', function (card, player, target) {
                                return player.canUse({ name: 'zhibi' }, target);
                            }, true).set('ai', function (target) {
                                var player = _status.event.player;
                                return get.effect(target, { name: 'zhibi' }, player, player);
                            });
                            'step 1'
                            if (result.bool) {
                                player.useCard({ name: 'zhibi' }, result.targets);
                            }
                        },
                    },
                    kivahuairou: {
                        audio: "ext:王朝更替_策:2",
                        group: ["kivarecover_hr", "kivagc", "guidao"],
                        mark: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        frequent: true,
                        content: function () {
                            player.addSkill('kivadamage_hr');
                        },
                    },
                    "kivasha_df": {
                        trigger: {
                            player: "shaBegin",
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            player.draw();
                            player.addSkill('qianxun');
                            player.addSkill('lianying');
                            player.removeSkill('yeyan');
                            player.removeSkill('reyingzi');
                            player.removeSkill('dimeng')
                            player.removeSkill('gongxin');
                        },
                    },
                    "kivajiu_df": {
                        trigger: {
                            player: "jiuBegin",
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            player.draw();
                            player.removeSkill('qianxun');
                            player.removeSkill('lianying');
                            player.addSkill('yeyan');
                            player.addSkill('reyingzi');
                            player.removeSkill('dimeng')
                            player.removeSkill('gongxin');
                        },
                    },
                    "kivatao_df": {
                        trigger: {
                            player: "taoBegin",
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            player.draw();
                            player.removeSkill('qianxun');
                            player.removeSkill('lianying');
                            player.removeSkill('yeyan');
                            player.removeSkill('reyingzi');
                            player.removeSkill('dimeng')
                            player.addSkill('gongxin');
                        },
                    },
                    "kivashan_df": {
                        trigger: {
                            player: "respond",
                        },
                        filter: function (event, player) {
                            return event.card.name == 'shan';
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            player.draw();
                            player.removeSkill('qianxun');
                            player.removeSkill('lianying');
                            player.removeSkill('yeyan');
                            player.removeSkill('reyingzi');
                            player.addSkill('dimeng')
                            player.removeSkill('gongxin');
                        },
                    },
                    "kivadu_df": {
                        trigger: {
                            player: "duBegin",
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            player.recover();
                            player.draw();
                            player.addSkill('luweiyan');
                        },
                    },
                    kivadufeng: {
                        unique: true,
                        gainable: true,
                        derivation: ["zhouyu", "re_lusu", "lvmeng", "luxun", "sha", "shan", "jiu", "tao", "du", "reyingzi", "yeyan", "dimeng", "gongxin", "qianxun", "lianying", "luweiyan"],
                        group: ["kivasha_df", "kivashan_df", "kivatao_df", "kivajiu_df", "kivadu_df"],
                    },
                    "kivarecover_hr": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "loseEnd",
                        },
                        frequent: true,
                        filter: function (event, player) {
                            if (player.countCards('h')) return false;
                            for (var i = 0; i < event.cards.length; i++) {
                                if (event.cards[i].original == 'h') return true;
                            }
                            return false;
                        },
                        content: function () {
                            player.recover();
                        },
                        ai: {
                            threaten: 0.8,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'guohe' || card.name == 'liuxinghuoyu') return 0.5;
                                },
                            },
                            noh: true,
                            skillTagFilter: function (player, tag) {
                                if (tag == 'noh') {
                                    if (player.countCards('h') != 1) return false;
                                }
                            },
                        },
                    },
                    "kivadamage_hr": {
                        unique: true,
                        enable: "phaseUse",
                        audio: "ext:王朝更替_策:2",
                        animationColor: "thunder",
                        skillAnimation: "legend",
                        filter: function (event, player) {
                            return !player.storage.kivadamage_hr;
                        },
                        init: function (player) {
                            player.storage.kivadamage_hr = false;
                        },
                        filterTarget: function (card, player, target) {
                            var length = ui.selected.cards.length;
                            return (length == 0 || length == 4);
                        },
                        filterCard: function (card) {
                            var suit = get.suit(card);
                            for (var i = 0; i < ui.selected.cards.length; i++) {
                                if (get.suit(ui.selected.cards[i]) == suit) return false;
                            }
                            return true;
                        },
                        complexCard: true,
                        mark: true,
                        selectCard: [0, 4],
                        line: "thunder",
                        check: function () { return -1 },
                        selectTarget: function () {
                            if (ui.selected.cards.length == 4) return 1;
                            if (ui.selected.cards.length == 0) return [1, 3];
                            game.uncheck('target');
                            return [1, 3];
                        },
                        content: function () {
                            player.awakenSkill('kivadamage_hr');
                            player.storage.kivadamage_hr = true;
                            if (cards.length == 4) {
                                player.loseHp(3);
                                target.damage('thunder', 3, 'nocard');
                            }
                            else {
                                target.damage('thunder', 'nocard');
                            }
                        },
                        intro: {
                            content: "limited",
                        },
                        ai: {
                            order: 1,
                            result: {
                                target: function (player, target) {
                                    if (target.hasSkillTag('nofire')) return 0;
                                    if (lib.config.mode == 'versus') return -1;
                                    if (player.hasUnknown()) return 0;
                                    return get.damageEffect(target, player);
                                },
                            },
                        },
                    },
                    kivaBlade: {
                        trigger: {
                            player: "shaBegin",
                        },
                        audio: "ext:王朝更替_策:1",
                        forced: true,
                        filter: function (event, player) {
                            return !event.directHit && player.getEquip(1);
                        },
                        priority: -1,
                        content: function () {
                            if (typeof trigger.shanRequired == 'number') {
                                trigger.shanRequired++;
                            }
                            else {
                                trigger.shanRequired = 2;
                            }
                        },
                    },
                    kivaRyuki: {
                        trigger: {
                            source: "damageEnd",
                        },
                        filter: function (event, player) {
                            return get.distance(player, event.player) <= 1 && event.num > 0;
                        },
                        direct: true,
                        audio: "ext:王朝更替_策:1",
                        content: function () {
                            'step 0'
                            event.num = trigger.num;
                            'step 1'
                            player.chooseDrawRecover(get.prompt('kivaRyuki')).set('logSkill', 'kivaRyuki');
                            'step 2'
                            if (result.control != 'cancel2') {
                                event.num--;
                                if (event.num > 0) {
                                    event.goto(1);
                                }
                            }
                        },
                    },
                    kivaDecade: {
                        audio: "ext:王朝更替_策:1",
                        enable: "phaseUse",
                        usable: 1,
                        prompt: "变成假面骑士decade并摸一张牌",
                        content: function () {
                            "step 0"
                            player.init('Decadekiva');
                            var chat = ['我只是路过的假面骑士，你给我记好了！'].randomGet()
                            player.say(chat)
                            "step 1"
                            player.draw();
                        },
                        ai: {
                            basic: {
                                order: 1,
                            },
                            result: {
                                player: function (player) {
                                    if (player.countCards('h') >= player.hp - 1) return -1;
                                    if (player.hp < 3) return -1;
                                    return 1;
                                },
                            },
                        },
                    },
                    kivapaizhao: {
                        audio: "ext:王朝更替_策:2",
                        enable: "chooseToUse",
                        usable: 1,
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        viewAsFilter: function (player) {
                            return player.countCards('h', { color: 'black' }) > 0;
                        },
                        viewAs: {
                            name: "kiva113",
                            suit: "club",
                            number: 2,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "club", "number": 2, "name": "sha", "cardid": "1366652340", "_transform": "translateX(448px)", "clone": { "name": "sha", "suit": "club", "number": 2, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 3076 }, "timeout": 3067, "original": "h" }],
                        },
                        prompt: "将一张黑色手牌当流放之诏使用,每回合限一次",
                        check: function (card) { return 8 - get.value(card) },
                        threaten: 1.2,
                        ai: {
                            basic: {
                                useful: [6, 4],
                                value: [6, 4],
                            },
                            result: {
                                player: 1,
                                target: function (player, target) {
                                    if (target.hasJudge('lebu')) return 0;
                                    return Math.max(1, 2 - target.countCards('h') / 10);
                                },
                            },
                            expose: 0.2,
                            order: 7,
                            useful: 4,
                            value: 10,
                            tag: {
                                draw: 2,
                            },
                        },
                    },
                    "kivaDecade4": {
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('kivaDecade2');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('kivaDecade2', 'diamond', 1), player);
                            }
                            else {
                                player.draw();
                            }
                        },
                    },
                    kivaquka: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseBegin",
                        },
                        content: function () {
                            var cards = [];
                            for (var i = 0; i < 1; i++) {
                                cards.push(game.createCard('kivaDecade3'));
                            }
                            player.gain(cards, 'gain2');
                        },
                    },
                    jueshakiva: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        filterCard: true,
                        usable: 1,
                        selectCard: 4,
                        check: function (card) {
                            var player = get.owner(card);
                            if (player.countCards('h') > player.hp)
                                return 8 - get.value(card)
                            if (player.hp < player.maxHp)
                                return 6 - get.value(card)
                            return 4 - get.value(card)

                        },
                        filterTarget: function (card, player, target) {
                            if (target == player) return false;
                            return true;
                        },
                        content: function () {
                            player.loseMaxHp(3);
                            target.loseHp(50);
                        },
                        ai: {
                            order: 5.5,
                            result: {
                                player: function (player) {
                                    if (player.hp < player.maxHp) return 4;
                                    if (player.countCards('h') > player.hp) return 0
                                    return -1;
                                },
                                target: 4,
                            },
                            threaten: 2,
                        },
                    },
                    dragonkiva: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            source: "dieAfter",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.hasSkill('dragonkiva2');
                        },
                        content: function () {
                            player.insertPhase();
                        },
                    },
                    kivajiaxi: {
                        trigger: {
                            player: ["phaseBefore", "equipAfter", "loseAfter"],
                        },
                        forced: true,
                        popup: false,
                        derivation: ["wusheng", "xuanfeng", "reyingzi", "xinshensu"],
                        filter: function (event, player) {
                            if (player.equiping) return false;
                            var suits = [];
                            var es = player.getCards('e');
                            for (var i = 0; i < es.length; i++) {
                                suits.add(get.suit(es[i]));
                            }
                            if (player.additionalSkills.kivajiaxi) {
                                return player.additionalSkills.kivajiaxi.length != suits.length;
                            }
                            else {
                                return suits.length > 0;
                            }
                        },
                        content: function () {
                            var suits = [];
                            var es = player.getCards('e');
                            for (var i = 0; i < es.length; i++) {
                                suits.add(get.suit(es[i]));
                            }
                            player.removeAdditionalSkill('kivajiaxi');
                            switch (suits.length) {
                                case 1: player.addAdditionalSkill('kivajiaxi', ['wusheng']); break;
                                case 2: player.addAdditionalSkill('kivajiaxi', ['wusheng', 'xuanfeng']); break;
                                case 3: player.addAdditionalSkill('kivajiaxi', ['mashu', 'xuanfeng', 'reyingzi']); break;
                                case 4: player.addAdditionalSkill('kivajiaxi', ['mashu', 'xuanfeng', 'reyingzi', 'xinshensu']); break;
                            }
                        },
                        ai: {
                            threaten: 1.2,
                        },
                    },
                    juepokiva: {
                        locked: true,
                        audio: "ext:王朝更替_策:1",
                        global: "juepokiva2",
                        trigger: {
                            global: "dying",
                        },
                        priority: 15,
                        forced: true,
                        filter: function (event, player) {
                            return _status.currentPhase == player && event.player != player;
                        },
                        content: function () { },
                    },
                    kivalongyi: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "shaMiss",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return player.canUse('sha', event.target) && player.hasSha();
                        },
                        content: function () {
                            "step 0"
                            if (player.hasSkill('jiu')) {
                                game.broadcastAll(function (player) {
                                    player.removeSkill('jiu');
                                }, player);
                                event.jiu = true;
                            }
                            player.chooseToUse(get.prompt('qinglong'), { name: 'sha' }, trigger.target, -1).set('addCount', false).logSkill = 'qinglong_skill';
                            "step 1"
                            if (result.bool);
                            else if (event.jiu) {
                                player.addSkill('jiu');
                            }
                        },
                        skillAnimation: true,
                        animationColor: "metal",
                    },
                    kivayuanshe: {
                        enable: "chooseToUse",
                        audio: "ext:王朝更替_策:1",
                        filter: function (event, player) {
                            return player.countCards('e') > 0;
                        },
                        filterCard: true,
                        position: "e",
                        viewAs: {
                            name: "wanjian",
                            suit: "spade",
                            number: 1,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "spade", "number": 1, "name": "baihupifeng", "cardid": "4840112339", "clone": { "name": "baihupifeng", "suit": "spade", "number": 1, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 595 }, "original": "e", "timeout": 534 }],
                        },
                        prompt: "将一张装备区内的牌当万箭齐发使用",
                        check: function (card) {
                            var player = _status.currentPhase;
                            if (player.countCards('he', { subtype: get.subtype(card) }) > 1) {
                                return 11 - get.equipValue(card);
                            }
                            if (player.countCards('h') < player.hp) {
                                return 6 - get.value(card);
                            }
                            return 2 - get.equipValue(card);
                        },
                        ai: {
                            order: 9,
                            threaten: 1.1,
                            wuxie: function (target, card, player, viewer) {
                                if (get.attitude(viewer, target) > 0 && target.countCards('h', 'sha')) {
                                    if (!target.countCards('h') || target.hp == 1 || Math.random() < 0.7) return 0;
                                }
                            },
                            basic: {
                                order: 9,
                                useful: [5, 1],
                                value: 5,
                            },
                            result: {
                                target: function (player, target) {
                                    if (player.hasUnknown(2) && get.mode() != 'guozhan') return 0;
                                    var nh = target.countCards('h');
                                    if (get.mode() == 'identity') {
                                        if (target.isZhu && nh <= 2 && target.hp <= 1) return -100;
                                    }
                                    if (nh == 0) return -2;
                                    if (nh == 1) return -1.7
                                    return -1.5;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondSha: 1,
                                damage: 1,
                                multitarget: 1,
                                multineg: 1,
                                respondShan: 1,
                            },
                        },
                    },
                    longhukiva: {
                        locked: true,
                        audio: "ext:王朝更替_策:1",
                        global: "longhukiva2",
                        trigger: {
                            global: "dying",
                        },
                        priority: 15,
                        forced: true,
                        filter: function (event, player) {
                            return _status.currentPhase == player && event.player != player;
                        },
                        content: function () { },
                    },
                    "kivatxx3": {
                        mod: {
                            cardUsable: function (card, player, num) {
                                if (card.name == 'sha' && player.storage.kivatxx3) return num + player.storage.kivatxx3;
                            },
                        },
                        onremove: true,
                    },
                    "kivatxx2": {
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.storage.kivatxx.length > 0;
                        },
                        content: function () {
                            player.draw(2 * player.storage.kivatxx.length);
                            player.addTempSkill('kivatxx3');
                            player.$throw(player.storage.kivatxx.slice(0), 1000);
                            player.storage.kivatxx3 = player.storage.kivatxx.length;
                            while (player.storage.kivatxx.length) {
                                player.storage.kivatxx.shift().discard();
                            }
                            player.unmarkSkill('kivatxx')
                        },
                    },
                    kivajunbing: {
                        global: "kivajunbing2",
                        unique: true,
                        forceunique: true,
                        audio: "junbing",
                    },
                    kivaquji: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "quji",
                        position: "he",
                        filterCard: true,
                        selectCard: function () {
                            var player = _status.event.player;
                            var num = game.countPlayer(function (current) {
                                return current.isDamaged();
                            });
                            return [1, Math.min(num, player.maxHp - player.hp)];
                        },
                        filterTarget: function (card, player, target) {
                            return target.hp < target.maxHp;
                        },
                        filter: function (event, player) {
                            return player.hp < player.maxHp;
                        },
                        selectTarget: function () {
                            return ui.selected.cards.length;
                        },
                        check: function (card) {
                            var player = _status.event.player;
                            if (ui.selected.cards.length >= game.countPlayer(function (current) {
                                return get.attitude(player, current) > 0 && current.isDamaged();
                            })) {
                                return -1;
                            }
                            if (get.color(card) == 'black') return -1;
                            return 9 - get.value(card);
                        },
                        content: function () {
                            "step 0"
                            target.recover();
                            target.draw();
                            "step 1"
                            if (target == player) {
                                for (var i = 0; i < cards.length; i++) {
                                    if (get.color(cards[i]) == 'black') {
                                        player.loseHp();
                                        player.draw();
                                        break;
                                    }
                                }
                            }
                        },
                        ai: {
                            result: {
                                target: 1,
                            },
                            order: 6,
                        },
                    },
                    "kivajunbing2": {
                        trigger: {
                            player: "phaseEnd",
                        },
                        filter: function (event, player) {
                            if (player.countCards('h') > 1) return false;
                            return game.hasPlayer(function (current) {
                                return current.hasSkill('kivajunbing');
                            });
                        },
                        check: function (event, player) {
                            var target = game.findPlayer(function (current) {
                                return current.hasSkill('kivajunbing');
                            });
                            if (target) {
                                var num = target.countCards('h');
                                var att = get.attitude(player, target);
                                if (num == 0) return true;
                                if (num == 1) return att > -1;
                                if (num == 2) return att > 0;
                                return att > 1;
                            }
                            return false;
                        },
                        content: function () {
                            "step 0"
                            player.draw(2);
                            player.discard();
                            if (player.hasSkill('kivajunbing')) {
                                event.finish();
                            }
                            else {
                                event.target = game.findPlayer(function (current) {
                                    return current.hasSkill('kivajunbing');
                                });
                            }
                            "step 1"
                            var cards = player.getCards('h');
                            target.gain(cards, player);
                            event.num = cards.length;
                            player.$give(event.num, target);
                            game.delay();
                            "step 2"
                            target.chooseCard('选择还给' + get.translation(player) + '的牌', true, event.num);
                            game.delay(0.2);
                            "step 3"
                            player.gain(result.cards, target);
                            target.$give(result.cards.length, player);
                            game.delay();
                        },
                        forceaudio: true,
                        audio: "junbing",
                    },
                    kivazhengfu: {
                        audio: "ext:王朝更替_策:2",
                        enable: ["chooseToRespond", "chooseToUse"],
                        filterCard: function (card, player) {
                            if (get.zhu(player, 'shouyue')) return true;
                            return get.color(card) == 'red';
                        },
                        position: "he",
                        viewAs: {
                            name: "sha",
                            suit: "diamond",
                            number: 1,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "diamond", "number": 1, "name": "kiva115", "cardid": "3212119367", "clone": { "name": "kiva115", "suit": "diamond", "number": 1, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 3839 }, "original": "e", "timeout": 3788 }],
                        },
                        viewAsFilter: function (player) {
                            if (get.zhu(player, 'shouyue')) {
                                if (!player.countCards('he')) return false;
                            }
                            else {
                                if (!player.countCards('he', { color: 'red' })) return false;
                            }
                        },
                        prompt: "将一张红色牌当杀使用或打出",
                        check: function (card) { return 4 - get.value(card) },
                        ai: {
                            skillTagFilter: function (player) {
                                if (get.zhu(player, 'shouyue')) {
                                    if (!player.countCards('he')) return false;
                                }
                                else {
                                    if (!player.countCards('he', { color: 'red' })) return false;
                                }
                            },
                            respondSha: true,
                            basic: {
                                useful: [5, 1],
                                value: [5, 1],
                            },
                            order: function () {
                                if (_status.event.player.hasSkillTag('presha', true, null, true)) return 10;
                                return 3;
                            },
                            result: {
                                target: function (player, target) {
                                    if (player.hasSkill('jiu') && !target.getEquip('baiyin')) {
                                        if (get.attitude(player, target) > 0) {
                                            return -6;
                                        }
                                        else {
                                            return -3;
                                        }
                                    }
                                    return -1.5;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function (card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function (card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function (card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function (card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function (card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                            },
                        },
                        audioname: ["re_guanyu", "guanzhang", "jsp_guanyu", "guansuo"],
                    },
                    kivaxiaozhan: {
                        group: ["kivaxiaozhan1", "kivaxiaozhan2"],
                        ai: {
                            combo: "kivazhengfu",
                            mingzhi: false,
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.tag(card, 'respondSha') || get.tag(card, 'respondSha')) {
                                        if (get.attitude(target, player) <= 0) {
                                            if (current > 0) return;
                                            if (target.countCards('h') == 0) return 1.6;
                                            if (target.countCards('h') == 1) return 1.2;
                                            if (target.countCards('h') == 2) return [0.8, 0.2, 0, -0.2];
                                            return [0.4, 0.7, 0, -0.7];
                                        }
                                    }
                                },
                            },
                        },
                    },
                    "kivaxiaozhan1": {
                        audio: "ducai",
                        trigger: {
                            player: "shaBefore",
                        },
                        filter: function (event, player) {
                            if (event.skill != 'kivazhengfu' && event.skill != 'wusheng') return false;
                            return event.target.countCards('hej') > 0;
                        },
                        logTarget: "target",
                        content: function () {
                            var card = trigger.target.getCards('hej').randomGet();
                            player.gain(card, trigger.target);
                            trigger.target.$giveAuto(card, player);
                            game.delay();
                        },
                    },
                    "kivaxiaozhan2": {
                        audio: "ducai",
                        trigger: {
                            player: "respond",
                        },
                        filter: function (event, player) {
                            if (event.skill != 'kivazhengfu' && event.skill != 'kivazhengfu' &&
                                event.skill != 'wusheng' && event.skill != 'wusheng') return false;
                            return event.source && event.source.countCards('hej') > 0;
                        },
                        logTarget: "source",
                        content: function () {
                            var card = trigger.source.getCards('hej').randomGet();
                            player.gain(card, trigger.source);
                            trigger.source.$giveAuto(card, player);
                            game.delay();
                        },
                    },
                    kivafenglue: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivafenglue')).set('ai', function (target) {
                                var player = _status.event.player;
                                if (get.attitude(player, target) > 0) {
                                    return get.recoverEffect(target, player, player) + 1;
                                }
                                return 0;
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('kivafenglue', result.targets);
                                var target = result.targets[0];
                                event.target = target;
                                target.judge(function (card) {
                                    if (target.hp == target.maxHp) {
                                        if (get.color(card) == 'red') return -1;
                                    }
                                    if (get.color(card) == 'red') return 1;
                                    return 0;
                                });
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            if (result.color) {
                                if (result.color == 'red') {
                                    if (event.target.hp < event.target.maxHp) event.target.draw(3);
                                }
                                else {
                                    event.target.draw(2);
                                    event.player.draw();
                                }
                            }
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                        },
                    },
                    kivamoushi: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: ["respondAfter", "useCardAfter"],
                        },
                        filter: function (event, player) {
                            if (!event.respondTo) return false;
                            if (event.player == player) return false;
                            if (player != event.respondTo[0]) return false;
                            if (get.itemtype(event.cards) != 'cards') return false;
                            if (['h', 'e', 'j'].contains(get.position(event.cards[0]))) return false;
                            if (get.itemtype(event.respondTo[1]) != 'card') return false;
                            if (['h', 'e', 'j'].contains(get.position(event.respondTo[1]))) return false;
                            return true;
                        },
                        logTarget: "player",
                        check: function (event, player) {
                            if (get.attitude(player, event.player) >= 0) return true;
                            if (player.hasSkill('funan_jiexun') && player.storage.funan_jiexun == event.player) return true;
                            if (event.cards.length > 1) return true;
                            return get.value(event.cards[0]) > get.value(event.respondTo[1]);
                        },
                        content: function () {
                            'step 0'
                            if (!player.hasSkill('funan_jiexun') || player.storage.funan_jiexun != trigger.player) {
                                trigger.player.gain(trigger.respondTo[1], 'gain2');
                                trigger.player.addTempSkill('funan_use');
                                if (!trigger.player.storage.funan_use) {
                                    trigger.player.storage.funan_use = [];
                                }
                                trigger.player.storage.funan_use.add(trigger.respondTo[1]);
                            }
                            'step 1'
                            player.gain(trigger.cards, 'gain2');
                        },
                        subSkill: {
                            jiexun: {
                                mark: "character",
                                intro: {
                                    content: "你发动“复难”时，无须令$获得你使用的牌",
                                },
                                trigger: {
                                    global: "dieAfter",
                                },
                                silent: true,
                                filter: function (event, player) {
                                    return player.storage.funan_jiexun == event.player;
                                },
                                onremove: true,
                                content: function () {
                                    player.removeSkill('funan_jiexun');
                                },
                                sub: true,
                                forced: true,
                                popup: false,
                            },
                            use: {
                                onremove: true,
                                mod: {
                                    cardEnabled: function (card, player) {
                                        if (player.storage.funan_use && player.storage.funan_use.contains(card)) {
                                            return false;
                                        }
                                    },
                                },
                                sub: true,
                            },
                        },
                    },
                    kivaliangmou: {
                        trigger: {
                            source: "damageBefore",
                        },
                        forced: true,
                        content: function () {
                            trigger.nature = 'poison';
                        },
                    },
                    kivashiquan: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "dieAfter",
                        },
                        forced: true,
                        unique: true,
                        content: function () {
                            player.draw();
                            player.recover();
                            player.addTempSkill('zhiyu', { player: 'phaseUseBegin' });
                            var chat = ['智愚百策，不便告于他人。', '静观其变，即可。'].randomGet()
                            player.say(chat)
                        },
                        ai: {
                            threaten: 1.5,
                        },
                    },
                    kivaqiongtu: {
                        trigger: {
                            player: ["phaseBefore", "changeHp"],
                        },
                        forced: true,
                        popup: false,
                        unique: true,
                        derivation: ["wushuang", "jiuchi", "kivabaoli"],
                        content: function () {
                            player.removeAdditionalSkill('kivaqiongtu');
                            var list = [];
                            if (player.hp >= 3) {
                                list.push('wushuang');
                            }
                            if (player.hp <= 3) {
                                list.push('jiuchi');
                            }
                            if (list.length) {
                                player.addAdditionalSkill('kivaqiongtu', list);
                            }
                        },
                        ai: {
                            maixie: false,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (!target.hasFriend()) return;
                                        if (target.hp >= 4) return [0, 1];
                                    }
                                    if (get.tag(card, 'recover') && player.hp >= player.maxHp - 1) return [0, 0];
                                },
                            },
                        },
                    },
                    kivabaoli: {
                        unique: true,
                        global: "kivabaoli2",
                        zhuSkill: true,
                        audio: "retieqi",
                    },
                    "kivabaoli2": {
                        audio: "retieqi",
                        enable: "phaseUse",
                        discard: false,
                        line: true,
                        prepare: "give",
                        filter: function (event, player) {
                            if (player.group != 'qun') return false;
                            if (player.countCards('h', 'sha') + player.countCards('h', 'spade') == 0) return 0;
                            return game.hasPlayer(function (target) {
                                return target != player && target.hasZhuSkill('kivabaoli', player);
                            });
                        },
                        filterCard: function (card) {
                            return (card.name == 'sha' || card.suit == 'spade')
                        },
                        filterTarget: function (card, player, target) {
                            return target != player && target.hasZhuSkill('kivabaoli', player);
                        },
                        usable: 1,
                        forceaudio: false,
                        content: function (player) {
                            game.playAudio('skill', 'huangtian_' + target.name + Math.ceil(2 * Math.random()));
                            target.gain(cards, player);
                        },
                        ai: {
                            expose: 0.3,
                            order: 10,
                            result: {
                                target: 5,
                            },
                        },
                        audioname: ["sp_zhangjiao"],
                    },
                    kivajinqu: {
                        trigger: {
                            player: "phaseEnd",
                        },
                        audio: "jinqu",
                        check: function (event, player) {
                            return player.storage.qizhi >= player.countCards('h');
                        },
                        prompt: function (event, player) {
                            if (typeof player.storage.qizhi != 'number') {
                                '进趋：是否摸两张牌并将手牌弃置至' + get.cnNumber(0) + '张？';
                            }
                            return '进趋：是否摸两张牌并将手牌弃置至' + get.cnNumber(player.storage.qizhi) + '张？';
                        },
                        content: function () {
                            'step 0'
                            event.num = player.hp
                            player.draw(event.num);
                            'step 1'
                            if (typeof player.storage.qizhi != 'number') {
                                player.storage.qizhi = 0;
                            }
                            var dh = player.countCards('h') - player.storage.qizhi;
                            if (dh > 0) {
                                player.chooseToDiscard(dh, true);
                            }
                        },
                    },
                    kivacanshi: {
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            if (player.isUnseen()) return false;
                            return game.hasPlayer(function (current) {
                                return player.canUse('gw_youer', current);
                            });
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget('蚕食：选择诱饵的目标', function (card, player, target) {
                                return player.canUse({ name: 'gw_youer' }, target);
                            }, true).set('ai', function (target) {
                                var player = _status.event.player;
                                return get.effect(target, { name: 'gw_youer' }, player, player);
                            });
                            'step 1'
                            if (result.bool) {
                                player.useCard({ name: 'gw_youer' }, result.targets);
                            }
                        },
                    },
                    kivashichou: {
                        trigger: {
                            player: ["phaseBefore", "changeHp"],
                        },
                        forced: true,
                        audio: "ext:王朝更替_策:2",
                        popup: false,
                        unique: true,
                        content: function () {
                            player.removeAdditionalSkill('kivashichou');
                            var list = [];
                            if (player.hp <= 3) {
                                list.push('kivashichou1');
                            }
                            if (player.hp <= 2) {
                                list.push('kivashichou2');
                            }
                            if (player.hp <= 1) {
                                list.push('kivashichou3');
                            }
                            if (list.length) {
                                player.addAdditionalSkill('kivashichou', list);
                            }
                        },
                        ai: {
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (!target.hasFriend()) return;
                                        if (target.hp >= 4) return [0, 1];
                                    }
                                    if (get.tag(card, 'recover') && player.hp >= player.maxHp - 1) return [0, 0];
                                },
                            },
                        },
                    },
                    kivazhuiji: {
                        trigger: {
                            player: ["phaseBefore", "changeHp"],
                        },
                        forced: true,
                        popup: false,
                        unique: true,
                        content: function () {
                            player.removeAdditionalSkill('kivazhuiji');
                            var list = [];
                            if (player.hp <= 3) {
                                list.push('kivazhuiji1');
                            }
                            if (player.hp <= 2) {
                                list.push('kivazhuiji2');
                            }
                            if (player.hp <= 1) {
                                list.push('kivazhuiji3');
                            }
                            if (list.length) {
                                player.addAdditionalSkill('kivazhuiji', list);
                            }
                        },
                        ai: {
                            maixie: true,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (!target.hasFriend()) return;
                                        if (target.hp >= 4) return [0, 1];
                                    }
                                    if (get.tag(card, 'recover') && player.hp >= player.maxHp - 1) return [0, 0];
                                },
                            },
                        },
                    },
                    "kivazhuiji1": {
                        mod: {
                            globalFrom: function (from, to, distance) {
                                return distance - 1;
                            },
                        },
                    },
                    "kivazhuiji2": {
                        mod: {
                            globalFrom: function (from, to, distance) {
                                return distance - 2;
                            },
                        },
                    },
                    "kivazhuiji3": {
                        mod: {
                            globalFrom: function (from, to, distance) {
                                return distance - 7;
                            },
                        },
                    },
                    "kivashichou1": {
                        trigger: {
                            player: "useCard",
                        },
                        filter: function (event, player) {
                            if (event.card.name != 'sha') return false;
                            return game.hasPlayer(function (current) {
                                return !event.targets.contains(current) && get.distance(player, current) <= 1 && player.canUse('sha', current);
                            });
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivashichou1'), function (card, player, target) {
                                return !_status.event.source.contains(target) && get.distance(player, target) <= 1 && player.canUse('sha', target);
                            }).set('source', trigger.targets).set('ai', function (target) {
                                var player = _status.event.player;
                                return get.effect(target, { name: 'sha' }, player, player);
                            });
                            'step 1'
                            if (result.bool) {
                                if (!event.isMine() && !_status.connectMode) game.delayx();
                                event.target = result.targets[0];
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            player.logSkill('kivashichou1', event.target);
                            trigger.targets.push(event.target);
                        },
                        ai: {
                            effect: {
                                player: function (card, player, target) {
                                    if (card.name == 'sha') {
                                        if (player._duanbingtmp) return;
                                        player._duanbingtmp = true;
                                        if (get.effect(target, { name: 'sha' }, player, player) <= 0) {
                                            delete player._duanbingtmp;
                                            return;
                                        }
                                        if (game.hasPlayer(function (current) {
                                            return current != target && get.distance(player, current) <= 1 &&
                                                player.canUse('sha', current) && get.effect(current, { name: 'sha' }, player, player) > 0;
                                        })) {
                                            delete player._duanbingtmp;
                                            return [1, 1];
                                        }
                                        delete player._duanbingtmp;
                                    }
                                },
                            },
                        },
                        audioname: ["heqi"],
                    },
                    "kivashichou2": {
                        trigger: {
                            player: "useCard",
                        },
                        filter: function (event, player) {
                            if (event.card.name != 'sha') return false;
                            return game.hasPlayer(function (current) {
                                return !event.targets.contains(current) && get.distance(player, current) <= 1 && player.canUse('sha', current);
                            });
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivashichou2'), function (card, player, target) {
                                return !_status.event.source.contains(target) && get.distance(player, target) <= 1 && player.canUse('sha', target);
                            }).set('source', trigger.targets).set('ai', function (target) {
                                var player = _status.event.player;
                                return get.effect(target, { name: 'sha' }, player, player);
                            });
                            'step 1'
                            if (result.bool) {
                                if (!event.isMine() && !_status.connectMode) game.delayx();
                                event.target = result.targets[0];
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            player.logSkill('kivashichou2', event.target);
                            trigger.targets.push(event.target);
                        },
                        ai: {
                            effect: {
                                player: function (card, player, target) {
                                    if (card.name == 'sha') {
                                        if (player._duanbingtmp) return;
                                        player._duanbingtmp = true;
                                        if (get.effect(target, { name: 'sha' }, player, player) <= 0) {
                                            delete player._duanbingtmp;
                                            return;
                                        }
                                        if (game.hasPlayer(function (current) {
                                            return current != target && get.distance(player, current) <= 1 &&
                                                player.canUse('sha', current) && get.effect(current, { name: 'sha' }, player, player) > 0;
                                        })) {
                                            delete player._duanbingtmp;
                                            return [1, 1];
                                        }
                                        delete player._duanbingtmp;
                                    }
                                },
                            },
                        },
                        audioname: ["heqi"],
                    },
                    "kivashichou3": {
                        trigger: {
                            player: "useCard",
                        },
                        filter: function (event, player) {
                            if (event.card.name != 'sha') return false;
                            return game.hasPlayer(function (current) {
                                return !event.targets.contains(current) && get.distance(player, current) <= 1 && player.canUse('sha', current);
                            });
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivashichou3'), function (card, player, target) {
                                return !_status.event.source.contains(target) && get.distance(player, target) <= 1 && player.canUse('sha', target);
                            }).set('source', trigger.targets).set('ai', function (target) {
                                var player = _status.event.player;
                                return get.effect(target, { name: 'sha' }, player, player);
                            });
                            'step 1'
                            if (result.bool) {
                                if (!event.isMine() && !_status.connectMode) game.delayx();
                                event.target = result.targets[0];
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            player.logSkill('kivashichou3', event.target);
                            trigger.targets.push(event.target);
                        },
                        ai: {
                            effect: {
                                player: function (card, player, target) {
                                    if (card.name == 'sha') {
                                        if (player._duanbingtmp) return;
                                        player._duanbingtmp = true;
                                        if (get.effect(target, { name: 'sha' }, player, player) <= 0) {
                                            delete player._duanbingtmp;
                                            return;
                                        }
                                        if (game.hasPlayer(function (current) {
                                            return current != target && get.distance(player, current) <= 1 &&
                                                player.canUse('sha', current) && get.effect(current, { name: 'sha' }, player, player) > 0;
                                        })) {
                                            delete player._duanbingtmp;
                                            return [1, 1];
                                        }
                                        delete player._duanbingtmp;
                                    }
                                },
                            },
                        },
                        audioname: ["heqi"],
                    },
                    kivamiyin: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "dieBegin",
                        },
                        direct: true,
                        unique: true,
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('kivamiyin'), function (card, player, target) {
                                return player != target;
                            }).ai = function (target) {
                                return get.attitude(player, target);
                            };
                            "step 1"
                            if (result.bool) {
                                var cards = player.getCards('hej');
                                var target = result.targets[0];
                                // if(player.storage.shuiyun&&player.storage.shuiyun.length){
                                //     target.gainMaxHp();
                                //     target.recover(player.storage.shuiyun.length);
                                //     cards=cards.concat(player.storage.shuiyun);
                                //     player.storage.shuiyun.length=0;
                                // }
                                target.draw(3);
                                target.addSkill('kivamoushi');
                                player.logSkill('kivamiyin', target);
                                target.marks.changnian = target.markCharacter(player, {
                                    name: '谋识',
                                    content: '<div class="skill">【谋识】</div><div>其他角色使用或打出牌响应你使用的牌时，你可令其获得你使用的牌（其本回合不能使用或打出这张牌），然后你获得其使用或打出的牌</div>'
                                });
                                game.addVideo('markCharacter', target, {
                                    name: '谋识',
                                    content: '<div class="skill">【谋识】</div><div>其他角色使用或打出牌响应你使用的牌时，你可令其获得你使用的牌（其本回合不能使用或打出这张牌），然后你获得其使用或打出的牌</div>',
                                    id: 'kivamoushi',
                                    target: player.dataset.position
                                });
                            }
                        },
                        ai: {
                            threaten: 0.8,
                        },
                    },
                    kivayewang: {
                        audio: "ext:王朝更替_策:3",
                        trigger: {
                            player: "damageEnd",
                        },
                        filter: function (event, player) {
                            return get.itemtype(event.cards) == 'cards' && get.position(event.cards[0]) == 'd';
                        },
                        content: function () {
                            player.gain(trigger.cards);
                            player.$gain2(trigger.cards);
                            player.addTempSkill('kivayewang1', { source: 'damageEnd' });
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                            effect: {
                                target: function (card, player, target) {
                                    if (player.hasSkillTag('jueqing', false, target)) return [1, -1];
                                    if (get.tag(card, 'damage')) return [1, 0.5];
                                },
                            },
                        },
                    },
                    kivabuwu: {
                        audio: "ext:王朝更替_策:3",
                        trigger: {
                            source: "damageEnd",
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            player.draw();
                        },
                    },
                    "kivayewang1": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            source: "damageBegin",
                        },
                        frequent: true,
                        content: function () {
                            trigger.num += 1;
                        },
                    },
                    kivazhichen: {
                        unique: true,
                        gainable: true,
                        group: ["rende", "wangxi"],
                    },
                    kivaduoquan: {
                        derivation: ["kivafengchen", "jiuyuan", "fulin"],
                        audio: "ext:王朝更替_策:1",
                        unique: true,
                        enable: "chooseToUse",
                        mark: true,
                        skillAnimation: true,
                        animationColor: "fire",
                        init: function (player) {
                            player.storage.kivaduoquan = false;
                        },
                        filter: function (event, player) {
                            if (player.storage.kivaduoquan) return false;
                            if (event.type == 'dying') {
                                if (player != event.dying) return false;
                                return true;
                            }
                            return false;
                        },
                        content: function () {
                            'step 0'
                            player.awakenSkill('kivaduoquan');
                            player.storage.kivaduoquan = true;
                            var num = player.maxHp - player.countCards('h');
                            if (num > 0) {
                                player.draw(num);
                            }
                            'step 1'
                            if (player.hp < 2) {
                                player.recover(2 - player.hp);
                            }
                            'step 2'
                            player.removeSkill('kivazhichen');
                            player.addSkill('kivafengchen');
                            player.addSkill('fulin');
                            player.addSkill('jiuyuan');
                            player.removeSkill('kivapoxuan');
                        },
                        ai: {
                            order: 1,
                            skillTagFilter: function (player) {
                                if (player.storage.kivaduoquan) return false;
                                if (player.hp > 0) return false;
                            },
                            save: true,
                            result: {
                                player: 10,
                            },
                        },
                        intro: {
                            content: "limited",
                        },
                    },
                    kivafengchen: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        position: "hej",
                        filterCard: true,
                        selectCard: [1, 4],
                        prompt: "弃置四张牌并摸等量的牌",
                        check: function (card) {
                            return 6 - get.value(card)
                        },
                        content: function () {
                            player.draw(cards.length);
                        },
                        ai: {
                            order: 1,
                            result: {
                                player: 1,
                            },
                            threaten: 1.5,
                        },
                    },
                    "kivayinren1": {
                        trigger: {
                            target: "shaBefore",
                        },
                        forced: true,
                        priority: 6,
                        audio: "renwang_skill",
                        filter: function (event) {
                            if (event.player.hasSkillTag('unequip', false, event.card)) return false;
                            return (event.card.name == 'sha' && get.color(event.card) == 'black')
                        },
                        content: function () {
                            trigger.cancel();
                        },
                        ai: {
                            effect: {
                                target: function (card, player) {
                                    if (player.hasSkillTag('unequip', false, card)) return;
                                    if (card.name == 'sha' && get.color(card) == 'black') return 'zerotarget';
                                },
                            },
                        },
                    },
                    "kivayinren2": {
                        trigger: {
                            player: "damageBegin",
                        },
                        forced: true,
                        audio: "baiyin_skill",
                        filter: function (event, player) {
                            if (event.num <= 1) return false;
                            if (event.source && event.source.hasSkillTag('unequip', false, event.card)) return false;
                            return true;
                        },
                        priority: -10,
                        content: function () {
                            trigger.num = 1;
                        },
                    },
                    kivayinren: {
                        unique: true,
                        gainable: true,
                        group: ["kivayinren1", "kivayinren2"],
                    },
                    kivamujiang: {
                        derivation: ["kivajiangjun"],
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "phaseEnd",
                        },
                        filter: function (event, player) {
                            return event.player.isAlive() && event.player != player && player.countCards('h', { type: 'basic' });
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            var nono = (Math.abs(get.attitude(player, trigger.player)) < 3);
                            if (get.damageEffect(trigger.player, player, player) <= 0) {
                                nono = true;
                            }
                            var next = player.chooseToDiscard(get.prompt('kivamujiang', trigger.player), { type: 'basic' });
                            next.set('ai', function (card) {
                                if (_status.event.nono) return 0;
                                return 8 - get.useful(card);
                            });
                            next.set('logSkill', ['kivamujiang', trigger.player]);
                            next.set('nono', nono);
                            "step 1"
                            if (result.bool) {
                                var nono = (get.damageEffect(trigger.player, player, trigger.player) >= 0);
                                trigger.player.chooseToDiscard('he', { type: 'equip' }).set('ai', function (card) {
                                    if (_status.event.nono) {
                                        return 0;
                                    }
                                    if (_status.event.player.hp == 1) return 10 - get.value(card);
                                    return 9 - get.value(card);
                                }).set('nono', nono);
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.bool) {
                                player.draw();
                                player.removeSkill('kivayinren');
                                player.addSkill('kivajiangjun');
                            }
                            else {
                                trigger.player.damage();
                            }
                        },
                        ai: {
                            expose: 0.3,
                            threaten: 1.3,
                        },
                    },
                    kivajiangjun: {
                        unique: true,
                        gainable: true,
                        group: ["reyingzi", "fulu", "paoxiao"],
                    },
                    kivaclockup: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseBegin",
                        },
                        direct: true,
                        nature: "thunder",
                        content: function () {
                            "step 0"
                            var chat = ['是否Rider Kick？'].randomGet()
                            player.say(chat);
                            "step 1"
                            var chat = ['是否Rider Kick？'].randomGet()
                            player.say(chat);
                            "step 2"
                            var chat = ['是否Rider Kick？'].randomGet()
                            player.say(chat);
                            "step 3"
                            player.chooseTarget(get.prompt('kivaclockup'), function (card, player, target) {
                                return lib.filter.targetEnabled({ name: 'sha' }, player, target);
                            }).set('ai', function (target) {
                                return get.effect(target, { name: 'sha' }, _status.event.player);
                            });
                            "step 4"
                            if (result.bool) {
                                player.logSkill('kivaclockup');
                                player.useCard({ name: 'sha' }, result.targets, false);
                                var chat = ['Rider Kick！'].randomGet()
                                player.say(chat);
                            }
                        },
                        ai: {
                            threaten: function (player, target) {
                                return 1.6;
                            },
                        },
                    },
                    kivatuibian: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "damageEnd",
                        },
                        frequent: true,
                        content: function () {
                            player.addTempSkill('kivakabutokiva2', { source: 'damageEnd' });
                        },
                    },
                    "kivakabutokiva2": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            source: "damageBegin",
                        },
                        frequent: true,
                        content: function () {
                            trigger.num += 1;
                        },
                    },
                    kivakunzhong: {
                        trigger: {
                            player: "dieBegin",
                        },
                        direct: true,
                        unique: true,
                        derivation: "tianming",
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('kivakunzhong'), function (card, player, target) {
                                return player != target;
                            }).ai = function (target) {
                                return get.attitude(player, target);
                            };
                            "step 1"
                            if (result.bool) {
                                var cards = player.getCards('hej');
                                var target = result.targets[0];
                                // if(player.storage.shuiyun&&player.storage.shuiyun.length){
                                //     target.gainMaxHp();
                                //     target.recover(player.storage.shuiyun.length);
                                //     cards=cards.concat(player.storage.shuiyun);
                                //     player.storage.shuiyun.length=0;
                                // }
                                player.$give(cards, target);
                                target.gain(cards);
                                target.addSkill('tianming');
                                target.removeSkill('yicong');
                                target.removeSkill('reyicong');
                                player.logSkill('kivakunzhong', target);
                                target.marks.changnian = target.markCharacter(player, {
                                    name: '天命',
                                    content: '<div class="skill">【天命】</div><div>在此乱世，唯独仅有天命！</div>'
                                });
                                game.addVideo('markCharacter', target, {
                                    name: '天命',
                                    content: '<div class="skill">【天命】</div><div>在此乱世，唯独仅有天命！</div>',
                                    id: 'kivakunzhong',
                                    target: player.dataset.position
                                });
                            }
                        },
                        ai: {
                            threaten: 0.8,
                        },
                    },
                    kivabeifa: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBefore",
                        },
                        content: function () {
                            "step 0"
                            trigger.cancel();
                            "step 1"
                            event.cards = get.cards(5);
                            if (event.isMine() == false) {
                                event.dialog = ui.create.dialog('北伐', event.cards);
                                game.delay(2);
                            }
                            "step 2"
                            if (event.dialog) event.dialog.close();
                            var dialog = ui.create.dialog('北伐', event.cards);
                            player.chooseButton([0, 5], dialog, true).set('ai', function (button) {
                                return get.value(button.link);
                            }).filterButton = function (button) {
                                for (var i = 0; i < ui.selected.buttons.length; i++) {
                                    if (get.suit(button.link) == get.suit(ui.selected.buttons[i].link)) return false;
                                }
                                return true;
                            }
                            "step 3"
                            var cards2 = [];
                            for (var i = 0; i < result.buttons.length; i++) {
                                cards2.push(result.buttons[i].link);
                                cards.remove(result.buttons[i].link);
                            }
                            player.gain(cards2, 'log');
                            if (cards2.length) player.$gain2(cards2);
                            for (var i = 0; i < cards.length; i++) {
                                cards[i].discard();
                            }
                            game.delay(2);
                        },
                        ai: {
                            threaten: 1.2,
                        },
                    },
                    kivawenji: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            target: "useCardToBegin",
                        },
                        filter: function (event, player) {
                            if (get.color(event.card) != 'red') return false;
                            if (!event.player) return false;
                            if (event.player == player) return false;
                            return player.countCards('h', 'sha') > 0;
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            var next = player.chooseToDiscard('闻鸡：是否弃置一张杀并摸两张牌？', { name: 'sha' });
                            next.set('ai', function (card) {
                                return 9 - get.value(card);
                            });
                            next.logSkill = 'kivawenji';
                            "step 1"
                            if (result.bool) {
                                player.draw(2);
                            }
                        },
                        ai: {
                            effect: {
                                target: function (card, player, target) {
                                    if (get.color(card) == 'black' && target.countCards('h') > 0) {
                                        return [1, 0.5];
                                    }
                                },
                            },
                        },
                    },
                    kivatiancai: {
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        direct: true,
                        init: function (player) {
                            player.storage.kivatiancai = 0;
                        },
                        onremove: function (player) {
                            player.unmarkSkill('zhongjian');
                            delete player.storage.kivatiancai;
                        },
                        intro: {
                            content: function (storage) {
                                if (storage > 0) return '手牌上限+' + storage;
                                if (storage < 0) return '手牌上限' + storage;
                                return '手牌上限无变化';
                            },
                        },
                        content: function () {
                            'step 0'
                            if (player.isHealthy()) {
                                event.type = 0;
                                player.chooseBool(get.prompt('kivatiancai'), '手牌上限+1，然后本回合你的牌不能对其他角色使用', function (event, player) {
                                    return player.skipList.contains('phaseUse') || !player.needsToDiscard(1);
                                });
                            }
                            else {
                                event.type = 1;
                                player.chooseControlList(get.prompt('kivatiancai'), '手牌上限+1，然后本回合你的牌不能对其他角色使用', '回复1点体力，然后本回合你的牌不能对自己使用', function () {
                                    return 1;
                                });
                            }
                            'step 1'
                            if (event.type) {
                                if (result.control != 'cancel2') {
                                    player.logSkill('kivatiancai');
                                    if (result.index == 0) {
                                        player.addTempSkill('caishi2');
                                        player.storage.kivatiancai++;
                                        if (player.storage.kivatiancai >= 0) {
                                            player.unmarkSkill('zhongjian');
                                            if (player.storage.kivatiancai > 0) {
                                                player.markSkill('kivatiancai');
                                            }
                                        }
                                        else {
                                            player.updateMarks();
                                        }
                                    }
                                    else if (result.index == 1) {
                                        player.recover();
                                        player.addTempSkill('caishi3');
                                    }
                                }
                            }
                            else {
                                if (result.bool) {
                                    player.logSkill('kivatiancai');
                                    player.addTempSkill('caishi2');
                                    player.storage.caishi++;
                                    if (player.storage.caishi >= 0) {
                                        player.unmarkSkill('zhongjian');
                                        if (player.storage.kivatiancai > 0) {
                                            player.markSkill('kivatiancai');
                                        }
                                    }
                                    else {
                                        player.updateMarks();
                                    }
                                }
                            }
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                if (typeof player.storage.kivatiancai == 'number') return num + player.storage.kivatiancai;
                            },
                        },
                    },
                    kivachouce: {
                        audio: "chouce",
                        trigger: {
                            player: "damageEnd",
                        },
                        content: function () {
                            'step 0'
                            event.num = trigger.num;
                            'step 1'
                            player.judge();
                            'step 2'
                            event.color = result.color;
                            if (event.color == 'black') {
                                player.draw();
                                player.chooseTarget('弃置一名角色区域内的一张牌', true, function (card, player, target) {
                                    return target.countCards('hej');
                                }).set('ai', function (target) {
                                    var player = _status.event.player;
                                    var att = get.attitude(player, target);
                                    if (att < 0) {
                                        att = -Math.sqrt(-att);
                                    }
                                    else {
                                        att = Math.sqrt(att);
                                    }
                                    return att * lib.card.guohe.ai.result.target(player, target);
                                })
                            }
                            else {
                                var next = player.chooseTarget('令一名角色摸一张牌', true);
                                var xianfu = game.findPlayer(function (current) {
                                    return current.hasSkill('xianfu2') && current.storage.xianfu2 == player;
                                });
                                if (xianfu) {
                                    next.set('prompt2', '（若目标为' + get.translation(xianfu) + '则改为回复一点体力）');
                                }
                                next.set('ai', function (target) {
                                    var player = _status.event.player;
                                    var att = get.attitude(player, target) / Math.sqrt(1 + target.countCards('h'));
                                    if (target.storage.xianfu2 == player) return att * 2;
                                    return att;
                                })
                            }
                            'step 3'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.line(target, 'green');
                                if (event.color == 'black') {
                                    player.discardPlayerCard(target, 'hej', true);
                                }
                                else {
                                    if (target.hasSkill('xianfu2') && target.storage.xianfu2 == player) {
                                        target.recover();
                                    }
                                    else {
                                        target.draw();
                                    }
                                }
                            }
                            'step 4'
                            if (--event.num > 0) {
                                player.chooseBool('是否再次发动【筹策】？');
                            }
                            else {
                                event.finish();
                            }
                            'step 5'
                            if (result.bool) {
                                event.goto(1);
                            }
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                        if (!target.hasFriend()) return;
                                        if (target.hp >= 4) return [1, get.tag(card, 'damage') * 1.5];
                                        if (target.hp == 3) return [1, get.tag(card, 'damage') * 1];
                                        if (target.hp == 2) return [1, get.tag(card, 'damage') * 0.5];
                                    }
                                },
                            },
                        },
                    },
                    kivatiandu: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "judgeEnd",
                        },
                        frequent: function (event) {
                            if (event.result.card.name == 'du') return false;
                            if (get.mode() == 'guozhan') return false;
                            return true;
                        },
                        check: function (event) {
                            if (event.result.card.name == 'du') return false;
                            return true;
                        },
                        filter: function (event, player) {
                            if (get.owner(event.result.card)) {
                                return false;
                            }
                            if (event.nogain && event.nogain(event.result.card)) {
                                return false;
                            }
                            return true;
                        },
                        content: function () {
                            player.gain(trigger.result.card);
                            player.$gain2(trigger.result.card);
                        },
                        audioname: ["re_guojia"],
                    },
                    kivayuanlue: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            source: "damageEnd",
                        },
                        forced: true,
                        filter: function (event) {
                            return event.num > 0;
                        },
                        content: function () {
                            player.draw(trigger.num);
                        },
                        ai: {
                            damageBonus: true,
                        },
                    },
                    kivaliyuan: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseDiscardBegin",
                        },
                        forced: true,
                        content: function () {
                            player.removeSkill('cjcjjcjcjcjjcsksklansjsolz禁断的技能ixh');
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                return num - 2;
                            },
                        },
                    },
                    kivayingyuan: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "shaBegin",
                        },
                        direct: true,
                        content: function () {
                            player.link();
                            player.draw();
                        },
                    },
                    "kivayingyuan2": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "phaseDrawEnd",
                        },
                        direct: true,
                        content: function () {
                            player.chooseToUse({ name: 'sha' }, '应援：是否使用一张杀？').logSkill = 'kivayingyuan2';
                        },
                    },
                    "kivayingyuan3": {
                        unique: true,
                        gainable: true,
                        audio: "ext:王朝更替_策:2",
                        group: ["kivayingyuan", "kivayingyuan2", "kivayingyuan4"],
                    },
                    kivazishu: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num += 3;
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                return num - 4;
                            },
                        },
                    },
                    "kivayingyuan4": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            source: "damageEnd",
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            player.draw();
                        },
                    },
                    kivabeixian: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            source: "damageEnd",
                        },
                        usable: 1,
                        content: function () {
                            var cards = [];
                            for (var i = 0; i < 1; i++) {
                                cards.push(game.createCard('sha'));
                            }
                            player.gain(cards, 'gain2');
                        },
                    },
                    kivabingyi: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDiscardEnd",
                        },
                        filter: function (event, player) {
                            var cards = player.getCards('h');
                            if (cards.length < 1) return false;
                            var color = get.color(cards[0]);
                            for (var i = 1; i < cards.length; i++) {
                                if (get.color(cards[i]) != color) return false;
                            }
                            return true;
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('kivabingyi'), [1, player.countCards('h')], function (card, player, target) {
                                return true;
                            }).set('ai', function (target) {
                                return get.attitude(_status.event.player, target);
                            });
                            "step 1"
                            if (result.bool) {
                                player.logSkill('kivabingyi');
                                player.showHandcards(get.translation(player) + '发动了【秉壹】');
                                event.targets = result.targets;
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (targets && targets.length) {
                                player.line(targets, 'green');
                                game.asyncDraw(targets);
                                player.draw();
                            }
                        },
                        ai: {
                            expose: 0.1,
                        },
                    },
                    kivashenxing: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        position: "he",
                        filterCard: true,
                        selectCard: 1,
                        prompt: "横置或重置自己，弃置一张牌并摸两张牌",
                        check: function (card) { return 4 - get.useful(card) },
                        content: function () {
                            player.draw(2);
                            player.link();
                        },
                        ai: {
                            order: 1,
                            result: {
                                player: 1,
                            },
                        },
                    },
                    kivaertian: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "shaBegin",
                        },
                        usable: 1,
                        frequent: true,
                        content: function () {
                            player.chooseToUse({ name: 'sha' }, '二天：是否继续使用一张杀？').logSkill = 'kivaertian';
                        },
                    },
                    "kivacixiong_liubei": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                            global: "gameDarwAfter",
                        },
                        frequent: true,
                        content: function () {
                            player.useCard(game.createCard('cixiong', 'diamond', 13), player);
                        },
                    },
                    kivayitian: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                            global: "gameDarwAfter",
                        },
                        frequent: true,
                        content: function () {
                            player.useCard(game.createCard('qinggang', 'spade', 13), player);
                        },
                    },
                    kivazhabing: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        content: function () {
                            player.loseHp();
                            player.addTempSkill('kivazhabing5', { player: 'phaseBegin' });
                        },
                    },
                    kivaguimou: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        content: function () {
                            player.draw(player.maxHp - player.hp);
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    "kivazhabing2": {
                        mod: {
                            targetEnabled: function (card, player, target, now) {
                                if (card.name == 'sha' || card.name == 'juedou' || card.name == 'nanman' || card.name == 'wanjian' || card.name == 'jingleishan' || card.name == 'chiyuxi' || card.name == 'huogong' || card.name == 'bingliang') return false;
                            },
                        },
                    },
                    "测试2": {
                        audio: "ext:王朝更替_策:2",
                        enable: ["chooseToRespond", "chooseToUse"],
                        filterCard: function (card, player) {
                            if (get.zhu(player, 'shouyue')) return true;
                            return get.color(card) == 'red';
                        },
                        position: "he",
                        viewAs: {
                            name: "sha",
                            suit: "diamond",
                            number: 1,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "diamond", "number": 1, "name": "kiva115", "cardid": "3212119367", "clone": { "name": "kiva115", "suit": "diamond", "number": 1, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 3839 }, "original": "e", "timeout": 3788 }],
                        },
                        viewAsFilter: function (player) {
                            if (get.zhu(player, 'shouyue')) {
                                if (!player.countCards('he')) return false;
                            }
                            else {
                                if (!player.countCards('he', { color: 'red' })) return false;
                            }
                        },
                        prompt: "将一张红色牌当杀使用或打出",
                        check: function (card) { return 4 - get.value(card) },
                        ai: {
                            skillTagFilter: function (player) {
                                if (get.zhu(player, 'shouyue')) {
                                    if (!player.countCards('he')) return false;
                                }
                                else {
                                    if (!player.countCards('he', { color: 'red' })) return false;
                                }
                            },
                            respondSha: true,
                            basic: {
                                useful: [5, 1],
                                value: [5, 1],
                            },
                            order: function () {
                                if (_status.event.player.hasSkillTag('presha', true, null, true)) return 10;
                                return 3;
                            },
                            result: {
                                target: function (player, target) {
                                    if (player.hasSkill('jiu') && !target.getEquip('baiyin')) {
                                        if (get.attitude(player, target) > 0) {
                                            return -6;
                                        }
                                        else {
                                            return -3;
                                        }
                                    }
                                    return -1.5;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function (card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function (card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function (card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function (card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function (card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                            },
                        },
                        audioname: ["re_guanyu", "guanzhang", "jsp_guanyu", "guansuo"],
                    },
                    "kivazhabing3": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            player.recover();
                        },
                    },
                    "kivazhabing4": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "LostHpEnd",
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            player.recover();
                        },
                    },
                    "kivazhabing5": {
                        unique: true,
                        gainable: true,
                        mark: true,
                        group: ["kivazhabing2", "kivazhabing3", "kivazhabing4"],
                    },
                    kivajincui: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "judgeEnd",
                        },
                        frequent: function (event) {
                            if (event.result.card.name == 'du') return false;
                            if (get.mode() == 'guozhan') return false;
                            return true;
                        },
                        check: function (event) {
                            if (event.result.card.name == 'du') return false;
                            return true;
                        },
                        filter: function (event, player) {
                            if (get.owner(event.result.card)) {
                                return false;
                            }
                            if (event.nogain && event.nogain(event.result.card)) {
                                return false;
                            }
                            return true;
                        },
                        content: function () {
                            player.draw(3);
                            player.addSkill('kivajugong');
                            player.loseHp();
                        },
                        audioname: ["re_guojia"],
                    },
                    kivajugong: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "judge",
                        },
                        filter: function (event, player) {
                            return player.countCards('he', { color: 'red' }) > 0;
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            player.chooseCard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +
                                get.translation(trigger.player.judging[0]) + '，' + get.prompt('kivajugong'), 'he', function (card) {
                                    return get.color(card) == 'red';
                                }).set('ai', function (card) {
                                    var trigger = _status.event.getTrigger();
                                    var player = _status.event.player;
                                    var judging = _status.event.judging;
                                    var result = trigger.judge(card) - trigger.judge(judging);
                                    var attitude = get.attitude(player, trigger.player);
                                    if (attitude == 0 || result == 0) return 0;
                                    if (attitude > 0) {
                                        return result;
                                    }
                                    else {
                                        return -result;
                                    }
                                }).set('judging', trigger.player.judging[0]);
                            "step 1"
                            if (result.bool) {
                                player.respond(result.cards, 'highlight');
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.bool) {
                                player.logSkill('kivajugong');
                                player.$gain2(trigger.player.judging[0]);
                                player.gain(trigger.player.judging[0]);
                                trigger.player.judging[0] = result.cards[0];
                                if (!get.owner(result.cards[0], 'judge')) {
                                    trigger.position.appendChild(result.cards[0]);
                                }
                                game.log(trigger.player, '的判定牌改为', result.cards[0]);
                            }
                            "step 3"
                            game.delay(2);
                            player.removeSkill('kivajugong');
                        },
                        ai: {
                            tag: {
                                rejudge: 1,
                            },
                        },
                    },
                    kivadiwang: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num += player.maxHp - player.hp + 1;
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                return num = 3;
                            },
                        },
                    },
                    kivaqianxun: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num = player.hp + 2;
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                return num = player.maxhp;
                            },
                        },
                    },
                    kivayinyang: {
                        unique: true,
                        gainable: true,
                        group: ["kivayinyang1", "kivayinyang2"],
                    },
                    kivaxianji: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "huogongBegin",
                        },
                        frequent: true,
                        content: function () {
                            player.draw();
                        },
                    },
                    kivazhanbu: {
                        global: "kivazhanbu2",
                    },
                    kivatiannu: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num = 0;
                            var cards = [];
                            for (var i = 0; i < 5; i++) {
                                cards.push(game.createCard('sha'));
                            }
                            player.gain(cards, 'gain2');
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                return num = 0;
                            },
                        },
                    },
                    "kivayinyang1": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            trigger.num -= 1;
                            var cards = [];
                            for (var i = 0; i < 1; i++) {
                                cards.push(game.createCard('tiesuo'));
                            }
                            player.gain(cards, 'gain2');
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    "kivayinyang2": {
                        trigger: {
                            player: ["phaseEnd", "phaseUseEnd"],
                        },
                        forced: true,
                        alter: true,
                        filter: function (event, player) {
                            if (get.is.altered('kivayinyang2')) {
                                if (event.name != 'phaseUse') return false;
                            }
                            else {
                                if (event.name != 'phase') return false;
                            }
                            return game.hasPlayer(function (current) {
                                return current.isLinked();
                            });
                        },
                        content: function () {
                            var cards = [];
                            for (var i = 0; i < 1; i++) {
                                cards.push(game.createCard('huogong'));
                            }
                            player.gain(cards, 'gain2');
                        },
                        ai: {
                            threaten: 1.6,
                        },
                    },
                    "kivazhanbu2": {
                        enable: "phaseUse",
                        filter: function (event, player) {
                            if (player.hasSkill('wengua3')) return false;
                            return player.countCards('h') && game.hasPlayer(function (current) {
                                return current.hasSkill('kivazhanbu');
                            });
                        },
                        direct: true,
                        delay: 0,
                        filterCard: true,
                        discard: false,
                        lose: false,
                        prompt: function () {
                            var player = _status.event.player;
                            var list = game.filterPlayer(function (current) {
                                return current.hasSkill('kivazhanbu');
                            });
                            var str = '将一张手牌交给' + get.translation(list);
                            if (list.length > 1) str += '中的一人';
                            return str;
                        },
                        check: function (card) {
                            if (card.name == 'sha') return 5;
                            return 8 - get.value(card);
                        },
                        content: function () {
                            "step 0"
                            var targets = game.filterPlayer(function (current) {
                                return current.hasSkill('kivazhanbu');
                            });
                            if (targets.length == 1) {
                                event.target = targets[0];
                                event.goto(2);
                            }
                            else if (targets.length > 0) {
                                player.chooseTarget(true, '选择【占卜】的目标', function (card, player, target) {
                                    return _status.event.list.contains(target);
                                }).set('list', targets).set('ai', function (target) {
                                    var player = _status.event.player;
                                    return get.attitude(player, target);
                                });
                            }
                            else {
                                event.finish();
                            }
                            "step 1"
                            if (result.bool && result.targets.length) {
                                event.target = result.targets[0];
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (event.target) {
                                player.logSkill('kivazhanbu', event.target);
                                player.addTempSkill('wengua3');
                                event.card = cards[0];
                                if (event.target != player) {
                                    player.give(cards, event.target);
                                }
                            }
                            else {
                                event.finish();
                            }
                            "step 3"
                            if (event.target.getCards('h').contains(event.card)) {
                                event.target.chooseControlList('占卜', '将' + get.translation(event.card) + '置于牌堆顶', '将' + get.translation(event.card) + '置于牌堆底', true, function () {
                                    return 1;
                                });
                            }
                            else {
                                event.finish();
                            }
                            "step 4"
                            event.target.lose(event.card, ui.special);
                            event.index = result.index;
                            game.broadcastAll(function (player) {
                                var cardx = ui.create.card();
                                cardx.classList.add('infohidden');
                                cardx.classList.add('infoflip');
                                player.$throw(cardx, 1000, 'nobroadcast');
                            }, event.target);
                            "step 5"
                            game.delay();
                            "step 6"
                            event.card.fix();
                            if (event.index == 1) {
                                game.log(event.target, '将获得的牌置于牌堆底');
                                ui.cardPile.appendChild(event.card);
                                if (ui.cardPile.childElementCount == 1 || player == event.target) {
                                    event.togain = [ui.cardPile.firstChild];
                                    ui.cardPile.firstChild.remove();
                                }
                                else {
                                    event.togain = get.cards(2);
                                }
                            }
                            else {
                                game.log(player, '将获得的牌置于牌堆顶');
                                ui.cardPile.insertBefore(event.card, ui.cardPile.firstChild);
                                if (ui.cardPile.childElementCount == 1 || player == event.target) {
                                    event.togain = [ui.cardPile.lastChild];
                                    ui.cardPile.lastChild.remove();
                                }
                                else {
                                    event.togain = [ui.cardPile.lastChild, ui.cardPile.lastChild.previousSibling];
                                    ui.cardPile.lastChild.remove();
                                    ui.cardPile.lastChild.remove();
                                }
                            }
                            if (event.togain.length) {
                                player.gain(event.togain.shift());
                                player.$draw();
                            }
                            if (event.togain.length) {
                                event.target.gain(event.togain.shift());
                                event.target.$draw();
                            }
                        },
                        ai: {
                            order: 2,
                            threaten: 1.5,
                            result: {
                                player: function (player, target) {
                                    var target = game.findPlayer(function (current) {
                                        return current.hasSkill('kivazhanbu');
                                    });
                                    if (target) {
                                        return get.attitude(player, target);
                                    }
                                },
                            },
                        },
                    },
                    kivajingsi: {
                        audio: "ext:王朝更替_策:2",
                        filter: function (event, player) {
                            return player.countCards('he', { suit: 'diamond' }) > 0;
                        },
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.suit(card) == 'diamond';
                        },
                        position: "he",
                        viewAs: {
                            name: "kivajingyesi",
                            suit: "diamond",
                            number: 6,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": { "vanish": true }, "vanishtag": [], "_uncheck": [], "suit": "diamond", "number": 6, "name": "jiu", "cardid": "5231849490", "clone": { "name": "jiu", "suit": "diamond", "number": 6, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 555 }, "original": "j", "_transform": "translateY(0px)", "viewAs": "kivajingyesi", "timeout": 544 }],
                        },
                        prompt: "将一张方片牌当静夜思使用",
                        check: function (card) { return 6 - get.value(card) },
                        ai: {
                            threaten: 1.5,
                            basic: {
                                order: 1,
                                useful: 1,
                                value: 8,
                            },
                            result: {
                                target: function (player, target) {
                                    var num = target.hp - target.countCards('h') - 2;
                                    if (num > -1) return -0.01;
                                    if (target.hp < 3) num--;
                                    if (target.isTurnedOver()) num /= 2;
                                    var dist = get.distance(player, target, 'absolute');
                                    if (dist < 1) dist = 1;
                                    return num / Math.sqrt(dist);
                                },
                            },
                            tag: {
                                skip: "phaseDiscard",
                            },
                        },
                    },
                    kivajinqiang: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        frequent: true,
                        content: function () {
                            var cards = [];
                            for (var i = 0; i < 1; i++) {
                                cards.push(game.createCard('jiu'));
                            }
                            player.gain(cards, 'gain2');
                            var chat = ['君不见黄河之水天上来，奔流到海不复回。', '将进酒，杯莫停！'].randomGet()
                            player.say(chat);
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    kivashishi: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        frequent: true,
                        content: function () {
                            var chat = ['国破山河在，城春草木深。', '白头搔更短，浑欲不胜簪。'].randomGet()
                            player.say(chat);
                            trigger.num = 0;
                            player.addTempSkill('kivashishi2', { player: 'phaseBegin' });
                        },
                        ai: {
                            threaten: 1.3,
                        },
                        audioname: ["sp_lvmeng", "sunce"],
                    },
                    "kivashishi2": {
                        trigger: {
                            player: "phaseEnd",
                        },
                        direct: true,
                        audio: "ext:王朝更替_策:2",
                        content: function () {
                            "step 0"
                            var check;
                            if (player.countCards('h') == 0) {
                                check = false;
                            }
                            else {
                                check = (game.countPlayer(function (current) {
                                    return player != current && get.attitude(player, current) > 1;
                                }) >= 2);
                            }
                            if (get.is.versus()) {
                                event.versus = true;
                                player.chooseBool(get.prompt('kivashishi2'));
                            }
                            else {
                                player.chooseTarget(get.prompt('kivashishi2'), [1, 2], function (card, player, target) {
                                    return player != target;
                                }, function (target) {
                                    if (!_status.event.check) return 0;
                                    return get.attitude(_status.event.player, target);
                                }).set('check', check);
                            }
                            "step 1"
                            if (result.bool) {
                                var targets;
                                if (event.versus) {
                                    targets = game.filterPlayer(function (current) {
                                        return current != player && current.side == player.side;
                                    });
                                }
                                else {
                                    targets = result.targets;
                                }
                                player.logSkill('kivashishi2', targets);
                                game.asyncDraw(targets);
                                player.draw();
                                var chat = ['剑外忽传收蓟北，初闻涕泪满衣裳。', '即从巴峡穿巫峡，便下襄阳向洛阳。'].randomGet()
                                player.say(chat);
                            }
                        },
                    },
                    kivadaotang: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                        },
                        frequent: true,
                        content: function () {
                            player.draw();
                            player.chooseToUse({ name: 'tao' }, '道唐：是否使用一张桃？').logSkill = 'kivadaotang';
                        },
                    },
                    kivawangjian: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            source: "damageEnd",
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            player.draw();
                            player.recover();
                        },
                    },
                    kivashichong: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            player.loseHp(2);
                        },
                    },
                    kivadunji: {
                        audio: "renwang_skill",
                        trigger: {
                            player: "respond",
                        },
                        filter: function (event, player) {
                            return event.card.name == 'shan';
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            var cards = [];
                            for (var i = 0; i < 1; i++) {
                                cards.push(game.createCard('shan'));
                            }
                            player.gain(cards, 'gain2');
                        },
                    },
                    kivahufu: {
                        trigger: {
                            player: "phaseUseEnd",
                        },
                        content: function () {
                            var list = game.filterPlayer(function (current) {
                                return player.canUse('sha', current) && current.isEnemyOf(player);
                            });
                            list.sort(lib.sort.seat);
                            player.useCard({ name: 'sha' }, list);
                        },
                        ai: {
                            threaten: 1.8,
                        },
                    },
                    kivadunxi: {
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('kivaduizhang');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('kivaduizhang', 'diamond', 13), player);
                            }
                            else {
                                var cards = [];
                                for (var i = 0; i < 1; i++) {
                                    cards.push(game.createCard('shan'));
                                }
                                player.gain(cards, 'gain2');
                            }
                        },
                    },
                    kivafanji: {
                        trigger: {
                            player: "respond",
                        },
                        filter: function (event, player) {
                            return event.card.name == 'shan' && player.hasSha();
                        },
                        direct: true,
                        content: function () {
                            player.chooseToUse({ name: 'sha' }, '反击：是否使用一张杀？').logSkill = 'kivafanji';
                        },
                    },
                    kivabingzheng: {
                        trigger: {
                            player: "phaseEnd",
                        },
                        audio: "bingzheng",
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivabingzheng'), function (card, player, target) {
                                return target.countCards('h') != target.hp;
                            }).set('ai', function (target) {
                                var player = _status.event.player;
                                var att = get.attitude(player, target);
                                var nh = target.countCards('h');
                                if (att > 0) {
                                    if (nh == target.hp - 1) {
                                        if (player == target) return att + 1;
                                        return att + 2;
                                    }
                                    if (player == target && player.needsToDiscard()) return att / 3;
                                    return att;
                                }
                                else {
                                    if (nh == target.hp + 1) return -att;
                                    if (nh == 0) return 0;
                                    return -att / 2;
                                }
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('kivabingzheng', result.targets);
                                event.target = result.targets[0];
                                if (event.target.countCards('h')) {
                                    player.chooseControl(function (event, player) {
                                        var target = event.target;
                                        if (get.attitude(player, target) < 0) return 1;
                                        if (target.countCards('h') == target.hp + 1) return 1;
                                        return 0;
                                    }).set('choiceList', ['令' + get.translation(event.target) + '摸一张牌',
                                    '令' + get.translation(event.target) + '弃置一张手牌']);
                                }
                                else {
                                    event.directfalse = true;
                                }
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            if (event.directfalse || result.index == 0) {
                                event.target.draw();
                            }
                            else {
                                event.target.chooseToDiscard('h', true);
                            }
                            'step 3'
                            if (event.target.countCards('h') == event.target.hp) {
                                player.draw();
                                if (event.target == player) {
                                    event.finish();
                                    return;
                                }
                                var next = player.chooseCard('是否交给' + get.translation(event.target) + '一张牌？', 'he');
                                next.set('ai', function (card) {
                                    if (get.position(card) != 'h') return 0;
                                    if (_status.event.shan) {
                                        return card.name == 'shan' ? 1 : 0;
                                    }
                                    if (_status.event.goon) {
                                        return 10 - get.value(card);
                                    }
                                    return -get.value(card, _status.event.player, 'raw');
                                });
                                if (get.attitude(player, event.target) > 1 &&
                                    player.countCards('h', 'shan') > 1 && player.countCards('h') > event.target.countCards('h')) {
                                    next.set('shan', true);
                                }
                                if (get.attitude(player, event.target) > 0 && player.needsToDiscard()) {
                                    next.set('goon', true);
                                }
                            }
                            else {
                                event.finish();
                            }
                            'step 4'
                            if (result.bool) {
                                event.target.gain(result.cards, player);
                                player.$giveAuto(result.cards, event.target);
                            }
                        },
                        ai: {
                            expose: 0.2,
                            threaten: 1.4,
                        },
                    },
                    kivazhanji: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "respondEnd",
                        },
                        filter: function (event, player) {
                            if (event.card.name != 'sha') return false;
                            if (event.player == player) return false;
                            if (event.cards) {
                                for (var i = 0; i < event.cards.length; i++) {
                                    if (get.position(event.cards[i]) == 'd') return true;
                                }
                            }
                            return false;
                        },
                        frequent: true,
                        content: function () {
                            var cards = trigger.cards.slice(0);
                            for (var i = 0; i < cards.length; i++) {
                                if (get.position(cards[i]) != 'd') {
                                    cards.splice(i--, 1);
                                }
                            }
                            game.delay(0.5);
                            player.gain(cards, 'gain2');
                        },
                    },
                    kivajingshi: {
                        audio: "ext:王朝更替_策:1",
                        derivation: ["kivapozhen"],
                        trigger: {
                            player: "damageEnd",
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            player.draw(3);
                            player.loseMaxHp();
                            player.addSkill('kivapozhen');
                            player.removeSkill('kivajingshi');
                        },
                    },
                    kivapozhen: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "shaEnd",
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            var check;
                            var i, num = game.countPlayer(function (current) {
                                return current != player && current.countCards('h') && get.attitude(player, current) <= 0;
                            });
                            check = (num >= 2);
                            player.chooseTarget(get.prompt('kivapozhen'), [1], function (card, player, target) {
                                return target.countCards('h') > 0 && player != target;
                            }, function (target) {
                                if (!_status.event.aicheck) return 0;
                                var att = get.attitude(_status.event.player, target);
                                if (target.hasSkill('tuntian')) return att / 10;
                                return 1 - att;
                            }).set('aicheck', check);
                            "step 1"
                            if (result.bool) {
                                player.logSkill('kivapozhen', result.targets);
                                player.gainMultiple(result.targets);
                                trigger.cancel();
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            game.delay();
                        },
                        ai: {
                            threaten: 2,
                            expose: 0.3,
                        },
                    },
                    kivajianji: {
                        trigger: {
                            player: "shaBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !event.directHit && player.getEquip(1);
                        },
                        priority: -1,
                        content: function () {
                            if (typeof trigger.shanRequired == 'number') {
                                trigger.shanRequired++;
                            }
                            else {
                                trigger.shanRequired = 2;
                            }
                        },
                    },
                    kivajuewu: {
                        audio: "ext:王朝更替_策:6",
                        trigger: {
                            player: "phaseEnd",
                        },
                        frequent: true,
                        content: function () {
                            player.draw();
                        },
                    },
                    kivaxianniang: {
                        skillAnimation: true,
                        enable: "phaseUse",
                        filter: function (event, player) {
                            return !player.storage.kivaxianniang;
                        },
                        filterTarget: function (card, player, target) {
                            return target.sex == 'female' && target != player;
                        },
                        content: function () {
                            player.awakenSkill('kivaxianniang');

                            player.addSkill('kivajuewu');
                            target.addSkill('kivajuewu');

                            target.marks.kivajuewu = target.markCharacter(player, {
                                name: '绝舞',
                                content: '回个结束后，摸一张牌'
                            });
                            game.addVideo('markCharacter', target, {
                                name: '绝舞',
                                content: '回个结束后，摸一张牌',
                                id: 'kivaxianniang',
                                target: player.dataset.position
                            });

                            player.storage.heqin = target;
                            target.storage.heqin = player;

                            player.marks.kivajuewu = player.markCharacter(target, {
                                name: '绝舞',
                                content: '回个结束后，摸一张牌'
                            });
                            game.addVideo('markCharacter', player, {
                                name: '绝舞',
                                content: '回个结束后，摸一张牌',
                                id: 'kivaxianniang',
                                target: target.dataset.position
                            });
                        },
                        ai: {
                            order: 1,
                            result: {
                                target: 1,
                            },
                        },
                    },
                    "kivaduizhang1": {
                        audio: "renwang_skill",
                        trigger: {
                            player: "respond",
                        },
                        filter: function (event, player) {
                            return event.card.name == 'shan';
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            var cards = [];
                            for (var i = 0; i < 1; i++) {
                                cards.push(game.createCard('sha'));
                            }
                            player.gain(cards, 'gain2');
                        },
                    },
                    "kivaduizhang2": {
                        audio: "qinglong_skill",
                        trigger: {
                            player: ["respond", "shaBegin"],
                        },
                        filter: function (event, player) {
                            return event.card.name == 'sha';
                        },
                        locked: true,
                        forced: true,
                        content: function () {
                            var cards = [];
                            for (var i = 0; i < 1; i++) {
                                cards.push(game.createCard('shan'));
                            }
                            player.gain(cards, 'gain2');
                        },
                    },
                    kivashendun: {
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('kivaduizhang');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('kivaduizhang', 'diamond', 13), player);
                            }
                            else {
                                player.recover();
                                player.useCard(game.createCard('kivaduizhang', 'diamond', 13), player);
                            }
                        },
                    },
                    "kivaxuezhan2": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "dieAfter",
                        },
                        forced: true,
                        unique: true,
                        content: function () {
                            player.addSkill('kivaxuezhan3');
                            player.removeSkill('kivaxuezhan2');
                        },
                        ai: {
                            threaten: 1.5,
                        },
                    },
                    "kivaxuezhan3": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "dieAfter",
                        },
                        forced: true,
                        unique: true,
                        content: function () {
                            player.addSkill('kivaxuezhan4');
                            player.removeSkill('kivaxuezhan3');
                        },
                        ai: {
                            threaten: 1.5,
                        },
                    },
                    "kivaxuezhan4": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "dieAfter",
                        },
                        forced: true,
                        unique: true,
                        content: function () {
                            player.addSkill('kivashendun');
                            player.removeSkill('kivaxuezhan4');
                        },
                        ai: {
                            threaten: 1.5,
                        },
                    },
                    "kivadongyehu1": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "shaBegin",
                        },
                        content: function () {
                            player.link();
                        },
                    },
                    "kivadongyehu2": {
                        trigger: {
                            player: ["phaseEnd", "phaseUseEnd"],
                        },
                        forced: true,
                        alter: true,
                        filter: function (event, player) {
                            if (get.is.altered('kivadongyehu2')) {
                                if (event.name != 'phaseUse') return false;
                            }
                            else {
                                if (event.name != 'phase') return false;
                            }
                            return game.hasPlayer(function (current) {
                                return current.isLinked();
                            });
                        },
                        content: function () {
                            player.damage('fire');
                            player.draw(2);
                        },
                        ai: {
                            threaten: 1.6,
                        },
                    },
                    kivapeidao: {
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('kivadongyehu');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('kivadongyehu', 'diamond', 13), player);
                            }
                            else {
                                player.draw();
                            }
                        },
                    },
                    kivawanshi: {
                        unique: true,
                        trigger: {
                            player: "phaseAfter",
                        },
                        direct: true,
                        init: function (player) {
                            player.storage.kivawanshi = [];
                            // player.storage.xiongcai2=0;
                        },
                        intro: {
                            content: "characters",
                        },
                        content: function () {
                            'step 0'
                            // if(player.storage.xiongcai2<1){
                            //     player.storage.xiongcai2++;
                            //     event.finish();
                            // }
                            // else{
                            //     player.storage.xiongcai2=0;
                            // }
                            'step 1'
                            player.logSkill('kivawanshi');
                            var list = [];
                            var list2 = [];
                            var players = game.players.concat(game.dead);
                            for (var i = 0; i < players.length; i++) {
                                list2.add(players[i].name);
                                list2.add(players[i].name1);
                                list2.add(players[i].name2);
                            }
                            for (var i in lib.character) {
                                if (lib.character[i][1] != 'rikiva') continue;
                                if (lib.character[i][4].contains('boss')) continue;
                                if (lib.character[i][4].contains('minskin')) continue;
                                if (player.storage.kivawanshi.contains(i)) continue;
                                if (list2.contains(i)) continue;
                                list.push(i);
                            }
                            var name = list.randomGet();
                            player.storage.kivawanshi.push(name);
                            player.markSkill('kivawanshi');
                            var skills = lib.character[name][3];
                            for (var i = 0; i < skills.length; i++) {
                                player.addSkill(skills[i]);
                            }
                            event.dialog = ui.create.dialog('<div class="text center">' + get.translation(player) + '发动了【万事】', [[name], 'character']);
                            game.delay(2);
                            'step 2'
                            event.dialog.close();
                        },
                    },
                    "kivagalibang1": {
                        unique: true,
                        trigger: {
                            player: "phaseAfter",
                        },
                        direct: true,
                        init: function (player) {
                            player.storage.kivagalibang1 = [];
                            // player.storage.xiongcai2=0;
                        },
                        intro: {
                            content: "characters",
                        },
                        content: function () {
                            'step 0'
                            // if(player.storage.xiongcai2<1){
                            //     player.storage.xiongcai2++;
                            //     event.finish();
                            // }
                            // else{
                            //     player.storage.xiongcai2=0;
                            // }
                            'step 1'
                            player.logSkill('kivagalibang1');
                            var list = [];
                            var list2 = [];
                            var players = game.players.concat(game.dead);
                            for (var i = 0; i < players.length; i++) {
                                list2.add(players[i].name);
                                list2.add(players[i].name1);
                                list2.add(players[i].name2);
                            }
                            for (var i in lib.character) {
                                if (lib.character[i][1] != 'xikiva') continue;
                                if (lib.character[i][4].contains('boss')) continue;
                                if (lib.character[i][4].contains('minskin')) continue;
                                if (player.storage.kivagalibang1.contains(i)) continue;
                                if (list2.contains(i)) continue;
                                list.push(i);
                            }
                            var name = list.randomGet();
                            player.storage.kivagalibang1.push(name);
                            player.markSkill('kivagalibang1');
                            var skills = lib.character[name][3];
                            for (var i = 0; i < skills.length; i++) {
                                player.addSkill(skills[i]);
                            }
                            event.dialog = ui.create.dialog('<div class="text center">' + get.translation(player) + '发动了【咖喱棒】', [[name], 'character']);
                            game.delay(2);
                            'step 2'
                            event.dialog.close();
                            "step 3"
                            player.removeSkill('kivashichong');
                        },
                    },
                    kivatusi: {
                        mod: {
                            targetInRange: function (card, player, target, now) {
                                if (card.name == 'sha' && get.color(card) == 'black') return true;


                            },
                        },
                    },
                    kivachanrao: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return player != target && target.countCards('h') > 0;
                        },
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        content: function () {
                            "step 0"
                            player.chooseToCompare(target);
                            "step 1"
                            if (result.bool) {
                                var cards = [];
                                for (var i = 0; i < 1; i++) {
                                    cards.push(game.createCard('tiesuo'));
                                }
                                player.gain(cards, 'gain2');
                                var chat = ['能力越大，责任越大。', 'I am Spider man!'].randomGet()
                                player.say(chat);
                            }
                            else {
                                player.draw();
                                var chat = ['能力越大，责任越大', '该死，没丝了！'].randomGet()
                                player.say(chat);
                            }
                        },
                        ai: {
                            order: function (name, player) {
                                var cards = player.getCards('h');
                                if (player.countCards('h', 'sha') == 0) {
                                    return 1;
                                }
                                for (var i = 0; i < cards.length; i++) {
                                    if (cards[i].name != 'sha' && cards[i].number > 11 && get.value(cards[i]) < 7) {
                                        return 9;
                                    }
                                }
                                return get.order({ name: 'sha' }) - 1;
                            },
                            result: {
                                player: function (player) {
                                    if (player.countCards('h', 'sha') > 0) return 0.6;
                                    var num = player.countCards('h');
                                    if (num > player.hp) return 0;
                                    if (num == 1) return -2;
                                    if (num == 2) return -1;
                                    return -0.7;
                                },
                                target: function (player, target) {
                                    var num = target.countCards('h');
                                    if (num == 1) return -1;
                                    if (num == 2) return -0.7;
                                    return -0.5
                                },
                            },
                            threaten: 1.3,
                        },
                    },
                    kivaexgalibang: {
                        forbid: ["identity", "guozhan"],
                        trigger: {
                            player: ["phaseBegin", "damageEnd"],
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.getEquip('kivagalibang');
                        },
                        content: function () {
                            if (trigger.name == 'phase') {
                                player.useCard(game.createCard('kivagalibang', 'diamond', 13), player);
                                var chat = ['Saber!!!'].randomGet()
                                player.say(chat);
                            }
                            else {
                                player.draw();
                                var chat = ['Saber!!!'].randomGet()
                                player.say(chat);
                            }
                        },
                    },
                    kivazhongji: {
                        audio: "ext:王朝更替_策:2",
                        forbid: ["identity", "guozhan", "versus", "chess", "stone"],
                        trigger: {
                            player: "phaseBegin",
                        },
                        locked: true,
                        frocet: true,
                        content: function () {
                            player.gainMaxHp(3);
                            player.recover(3);
                            player.removeSkill('kivazhongji');
                        },
                    },
                    kivashengdun: {
                        mod: {
                            cardEnabled: function (card, player) {
                                if (card.name == 'kivameidui' && _status.event.skill != 'kivashengdun') return false;
                            },
                            cardUsable: function (card, player) {
                                if (card.name == 'kivameidui' && _status.event.skill != 'kivashengdun') return false;
                            },
                            cardRespondable: function (card, player) {
                                if (card.name == 'kivameidui' && _status.event.skill != 'kivashengdun') return false;
                            },
                            cardSavable: function (card, player) {
                                if (card.name == 'kivameidui' && _status.event.skill != 'kivashengdun') return false;
                            },
                        },
                        enable: ["chooseToUse", "chooseToRespond"],
                        filter: function (event, player) {
                            return player.countCards('h', 'kivameidui') > 0;
                        },
                        filterCard: {
                            name: "kivameidui",
                        },
                        viewAs: {
                            name: "sha",
                        },
                        viewAsFilter: function (player) {
                            if (!player.countCards('h', 'kivameidui')) return false;
                        },
                        check: function () { return 1 },
                        ai: {
                            skillTagFilter: function (player) {
                                if (!player.countCards('h', 'kivameidui')) return false;
                            },
                            respondSha: true,
                            order: 4,
                            useful: -1,
                            value: -1,
                            basic: {
                                useful: [5, 1],
                                value: [5, 1],
                            },
                            result: {
                                target: function (player, target) {
                                    if (player.hasSkill('kivameidui') && !target.getEquip('baiyin')) {
                                        if (get.attitude(player, target) > 0) {
                                            return -6;
                                        }
                                        else {
                                            return -3;
                                        }
                                    }
                                    return -1.5;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function (card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function (card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function (card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function (card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function (card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                            },
                        },
                    },
                    kivazhimao: {
                        audio: "ext:王朝更替_策:1",
                        enable: "phaseUse",
                        filter: function (event, player) {
                            if (player.hasSkill('xinqiangxi2')) {
                                return !player.hasSkill('xinqiangxi3');
                            }
                            else if (player.hasSkill('xinqiangxi3')) {
                                return !player.hasSkill('xinqiangxi2') && player.countCards('he', { type: 'equip' }) > 0;
                            }
                            else {
                                return true;
                            }
                        },
                        filterCard: function (card) {
                            var player = _status.event.player;
                            if (player.hasSkill('xinqiangxi2')) return false;
                            return get.type(card) == 'equip';
                        },
                        selectCard: function () {
                            var player = _status.event.player;
                            if (player.hasSkill('xinqiangxi2')) return -100;
                            if (player.hasSkill('xinqiangxi3')) return [1, 1];
                            return [0, 1];
                        },
                        filterTarget: function (card, player, target) {
                            if (player == target) return false;
                            return get.distance(player, target, 'attack') <= 1;
                        },
                        content: function () {
                            "step 0"
                            if (cards.length == 0) {
                                player.loseHp();
                                player.addTempSkill('xinqiangxi3');
                            }
                            else {
                                player.addTempSkill('xinqiangxi2');
                            }
                            "step 1"
                            target.damage();
                        },
                        check: function (card) {
                            return 10 - get.value(card);
                        },
                        position: "he",
                        ai: {
                            order: 8.5,
                            result: {
                                target: function (player, target) {
                                    if (player.hasSkill('xinqiangxi2') || !player.countCards('he', { type: 'equip' })) {
                                        if (player.hp < 2) return 0;
                                        if (target.hp >= player.hp) return 0;
                                    }
                                    return get.damageEffect(target, player);
                                },
                            },
                        },
                        threaten: 1.5,
                    },
                    kivacebu: {
                        mod: {
                            globalFrom: function (from, to, distance) {
                                return distance - 2;
                            },
                        },
                    },
                    kivaliangyinqiang: {
                        unique: true,
                        animationStr: "再来十个我也浑然不惧！",
                        audio: "ext:王朝更替_策:1",
                        mod: {
                            selectTarget: function (card, player, range) {
                                if (range[1] == -1) return;
                                if (player.getEquip(1)) return;
                                if (card.name == 'sha') range[1] += 2;
                            },
                            cardUsable: function (card, player, num) {
                                if (player.getEquip(1)) return;
                                if (card.name == 'sha') return num + 1;
                            },
                        },
                        ai: {
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.subtype(card) == 'equip1') return -1;
                                },
                            },
                        },
                    },
                    kivayingren: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: ["respond", "useCard"],
                        },
                        frequent: true,
                        animationStr: "任何人我都会迎刃而解！",
                        filter: function (event, player) {
                            return player != _status.currentPhase && get.itemtype(event.cards) == 'cards';
                        },
                        content: function () {
                            "step 0"
                            event.card = get.cards()[0];
                            game.broadcast(function (card) {
                                ui.arena.classList.add('thrownhighlight');
                                card.copy('thrown', 'center', 'thrownhighlight', ui.arena).animate('start');
                            }, event.card);
                            event.node = event.card.copy('thrown', 'center', 'thrownhighlight', ui.arena).animate('start');
                            ui.arena.classList.add('thrownhighlight');
                            game.addVideo('thrownhighlight1');
                            game.addVideo('centernode', null, get.cardInfo(event.card));
                            if (get.type(event.card, 'trick') == get.type(trigger.card, 'trick')) {
                                player.chooseTarget('选择获得此牌的角色').set('ai', function (target) {
                                    var att = get.attitude(_status.event.player, target);
                                    if (_status.event.du) {
                                        if (target.hasSkillTag('nodu')) return 0;
                                        return -att;
                                    }
                                    if (att > 0) {
                                        return att + Math.max(0, 5 - target.countCards('h'));
                                    }
                                    return att;
                                }).set('du', event.card.name == 'du');
                            }
                            else {
                                player.chooseBool('是否弃置' + get.translation(event.card) + '？');
                                event.disbool = true;
                            }
                            game.delay(2);
                            "step 1"
                            if (event.disbool) {
                                if (!result.bool) {
                                    game.log(player, '展示了', event.card);
                                    ui.cardPile.insertBefore(event.card, ui.cardPile.firstChild);
                                }
                                else {
                                    game.log(player, '展示并弃掉了', event.card);
                                    event.card.discard();
                                }
                                game.addVideo('deletenode', player, [get.cardInfo(event.node)]);
                                event.node.delete();
                                game.broadcast(function (card) {
                                    ui.arena.classList.remove('thrownhighlight');
                                    if (card.clone) {
                                        card.clone.delete();
                                    }
                                }, event.card);
                            }
                            else if (result.targets) {
                                player.line(result.targets, 'green');
                                result.targets[0].gain(event.card, 'log');
                                event.node.moveDelete(result.targets[0]);
                                game.addVideo('gain2', result.targets[0], [get.cardInfo(event.node)]);
                                game.broadcast(function (card, target) {
                                    ui.arena.classList.remove('thrownhighlight');
                                    if (card.clone) {
                                        card.clone.moveDelete(target);
                                    }
                                }, event.card, result.targets[0]);
                            }
                            else {
                                game.log(player, '展示并弃掉了', event.card);
                                event.card.discard();
                                game.addVideo('deletenode', player, [get.cardInfo(event.node)]);
                                event.node.delete();
                                game.broadcast(function (card) {
                                    ui.arena.classList.remove('thrownhighlight');
                                    if (card.clone) {
                                        card.clone.delete();
                                    }
                                }, event.card);
                            }
                            game.addVideo('thrownhighlight2');
                            ui.arena.classList.remove('thrownhighlight');
                        },
                        ai: {
                            effect: {
                                target: function (card, player) {
                                    if (get.tag(card, 'respond') && player.countCards('h') > 1) return [1, 0.2];
                                },
                            },
                        },
                    },
                    kivajinlue: {
                        mod: {
                            targetEnabled: function (card, player, target, now) {
                                if (card.name == 'shunshou' || card.name == 'lebu') return false;
                            },
                        },
                    },
                    kivaquying: {
                        mod: {
                            maxHandcard: function (player, num) {
                                var list = ['wei', 'shu', 'wu', 'qun', 'shen'];
                                var num2 = game.countPlayer(function (current) {
                                    if (list.contains(current.group)) {
                                        list.remove(current.group);
                                        return true;
                                    }
                                });
                                return num + num2;
                            },
                        },
                    },
                    kivaceding: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        animationStr: "依丞相之计，吾定不负众望！",
                        filter: function (event, player) {
                            return event.player.hp <= 3;
                        },
                        content: function () {
                            player.recover();
                        },
                    },
                    kivatianji: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "ext:王朝更替_策:2",
                        filterTarget: function (card, player, target) {
                            return player != target && !target.isLinked();
                        },
                        content: function () {
                            "step 0"
                            if (!target.isLinked()) target.link();
                            target.damage('thunder');
                            "step 1"
                            player.damage('fire');
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivaweimu: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "damageEnd",
                        },
                        frequent: true,
                        locked: false,
                        notemp: true,
                        init: function (player) {
                            player.storage.kivaweimu = [];
                        },
                        filter: function (event) {
                            return event.num > 0;
                        },
                        content: function () {
                            "step 0"
                            player.draw(trigger.num);
                            "step 1"
                            if (player.countCards('he')) {
                                player.chooseCard('将' + get.cnNumber(trigger.num) + '张手牌置于武将牌上作为“谋”', trigger.num, true);
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.cards && result.cards.length) {
                                player.lose(result.cards, ui.special);
                                player.storage.kivaweimu = player.storage.kivaweimu.concat(result.cards);
                                player.syncStorage('kivaweimu');
                                player.markSkill('kivaweimu');
                                game.log(player, '将', result.cards, '置于武将牌上作为“谋”');
                            }
                        },
                        intro: {
                            content: "cards",
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                return num + player.storage.kivaweimu.length;
                            },
                        },
                        ai: {
                            maixie: true,
                            "maixie_hp": true,
                            threaten: 0.8,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                        if (!target.hasFriend()) return;
                                        if (target.hp >= 4) return [0.5, get.tag(card, 'damage') * 2];
                                        if (!target.hasSkill('paiyi') && target.hp > 1) return [0.5, get.tag(card, 'damage') * 1.5];
                                        if (target.hp == 3) return [0.5, get.tag(card, 'damage') * 1.5];
                                        if (target.hp == 2) return [1, get.tag(card, 'damage') * 0.5];
                                    }
                                },
                            },
                        },
                    },
                    kivamouce: {
                        enable: "phaseUse",
                        usable: 1,
                        audio: "ext:王朝更替_策:2",
                        filterTarget: true,
                        filter: function (event, player) {
                            return player.storage.kivaweimu.length > 0;
                        },
                        content: function () {
                            "step 0"
                            player.chooseCardButton(player.storage.kivaweimu, true);
                            "step 1"
                            var card = result.links[0];
                            card.discard();
                            player.$throw(card);
                            player.storage.kivaweimu.remove(card);
                            if (!player.storage.kivaweimu.length) {
                                player.unmarkSkill('kivaweimu');
                            }
                            else {
                                player.markSkill('kivaweimu');
                            }
                            player.syncStorage('kivaweimu');
                            "step 2"
                            target.recover();
                            "step 3"
                            if (target.hp > target.countCards('h')) {
                                target.damage(2);
                                player.loseHp();
                            }
                        },
                        ai: {
                            order: 1,
                            result: {
                                target: function (player, target) {
                                    if (player != target) return 0;
                                    if (player.countCards('h') + 2 <= player.hp + player.storage.kivaweimu.length) return 1;
                                    return 0;
                                },
                            },
                        },
                    },
                    kivayuxue: {
                        mod: {
                            targetInRange: function (card, player, target, now) {
                                if (card.name == 'sha' && get.color(card) == 'red') return true;


                            },
                        },
                    },
                    kivafenzhan: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "shaBegin",
                        },
                        content: function () {
                            player.draw(player.countCards('h') - 1);
                            player.damage('fire');
                        },
                    },
                    kivafengu: {
                        audio: "ext:王朝更替_策:2",
                        group: ["kivafengu2", "kivafengu4"],
                        trigger: {
                            player: "damageEnd",
                        },
                        filter: function (event, player) {
                            return !player.storage.kivafengu && player.countCards('h') > game.roundNumber - 1;
                        },
                        content: function () {
                            player.chooseToDiscard(game.roundNumber, true);
                            player.recover();
                        },
                    },
                    "kivafengu3": {
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function (card, player, target) {
                            return target != player && target.countCards('h');
                        },
                        filter: function (event, player) {
                            return player.countCards('h');
                        },
                        content: function () {
                            'step 0'
                            player.chooseToCompare(target);
                            'step 1'
                            if (result.bool) {
                                target.loseHp();
                                player.recover();
                            }
                        },
                        ai: {
                            order: 8,
                            result: {
                                target: function (player, target) {
                                    return get.damageEffect(target, player, target);
                                },
                            },
                        },
                    },
                    "kivafengu2": {
                        trigger: {
                            player: ["phaseBefore", "changeHp"],
                        },
                        forced: true,
                        popup: false,
                        unique: true,
                        content: function () {
                            player.removeAdditionalSkill('kivafengu2');
                            var list = [];
                            if (player.hp <= 2) {
                                list.push('kivafengu3');
                            }
                            if (list.length) {
                                player.addAdditionalSkill('kivafengu2', list);
                            }
                        },
                        ai: {
                            maixie: false,
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (!target.hasFriend()) return;
                                        if (target.hp >= 4) return [0, 1];
                                    }
                                    if (get.tag(card, 'recover') && player.hp >= player.maxHp - 1) return [0, 0];
                                },
                            },
                        },
                    },
                    "kivafengu4": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "dying",
                        },
                        priority: 10,
                        forced: true,
                        filter: function (event, player) {
                            return !player.storage.kivafengu4;
                        },
                        content: function () {
                            player.die();
                        },
                    },
                    kivayingyong: {
                        mod: {
                            cardEnabled: function (card, player) {
                                if (card.name == 'zhuge' && _status.event.skill != 'kivayingyong') return false;
                            },
                            cardUsable: function (card, player) {
                                if (card.name == 'zhuge' && _status.event.skill != 'kivayingyong') return false;
                            },
                            cardRespondable: function (card, player) {
                                if (card.name == 'zhuge' && _status.event.skill != 'kivayingyong') return false;
                            },
                            cardSavable: function (card, player) {
                                if (card.name == 'zhuge' && _status.event.skill != 'kivayingyong') return false;
                            },
                        },
                        enable: ["chooseToUse", "chooseToRespond"],
                        filter: function (event, player) {
                            return player.countCards('h', 'zhuge') > 0;
                        },
                        filterCard: {
                            name: "zhuge",
                        },
                        viewAs: {
                            name: "jiu",
                        },
                        viewAsFilter: function (player) {
                            if (!player.countCards('h', 'zhuge')) return false;
                        },
                        check: function () { return 1 },
                        ai: {
                            skillTagFilter: function (player) {
                                if (!player.countCards('h', 'zhuge')) return false;
                            },
                            respondSha: true,
                            order: 4,
                            useful: -1,
                            value: -1,
                            basic: {
                                useful: [5, 1],
                                value: [5, 1],
                            },
                            result: {
                                target: function (player, target) {
                                    if (player.hasSkill('zhuge') && !target.getEquip('baiyin')) {
                                        if (get.attitude(player, target) > 0) {
                                            return -6;
                                        }
                                        else {
                                            return -3;
                                        }
                                    }
                                    return -1.5;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function (card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function (card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function (card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function (card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function (card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                                save: 1,
                            },
                        },
                    },
                    kivayongwu: {
                        skillAnimation: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.storage.kivayongwu && player.countCards('h') > player.hp;
                        },
                        content: function () {
                            player.storage.kivayongwu = true;
                            player.loseMaxHp();
                            player.removeSkill('kivaconghui');
                            player.addSkill('paoxiao');
                            player.awakenSkill('kivayongwu');
                        },
                    },
                    kivaconghui: {
                        skillAnimation: true,
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.storage.kivaconghui && player.countCards('h') < 1;
                        },
                        content: function () {
                            player.storage.kivaconghui = true;
                            player.loseMaxHp(2);
                            player.removeSkill('kivayongwu');
                            player.addSkill('jizhi');
                            player.addSkill('feiying');
                            player.awakenSkill('kivaconghui');
                        },
                    },
                    kivasizhan: {
                        group: "kivasizhan2",
                        enable: "phaseUse",
                        usable: 1,
                        viewAsFilter: function (player) {
                            return player.countCards('hej', { suit: 'diamond' }) > 0;
                        },
                        viewAs: {
                            name: "juedou",
                            suit: "diamond",
                            number: 1,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "diamond", "number": 1, "name": "kivawujinnengyuan", "cardid": "8226905360", "_transform": "translateX(112px)", "clone": { "name": "kivawujinnengyuan", "suit": "diamond", "number": 1, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 3433 }, "timeout": 3412, "original": "hej" }],
                        },
                        filterCard: {
                            suit: "diamond",
                        },
                        check: function (card) {
                            return 8 - get.value(card);
                        },
                        ai: {
                            basic: {
                                order: 7.2,
                                useful: 4.5,
                                value: 9.2,
                            },
                            result: {
                                target: 2,
                                player: function (player, target) {
                                    if (get.damageEffect(target, player, target) > 0 && get.attitude(player, target) > 0 && get.attitude(target, player) > 0) {
                                        return 0;
                                    }
                                    var hs1 = target.getCards('h', 'sha');
                                    var hs2 = player.getCards('h', 'sha');
                                    if (hs1.length > hs2.length + 1) {
                                        return -2;
                                    }
                                    var hsx = target.getCards('h');
                                    if (hsx.length > 2 && hs2.length == 0 && hsx[0].number < 6) {
                                        return -2;
                                    }
                                    if (hsx.length > 3 && hs2.length == 0) {
                                        return -2;
                                    }
                                    if (hs1.length > hs2.length && (!hs2.length || hs1[0].number > hs2[0].number)) {
                                        return -2;
                                    }
                                    return -0.5;
                                },
                            },
                            tag: {
                                draw: 2,
                                respond: 2,
                                respondSha: 2,
                                damage: 1,
                            },
                        },
                    },
                    "kivasizhan2": {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "juedouBegin",
                        },
                        forced: true,
                        content: function () {
                            player.addTempSkill('kivasizhan3', { player: 'phaseEnd' });
                        },
                    },
                    "kivasizhan3": {
                        audio: "ext:王朝更替_策:2",
                        enable: ["chooseToRespond", "chooseToUse"],
                        filterCard: function (card, player) {
                            if (get.zhu(player, 'shouyue')) return true;
                            return get.color(card) == 'black';
                        },
                        position: "he",
                        viewAs: {
                            name: "sha",
                            suit: "club",
                            number: 13,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "club", "number": 13, "name": "kiva112", "cardid": "9551691361", "_transform": "translateX(0px)", "clone": { "name": "kiva112", "suit": "club", "number": 13, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 3558 }, "timeout": 3533, "original": "h" }],
                        },
                        viewAsFilter: function (player) {
                            if (get.zhu(player, 'shouyue')) {
                                if (!player.countCards('he')) return false;
                            }
                            else {
                                if (!player.countCards('he', { color: 'black' })) return false;
                            }
                        },
                        prompt: "将一张黑色牌当杀使用或打出",
                        check: function (card) { return 4 - get.value(card) },
                        ai: {
                            skillTagFilter: function (player) {
                                if (get.zhu(player, 'shouyue')) {
                                    if (!player.countCards('he')) return false;
                                }
                                else {
                                    if (!player.countCards('he', { color: 'black' })) return false;
                                }
                            },
                            respondSha: true,
                            basic: {
                                useful: [5, 1],
                                value: [5, 1],
                            },
                            order: function () {
                                if (_status.event.player.hasSkillTag('presha', true, null, true)) return 10;
                                return 3;
                            },
                            result: {
                                target: function (player, target) {
                                    if (player.hasSkill('jiu') && !target.getEquip('baiyin')) {
                                        if (get.attitude(player, target) > 0) {
                                            return -6;
                                        }
                                        else {
                                            return -3;
                                        }
                                    }
                                    return -1.5;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function (card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function (card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function (card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function (card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function (card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                            },
                        },
                        audioname: ["re_guanyu", "guanzhang", "jsp_guanyu", "guansuo"],
                    },
                    kivasishen: {
                        enable: "phaseUse",
                        audio: "ext:王朝更替_策:2",
                        filterTarget: function (card, player, target) {
                            return player != target && !target.isLinked();
                        },
                        content: function () {
                            "step 0"
                            if (!target.isLinked()) target.damage('fire', 50);
                            "step 1"
                            if (!player.isLinked()) player.draw();
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivashentan: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return player.countCards('h');
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivashentan'), function (card, player, target) {
                                return target != player && target.countCards('h');
                            }).set('ai', function (target) {
                                if (!_status.event.goon) return 0;
                                return -get.attitude(_status.event.player, target);
                            }).set('goon', player.needsToDiscard() || player.hasCard(function (card) {
                                var val = get.value(card);
                                if (val < 0) return true;
                                if (val <= 5) {
                                    return card.number >= 11;
                                }
                                if (val <= 6) {
                                    return card.number >= 12;
                                }
                                return false;
                            }));
                            'step 1'
                            if (result.bool) {
                                player.logSkill('kivashentan', result.targets);
                                event.target = result.targets[0];
                                player.chooseToCompare(event.target);
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            if (result.bool) {
                                player.addTempSkill('kivaqitan', { player: 'phaseEnd' });
                            }
                            else {
                                event.target.useCard({ name: 'yuanjiao' }, player);
                            }
                        },
                    },
                    kivatancha: {
                        audio: "ext:王朝更替_策:2",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        viewAsFilter: function (player) {
                            return player.countCards('h', { color: 'black' }) > 0;
                        },
                        viewAs: {
                            name: "zhibi",
                        },
                        prompt: "将一张黑色手牌当知己知彼使用",
                        check: function (card) { return 8 - get.value(card) },
                        threaten: 1.2,
                        ai: {
                            basic: {
                                useful: [6, 4],
                                value: [6, 4],
                            },
                            result: {
                                player: 1,
                            },
                            expose: 0.2,
                            order: 9.5,
                            wuxie: function () {
                                return 0;
                            },
                        },
                    },
                    kivaqitan: {
                        audio: "ext:王朝更替_策:2",
                        usable: 1,
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.color(card) == 'red';
                        },
                        viewAsFilter: function (player) {
                            return player.countCards('hej', { color: 'red' }) > 0;
                        },
                        viewAs: {
                            name: "shunshou",
                        },
                        prompt: "将一张红色牌当顺手牵羊使用",
                        check: function (card) { return 8 - get.value(card) },
                        threaten: 1.2,
                        ai: {
                            basic: {
                                useful: [6, 4],
                                value: [6, 4],
                                order: 7.5,
                            },
                            result: {
                                player: 1,
                                target: function (player, target) {
                                    if (get.attitude(player, target) <= 0) return (target.countCards('he') > 0) ? -1.5 : 1.5;
                                    var js = target.getCards('j');
                                    if (js.length) {
                                        var jj = js[0].viewAs ? { name: js[0].viewAs } : js[0];
                                        if (jj.name == 'shunshou') return 3;
                                        if (js.length == 1 && get.effect(target, jj, target, player) >= 0) {
                                            return -1.5;
                                        }
                                        return 3;
                                    }
                                    return -1.5;
                                },
                            },
                            expose: 0.2,
                            wuxie: function (target, card, player, viewer) {
                                if (get.attitude(viewer, player) > 0 && get.attitude(viewer, target) > 0) {
                                    return 0;
                                }
                            },
                            tag: {
                                loseCard: 1,
                                gain: 1,
                            },
                        },
                    },
                    kivadingxuan: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "gameStart",
                            player: "enterGame",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.storage.kivadingxuan;
                        },
                        intro: {
                            content: "limited",
                        },
                        mark: true,
                        direct: true,
                        unique: true,
                        content: function () {
                            "step 0"
                            var check = (player.hp == 1 || (player.hp == 2 && player.countCards('h') <= 1));
                            player.chooseTarget(get.prompt('kivadingxuan')).set('ai', function (target) {
                                if (!_status.event.check) return 0;
                                return get.attitude(_status.event.player, target);
                            }).set('check', check);
                            "step 1"
                            if (result.bool) {
                                player.storage.kivadingxuan = true;
                                player.awakenSkill('kivadingxuan');
                                player.logSkill('kivadingxuan', result.targets);
                                result.targets[0].addSkill('kivaqingtian');
                            }
                        },
                    },
                    kivapanshen: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: "judge",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return player.countCards('hej') > 0;
                        },
                        content: function () {
                            "step 0"
                            player.chooseCard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +
                                get.translation(trigger.player.judging[0]) + '，' + get.prompt('kivapanshen'), 'hej').set('ai', function (card) {
                                    var trigger = _status.event.getTrigger();
                                    var player = _status.event.player;
                                    var judging = _status.event.judging;
                                    var result = trigger.judge(card) - trigger.judge(judging);
                                    var attitude = get.attitude(player, trigger.player);
                                    if (attitude == 0 || result == 0) return 0;
                                    if (attitude > 0) {
                                        return result - get.value(card) / 2;
                                    }
                                    else {
                                        return -result - get.value(card) / 2;
                                    }
                                }).set('judging', trigger.player.judging[0]);
                            "step 1"
                            if (result.bool) {
                                player.respond(result.cards, 'highlight');
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.bool) {
                                player.logSkill('kivapanshen');
                                if (trigger.player.judging[0].clone) {
                                    trigger.player.judging[0].clone.classList.remove('thrownhighlight');
                                    game.broadcast(function (card) {
                                        if (card.clone) {
                                            card.clone.classList.remove('thrownhighlight');
                                        }
                                    }, trigger.player.judging[0]);
                                    game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));
                                }
                                trigger.player.judging[0].discard();
                                trigger.player.judging[0] = result.cards[0];
                                if (!get.owner(result.cards[0], 'judge')) {
                                    trigger.position.appendChild(result.cards[0]);
                                }
                                game.log(trigger.player, '的判定牌改为', result.cards[0]);
                                game.delay(2);
                                player.draw();
                            }
                        },
                        ai: {
                            tag: {
                                rejudge: 1,
                            },
                        },
                    },
                    kivajiean: {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        unique: true,
                        filter: function () {
                            return game.hasPlayer(function (current) {
                                return !current.storage.kivajiean;
                            });
                        },
                        init: function (player) {
                            player.storage.kivajiean = false;
                        },
                        filterTarget: function (card, player, target) {
                            return (!target.storage.kivajiean && target.hp != player.countCards('h'));
                        },
                        content: function () {
                            if (target.hp > player.countCards('h')) {
                                target.chooseToDiscard(1, 'he', true);
                                target.loseHp();
                            }
                            else {
                                target.draw();
                                target.recover();
                            }
                            target.storage.kivajiean = true;
                            target.markSkill('kivajiean');
                        },
                        intro: {
                            content: "已发动",
                        },
                        ai: {
                            order: 7,
                            threaten: 1.5,
                            expose: 0.2,
                            result: {
                                target: function (player, target) {
                                    if (target.hp < player.countCards('h')) {
                                        if (target.hp < player.countCards('h')) return 1;
                                    }
                                    else if (target.hp > player.countCards('h')) {
                                        if (target.hp > player.countCards('h')) return -1;
                                    }
                                },
                            },
                        },
                    },
                    kivayoushi: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        content: function () {
                            "step 0"
                            if (!player.isLinked()) player.link();
                            "step 1"
                            player.damage('thunder');
                            "step 2"
                            player.recover();
                            player.draw();
                        },
                    },
                    kivaqingtian: {
                        audio: "ext:王朝更替_策:2",
                        forced: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivaqingtian')).set('ai', function (target) {
                                var player = _status.event.player;
                                if (get.attitude(player, target) > 0) {
                                    return get.recoverEffect(target, player, player) + 1;
                                }
                                return 0;
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('kivaqingtian', result.targets);
                                var target = result.targets[0];
                                event.target = target;
                                target.judge(function (card) {
                                    if (target.hp == target.maxHp) {
                                        if (get.color(card) == 'red') return -1;
                                    }
                                    if (get.color(card) == 'red') return 1;
                                    return 0;
                                });
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            if (result.color) {
                                if (result.color == 'red') {
                                    player.addSkill('kivaqingtian2');
                                    player.removeSkill('kivaqingtian3');
                                }
                                else {
                                    player.addSkill('kivaqingtian3');
                                    player.removeSkill('kivaqingtian2');
                                }
                            }
                        },
                        ai: {
                            maixie: false,
                            "maixie_hp": false,
                        },
                    },
                    "kivaqingtian2": {
                        audio: "ext:王朝更替_策:2",
                        enable: "phaseUse",
                        usable: 1,
                        prompt: "横置武将并回复一点体力",
                        content: function () {
                            "step 0"
                            if (!player.isLinked()) player.link();
                            "step 1"
                            player.recover();
                            player.removeSkill('kivaqingtian2');
                        },
                    },
                    "kivaqingtian3": {
                        audio: "ext:王朝更替_策:2",
                        usable: 1,
                        enable: "phaseUse",
                        prompt: "失去一点体力并摸三张牌",
                        content: function () {
                            "step 0"
                            player.loseHp(1);
                            "step 1"
                            player.draw(3);
                            player.removeSkill('kivaqingtian3');
                        },
                        ai: {
                            basic: {
                                order: 1,
                            },
                            result: {
                                player: function (player) {
                                    if (player.countCards('h') >= player.hp - 1) return -1;
                                    if (player.hp < 3) return -1;
                                    return 1;
                                },
                            },
                        },
                    },
                    kivajunwei: {
                        mod: {
                            targetInRange: function (card, player, target, now) {
                                if (card.name == 'sha' || card.name == 'bingliang' || card.name == 'shunshou') return true;


                            },
                        },
                    },
                    kivawumu: {
                        audio: "ext:王朝更替_策:2",
                        group: ["kivawumu1", "kivawumu2", "kivawumu3"],
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.suit(card) == 'heart';
                        },
                        viewAsFilter: function (player) {
                            return player.countCards('h', { suit: 'heart' }) > 0;
                        },
                        viewAs: {
                            name: "taoyuan",
                            suit: "heart",
                            number: 10,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "heart", "number": 10, "name": "sha", "cardid": "7598890291", "_transform": "translateX(112px)", "clone": { "name": "sha", "suit": "heart", "number": 10, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_onEndDelete": true, "timeout": 205, "_transitionEnded": true }, "timeout": 195, "original": "h" }],
                        },
                        prompt: "将一张红桃手牌当桃园结义使用",
                        check: function (card) { return 8 - get.value(card) },
                        threaten: 1.2,
                        ai: {
                            basic: {
                                useful: [6, 4],
                                value: [6, 4],
                                order: 1,
                            },
                            result: {
                                player: 1,
                                target: function (player, target) {
                                    return (target.hp < target.maxHp) ? 2 : 0;
                                },
                            },
                            expose: 0.2,
                            tag: {
                                recover: 0.5,
                                multitarget: 1,
                            },
                        },
                    },
                    "kivawumu1": {
                        audio: "ext:王朝更替_策:2",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.suit(card) == 'spade';
                        },
                        viewAsFilter: function (player) {
                            return player.countCards('h', { suit: 'spade' }) > 0;
                        },
                        viewAs: {
                            name: "wanjian",
                            suit: "spade",
                            number: 3,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "spade", "number": 3, "name": "guohe", "cardid": "6055759325", "_transform": "translateX(112px)", "clone": { "name": "guohe", "suit": "spade", "number": 3, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 2160 }, "timeout": 2113, "original": "h" }],
                        },
                        prompt: "将一张黑桃手牌当万箭齐发使用",
                        check: function (card) { return 8 - get.value(card) },
                        threaten: 1.2,
                        ai: {
                            basic: {
                                useful: [6, 4],
                                value: [6, 4],
                                order: 9,
                            },
                            result: {
                                player: 1,
                                target: function (player, target) {
                                    if (player.hasUnknown(2) && get.mode() != 'guozhan') return 0;
                                    var nh = target.countCards('h');
                                    if (get.mode() == 'identity') {
                                        if (target.isZhu && nh <= 2 && target.hp <= 1) return -100;
                                    }
                                    if (nh == 0) return -2;
                                    if (nh == 1) return -1.7
                                    return -1.5;
                                },
                            },
                            expose: 0.2,
                            wuxie: function (target, card, player, viewer) {
                                if (get.attitude(viewer, target) > 0 && target.countCards('h', 'shan')) {
                                    if (!target.countCards('h') || target.hp == 1 || Math.random() < 0.7) return 0;
                                }
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: 1,
                                multitarget: 1,
                                multineg: 1,
                            },
                        },
                    },
                    "kivawumu2": {
                        audio: "ext:王朝更替_策:2",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.suit(card) == 'diamond';
                        },
                        viewAsFilter: function (player) {
                            return player.countCards('h', { suit: 'diamond' }) > 0;
                        },
                        viewAs: {
                            name: "shunshou",
                            suit: "diamond",
                            number: 2,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "diamond", "number": 2, "name": "shan", "cardid": "3779998331", "original": "h", "_transform": "translateX(102px)", "clone": { "name": "shan", "suit": "diamond", "number": 2, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 2595 }, "timeout": 2578 }],
                        },
                        prompt: "将一张方片手牌当顺手牵羊使用",
                        check: function (card) { return 8 - get.value(card) },
                        threaten: 1.2,
                        ai: {
                            basic: {
                                useful: [6, 4],
                                value: [6, 4],
                                order: 7.5,
                            },
                            result: {
                                player: 1,
                                target: function (player, target) {
                                    if (get.attitude(player, target) <= 0) return (target.countCards('he') > 0) ? -1.5 : 1.5;
                                    var js = target.getCards('j');
                                    if (js.length) {
                                        var jj = js[0].viewAs ? { name: js[0].viewAs } : js[0];
                                        if (jj.name == 'shunshou') return 3;
                                        if (js.length == 1 && get.effect(target, jj, target, player) >= 0) {
                                            return -1.5;
                                        }
                                        return 3;
                                    }
                                    return -1.5;
                                },
                            },
                            expose: 0.2,
                            wuxie: function (target, card, player, viewer) {
                                if (get.attitude(viewer, player) > 0 && get.attitude(viewer, target) > 0) {
                                    return 0;
                                }
                            },
                            tag: {
                                loseCard: 1,
                                gain: 1,
                            },
                        },
                    },
                    "kivawumu3": {
                        audio: "ext:王朝更替_策:2",
                        enable: "chooseToUse",
                        filterCard: function (card) {
                            return get.suit(card) == 'club';
                        },
                        viewAsFilter: function (player) {
                            return player.countCards('h', { suit: 'club' }) > 0;
                        },
                        viewAs: {
                            name: "sha",
                            suit: "club",
                            number: 2,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "club", "number": 2, "name": "tengjia", "nature": "fire", "cardid": "3767089335", "_transform": "translateX(204px)", "clone": { "name": "tengjia", "suit": "club", "number": 2, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 2643 }, "timeout": 2628, "original": "h" }],
                        },
                        prompt: "将一张梅花手牌当杀使用",
                        check: function (card) { return 8 - get.value(card) },
                        threaten: 1.2,
                        ai: {
                            basic: {
                                useful: [6, 4],
                                value: [6, 4],
                            },
                            result: {
                                player: 1,
                                target: function (player, target) {
                                    if (player.hasSkill('jiu') && !target.getEquip('baiyin')) {
                                        if (get.attitude(player, target) > 0) {
                                            return -6;
                                        }
                                        else {
                                            return -3;
                                        }
                                    }
                                    return -1.5;
                                },
                            },
                            expose: 0.2,
                            order: function () {
                                if (_status.event.player.hasSkillTag('presha', true, null, true)) return 10;
                                return 3;
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function (card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function (card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function (card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function (card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function (card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                            },
                        },
                    },
                    kivazhonglie: {
                        audio: "ext:王朝更替_策:2",
                        enable: "chooseToUse",
                        filter: function (event, player) {
                            return player.countCards('e') > 0;
                        },
                        filterCard: true,
                        position: "e",
                        viewAs: {
                            name: "wuxie",
                            suit: "heart",
                            number: 13,
                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "heart", "number": 13, "name": "zhuahuang", "cardid": "2956545290", "clone": { "name": "zhuahuang", "suit": "heart", "number": 13, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 1776 }, "original": "e", "timeout": 1753 }],
                        },
                        prompt: "将一张装备区内的牌当无懈可击使用",
                        check: function (card) {
                            var player = _status.currentPhase;
                            if (player.countCards('he', { subtype: get.subtype(card) }) > 1) {
                                return 11 - get.equipValue(card);
                            }
                            if (player.countCards('h') < player.hp) {
                                return 6 - get.value(card);
                            }
                            return 2 - get.equipValue(card);
                        },
                        ai: {
                            order: 9,
                            threaten: 1.1,
                            wuxie: function (target, card, player, viewer) {
                                if (get.attitude(viewer, target) > 0 && target.countCards('h', 'sha')) {
                                    if (!target.countCards('h') || target.hp == 1 || Math.random() < 0.7) return 0;
                                }
                            },
                            basic: {
                                order: 9,
                                useful: [5, 1],
                                value: 5,
                            },
                            result: {
                                target: function (player, target) {
                                    if (player.hasUnknown(2) && get.mode() != 'guozhan') return 0;
                                    var nh = target.countCards('h');
                                    if (get.mode() == 'identity') {
                                        if (target.isZhu && nh <= 2 && target.hp <= 1) return -100;
                                    }
                                    if (nh == 0) return -2;
                                    if (nh == 1) return -1.7
                                    return -1.5;
                                },
                                player: 1,
                            },
                            tag: {
                                respond: 1,
                                respondSha: 1,
                                damage: 1,
                                multitarget: 1,
                                multineg: 1,
                            },
                            expose: 0.2,
                        },
                    },
                    kivayuejiajun: {
                        mod: {
                            attackFrom: function (from, to, distance) {
                                if (!from.getEquip(1)) return distance - 3
                            },
                        },
                    },
                    kivaxiaojiang: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            global: ["phaseBegin", "phaseEnd"],
                        },
                        frequent: true,
                        content: function () {
                            player.draw();
                        },
                    },
                    kivaqiyi: {
                        trigger: {
                            player: "phaseUseEnd",
                        },
                        direct: true,
                        audio: "ext:王朝更替_策:2",
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        content: function () {
                            "step 0"
                            var players = game.filterPlayer();
                            for (var i = 0; i < players.length; i++) {
                                if (players[i].storage.kivaqiyi) {
                                    players[i].addSkill('kivaqiyi2');
                                }
                            }
                            player.chooseCardTarget({
                                filterCard: true,
                                filterTarget: function (card, player, target) {
                                    return player != target && !target.storage.kivaqiyi;
                                },
                                ai1: function (card) {
                                    return 7 - get.value(card);
                                },
                                ai2: function (target) {
                                    var num = target.hasSkillTag('maixie') ? 2 : 0;
                                    return -get.attitude(_status.event.player, target) - num;
                                },
                                prompt: get.prompt('kivaqiyi')
                            });
                            "step 1"
                            if (result.bool) {
                                player.logSkill('kivaqiyi', result.targets[0]);
                                result.targets[0].addSkill('kivaqiyi2');
                                result.targets[0].storage.kivqiyi = [result.cards[0], player];
                                player.lose(result.cards[0], result.targets[0].node.special);
                                player.$give(1, result.targets[0]);
                                player.removeSkill('kivaxueyi');
                                player.addSkill('kivacongwen');
                            }
                        },
                        ai: {
                            threaten: 1.7,
                            expose: 0.3,
                        },
                    },
                    kivaxueyi: {
                        audio: "ext:王朝更替_策:2",
                        mark: true,
                        group: "kivaxueyi2",
                        enable: "phaseUse",
                        filterCard: true,
                        usable: 1,
                        check: function (card) {
                            return 9 - get.value(card)
                        },
                        filterTarget: function (card, player, target) {
                            if (target.hp >= target.maxHp) return false;
                            return true;
                        },
                        content: function () {
                            player.storage.kivaxueyi++
                            target.recover();
                        },
                        ai: {
                            order: 9,
                            result: {
                                target: function (player, target) {
                                    if (target.hp == 1) return 5;
                                    if (player == target && player.countCards('h') > player.hp) return 5;
                                    return 2;
                                },
                            },
                            threaten: 2,
                        },
                        intro: {
                            name: "医",
                            content: "当前状态:医",
                        },
                    },
                    "kivaxueyi2": {
                        audio: "ext:王朝更替_策:2",
                        forced: true,
                        trigger: {
                            player: "phaseDiscardBegin",
                        },
                        content: function () {
                            "step 0"
                            player.chooseToDiscard(player.countCards('h'), true);
                            "step 1"
                            player.recover();
                        },
                    },
                    kivacongwen: {
                        mark: true,
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        filter: function (event, player) {
                            return player.countCards('h') > 0;
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.storage.kivacongwen++
                            player.chooseToDiscard('h', get.prompt2('kivacongwen')).set('ai', function (card) {
                                if (!player.needsToDiscard(1)) {
                                    return get.translation(card.name).length - 1;
                                }
                                return 0;
                            }).logSkill = 'kivacongwen';
                            'step 1'
                            if (result.bool) {
                                player.draw(get.translation(result.cards[0].name).length);
                            }
                        },
                        intro: {
                            name: "文",
                            content: "当前状态:文",
                        },
                    },
                    "kivaqiyi2": {
                        audio: "ext:王朝更替_策:2",
                        mark: true,
                        trigger: {
                            player: "phaseBegin",
                        },
                        frequent: true,
                        content: function () {
                            player.storage.kivaqiyi2++
                            player.chooseToDiscard('h', 2, true);
                            player.removeSkill('kivaqiyi2');
                        },
                        intro: {
                            name: "弃医",
                            content: "已成为弃医目标",
                        },
                    },
                    kivajugu: {
                        audio: "jugu",
                        mod: {
                            maxHandcard: function (player, num) {
                                return num + player.maxHp;
                            },
                            globleFrom: function (from, to, distance) {
                                return distance + player.maxHp - player.hp;
                            },
                        },
                        trigger: {
                            global: "gameStart",
                            player: "enterGame",
                        },
                        forced: true,
                        content: function () {
                            player.draw(player.maxHp - 1, false);
                            player.$draw(player.maxHp - 1);
                        },
                    },
                    kivaziyuan: {
                        audio: "ziyuan",
                        trigger: {
                            player: "useCard",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return get.type(event.card) == 'basic' && player.hp > player.countCards('e') + 1;
                        },
                        content: function () {
                            player.chooseToDiscard(true);
                            player.draw(2);
                        },
                    },
                    kivayiliao: {
                        trigger: {
                            global: "dying",
                        },
                        priority: 6,
                        audio: "ext:王朝更替_策:2",
                        filter: function (event, player) {
                            return event.player.hp <= 0 && event.player.countCards('hej') > 0;
                        },
                        direct: true,
                        content: function () {
                            "step 0"
                            var check;
                            if (trigger.player.isUnderControl(true, player)) {
                                check = player.hasCard(function (card) {
                                    return get.type(card) != 'basic';
                                });
                            }
                            else {
                                check = (get.attitude(player, trigger.player) > 0);
                            }
                            player.choosePlayerCard(trigger.player, get.prompt('kivayiliao', trigger.player), 'hej').set('ai', function (button) {
                                if (!_status.event.check) return 0;
                                if (_status.event.target.isUnderControl(true, _status.event.player)) {
                                    if (get.type(button.link) != 'basic') {
                                        return 10 - get.value(button.link);
                                    }
                                    return 0;
                                }
                                else {
                                    return Math.random();
                                }
                            }).set('check', check).set('filterButton', function (button) {
                                if (_status.event.player == _status.event.target) {
                                    return lib.filter.cardDiscardable(button.link, _status.event.player);
                                }
                                return true;
                            });
                            "step 1"
                            if (result.bool) {
                                player.logSkill('kivayiliao', trigger.player);
                                event.card = result.links[0];
                                player.showCards([event.card], get.translation(player) + '展示的牌');
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (get.type(event.card) != 'basic') {
                                trigger.player.recover();
                                trigger.player.discard(event.card);
                            }
                        },
                        ai: {
                            threaten: 1.4,
                        },
                    },
                    kivapoxuan: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        forced: true,
                        content: function () {
                            player.damage('thunder');
                            player.draw();
                        },
                    },
                    kivawufeng: {
                        group: ["longdan_sha", "longdan_shan", "longdan_draw", "reyajiao"],
                        subSkill: {
                            draw: {
                                trigger: {
                                    player: ["useCard", "respond"],
                                },
                                forced: true,
                                popup: false,
                                filter: function (event, player) {
                                    if (!get.zhu(player, 'shouyue')) return false;
                                    return event.skill == 'longdan_sha' || event.skill == 'longdan_shan';
                                },
                                content: function () {
                                    player.draw();
                                    player.storage.fanghun2++;
                                },
                                sub: true,
                            },
                            sha: {
                                audio: "longdan",
                                enable: ["chooseToUse", "chooseToRespond"],
                                filterCard: {
                                    name: "shan",
                                },
                                viewAs: {
                                    name: "sha",
                                },
                                viewAsFilter: function (player) {
                                    if (!player.countCards('h', 'shan')) return false;
                                },
                                prompt: "将一张闪当杀使用或打出",
                                check: function () { return 1 },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'respondSha') && current < 0) return 0.6
                                        },
                                    },
                                    respondSha: true,
                                    skillTagFilter: function (player) {
                                        if (!player.countCards('h', 'shan')) return false;
                                    },
                                    order: function () {
                                        return get.order({ name: 'sha' }) + 0.1;
                                    },
                                    useful: -1,
                                    value: -1,
                                    basic: {
                                        useful: [5, 1],
                                        value: [5, 1],
                                    },
                                    result: {
                                        target: function (player, target) {
                                            if (player.hasSkill('jiu') && !target.getEquip('baiyin')) {
                                                if (get.attitude(player, target) > 0) {
                                                    return -6;
                                                }
                                                else {
                                                    return -3;
                                                }
                                            }
                                            return -1.5;
                                        },
                                    },
                                    tag: {
                                        respond: 1,
                                        respondShan: 1,
                                        damage: function (card) {
                                            if (card.nature == 'poison') return;
                                            return 1;
                                        },
                                        natureDamage: function (card) {
                                            if (card.nature) return 1;
                                        },
                                        fireDamage: function (card, nature) {
                                            if (card.nature == 'fire') return 1;
                                        },
                                        thunderDamage: function (card, nature) {
                                            if (card.nature == 'thunder') return 1;
                                        },
                                        poisonDamage: function (card, nature) {
                                            if (card.nature == 'poison') return 1;
                                        },
                                    },
                                },
                                audioname: ["re_zhaoyun"],
                                sub: true,
                            },
                            shan: {
                                audio: "longdan",
                                enable: ["chooseToRespond"],
                                filterCard: {
                                    name: "sha",
                                },
                                viewAs: {
                                    name: "shan",
                                },
                                prompt: "将一张杀当闪打出",
                                check: function () { return 1 },
                                viewAsFilter: function (player) {
                                    if (!player.countCards('h', 'sha')) return false;
                                },
                                ai: {
                                    respondShan: true,
                                    skillTagFilter: function (player) {
                                        if (!player.countCards('h', 'sha')) return false;
                                    },
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'respondShan') && current < 0) return 0.6
                                        },
                                    },
                                    order: 4,
                                    useful: -1,
                                    value: -1,
                                    basic: {
                                        useful: [7, 2],
                                        value: [7, 2],
                                    },
                                },
                                audioname: ["re_zhaoyun"],
                                sub: true,
                            },
                        },
                    },
                    kivayingmo: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "respond",
                        },
                        filter: function (event, player) {
                            return event.card.name == 'shan';
                        },
                        forced: true,
                        content: function () {
                            player.chooseToDiscard(true);
                        },
                    },
                    kivamojiang: {
                        skillAnimation: true,
                        trigger: {
                            player: "gainEnd",
                        },
                        forced: true,
                        filter: function (event, player) {
                            return !player.storage.kivamojiang && player.countCards('h') > 11;
                        },
                        content: function () {
                            player.storage.kivamojiang = true;
                            player.die();
                            player.awakenSkill('kivamojiang');
                        },
                    },
                    kivajueshang: {
                        trigger: {
                            global: "phaseBegin",
                        },
                        skillAnimation: true,
                        filter: function (event, player) {
                            return !player.storage.kivajueshang;
                        },
                        intro: {
                            content: "limited",
                        },
                        mark: true,
                        direct: true,
                        unique: true,
                        content: function () {
                            "step 0"
                            var check = (player.hp == 1 || (player.hp == 2 && player.countCards('h') <= 1));
                            player.chooseTarget(get.prompt('kivajueshang')).set('ai', function (target) {
                                if (!_status.event.check) return 0;
                                return get.attitude(_status.event.player, target);
                            }).set('check', check);
                            "step 1"
                            if (result.bool) {
                                player.storage.kivajueshang = true;
                                player.awakenSkill('kivajueshang');
                                player.logSkill('kivajueshang', result.targets);
                                player.loseMaxHp();
                                result.targets[0].addSkill('kivapoxuan');
                                result.targets[0].addSkill('zishu');
                            }
                        },
                    },
                    kivazhentian: {
                        audio: "ext:王朝更替_策:2",
                        direct: true,
                        group: ["xinxuanhuo1"],
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('kivazhentian'), function (card, player, target) {
                                return player != target;
                            }).set('ai', function (target) {
                                var att = get.attitude(_status.event.player, target);
                                if (att > 0) {
                                    if (target.countCards('h') < target.hp) att += 2;
                                    return att - target.countCards('h') / 3;
                                }
                                else {
                                    return -1;
                                }
                            });
                            "step 1"
                            if (result.bool) {
                                trigger.untrigger();
                                trigger.finish();
                                player.logSkill('xinxuanhuo1', result.targets);

                                event.target = result.targets[0];
                                event.target.addSkill('kivapoxuan');
                                event.target.addSkill('zishu');
                                player.chooseTarget('选择出杀的目标', true, function (card, player, target) {
                                    return _status.event.target.canUse('sha', target);
                                }).set('ai', function (target) {
                                    return get.effect(target, { name: 'sha' }, _status.event.target, _status.event.player);
                                }).set('target', event.target);
                            }
                            else {
                                event.finish();
                            }
                            "step 2"
                            if (result.bool && result.targets.length) {
                                game.log(player, '指定的出杀目标为', result.targets);
                                event.target.line(result.targets);
                                event.target.chooseToUse('对' + get.translation(result.targets) + '使用一张杀，或令' + get.translation(player) + '获得你的两张牌', { name: 'sha' }, result.targets[0], -1);
                            }
                            else {
                                event.bool = true;
                            }
                            "step 3"
                            if (event.bool || result.bool == false) {
                                game.playAudio('skill', 'xinxuanhuo2');
                                player.gainPlayerCard('he', event.target, Math.min(2, event.target.countCards('he')), true);
                                player.removeSkill('kivazhentian');
                            }
                        },
                        ai: {
                            expose: 0.2,
                        },
                    },
                    kivaliangmoumou: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseBegin",
                        },
                        direct: true,
                        filter: function (event, player) {
                            return player.countCards('j') > 0;
                        },
                        content: function () {
                            "step 0"
                            var next = player.discardPlayerCard(player, 2, 'hj', '是否一张手牌来弃置一张花色相同的判定牌？');
                            next.filterButton = function (button) {
                                var card = button.link;
                                if (!lib.filter.cardDiscardable(card, player)) return false;
                                if (ui.selected.buttons.length == 0) return true;
                                if (get.position(ui.selected.buttons[0].link) == 'h') {
                                    if (get.position(card) != 'j') return false;
                                }
                                if (get.position(ui.selected.buttons[0].link) == 'j') {
                                    if (get.position(card) != 'h') return false;
                                }
                                return get.suit(card) == get.suit(ui.selected.buttons[0].link)
                            };
                            next.ai = function (button) {
                                var card = button.link;
                                if (get.position(card) == 'h') {
                                    return 11 - get.value(card);
                                }
                                if (card.name == 'lebu') return 5;
                                if (card.name == 'bingliang') return 4;
                                if (card.name == 'guiyoujie') return 3;
                                return 2;
                            };
                            next.logSkill = 'kivaliangmoumou';
                        },
                    },
                    kivashence: {
                        audio: "ext:王朝更替_策:2",
                        unique: true,
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num += 3;
                        },
                        mod: {
                            maxHandcard: function (player, current) {
                                return current + 3;
                            },
                        },
                    },
                    "kivaliangyinqiang2": {
                        unique: true,
                        mod: {
                            selectTarget: function (card, player, range) {
                                if (range[1] == -1) return;
                                if (player.getEquip(1)) return;
                                if (card.name == 'sha') range[1] += 2;
                            },
                            cardUsable: function (card, player, num) {
                                if (player.getEquip(1)) return;
                                if (card.name == 'sha') return num + 999991;
                            },
                        },
                        ai: {
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.subtype(card) == 'equip1') return -1;
                                },
                            },
                        },
                    },
                    kivayajiao: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: ["respond", "useCard", "shaBegin"],
                        },
                        frequent: true,
                        filter: function (event, player) {
                            return player != _status.currentPhase && get.itemtype(event.cards) == 'cards';
                        },
                        content: function () {
                            "step 0"
                            event.card = get.cards()[0];
                            game.broadcast(function (card) {
                                ui.arena.classList.add('thrownhighlight');
                                card.copy('thrown', 'center', 'thrownhighlight', ui.arena).animate('start');
                            }, event.card);
                            event.node = event.card.copy('thrown', 'center', 'thrownhighlight', ui.arena).animate('start');
                            ui.arena.classList.add('thrownhighlight');
                            game.addVideo('thrownhighlight1');
                            game.addVideo('centernode', null, get.cardInfo(event.card));
                            if (get.type(event.card, 'trick') == get.type(trigger.card, 'trick')) {
                                player.chooseTarget('选择获得此牌的角色').set('ai', function (target) {
                                    var att = get.attitude(_status.event.player, target);
                                    if (_status.event.du) {
                                        if (target.hasSkillTag('nodu')) return 0;
                                        return -att;
                                    }
                                    if (att > 0) {
                                        return att + Math.max(0, 5 - target.countCards('h'));
                                    }
                                    return att;
                                }).set('du', event.card.name == 'du');
                            }
                            else {
                                player.chooseBool('是否弃置' + get.translation(event.card) + '？');
                                event.disbool = true;
                            }
                            game.delay(2);
                            "step 1"
                            if (event.disbool) {
                                if (!result.bool) {
                                    game.log(player, '展示了', event.card);
                                    ui.cardPile.insertBefore(event.card, ui.cardPile.firstChild);
                                }
                                else {
                                    game.log(player, '展示并弃掉了', event.card);
                                    event.card.discard();
                                }
                                game.addVideo('deletenode', player, [get.cardInfo(event.node)]);
                                event.node.delete();
                                game.broadcast(function (card) {
                                    ui.arena.classList.remove('thrownhighlight');
                                    if (card.clone) {
                                        card.clone.delete();
                                    }
                                }, event.card);
                            }
                            else if (result.targets) {
                                player.line(result.targets, 'green');
                                result.targets[0].gain(event.card, 'log');
                                event.node.moveDelete(result.targets[0]);
                                game.addVideo('gain2', result.targets[0], [get.cardInfo(event.node)]);
                                game.broadcast(function (card, target) {
                                    ui.arena.classList.remove('thrownhighlight');
                                    if (card.clone) {
                                        card.clone.moveDelete(target);
                                    }
                                }, event.card, result.targets[0]);
                            }
                            else {
                                game.log(player, '展示并弃掉了', event.card);
                                event.card.discard();
                                game.addVideo('deletenode', player, [get.cardInfo(event.node)]);
                                event.node.delete();
                                game.broadcast(function (card) {
                                    ui.arena.classList.remove('thrownhighlight');
                                    if (card.clone) {
                                        card.clone.delete();
                                    }
                                }, event.card);
                            }
                            game.addVideo('thrownhighlight2');
                            ui.arena.classList.remove('thrownhighlight');
                        },
                        ai: {
                            effect: {
                                target: function (card, player) {
                                    if (get.tag(card, 'respond') && player.countCards('h') > 1) return [1, 0.2];
                                },
                            },
                        },
                    },
                    kivatianya: {
                        unique: true,
                        trigger: {
                            player: "changeHp",
                            global: "kivatianya",
                        },
                        forced: true,
                        priority: 100,
                        fixed: true,
                        audio: "ext:王朝更替_策:2",
                        mode: ["identity", "guozhan", "boss", "stone"],
                        init: function (player) {
                            if (get.mode() == 'boss' && player == game.boss) {
                                lib.onwash.push(function () {
                                    if (!_status.kivatianya) {
                                        _status.kivatianya = true;
                                        _status.event.parent.trigger('kivatianya');
                                    }
                                    else {
                                        _status.event.player.addSkill('kivatianya');
                                    }
                                });
                                for (var i in lib.card) {
                                    if (lib.card[i].subtype == 'equip1') lib.card[i].chongzhu = true;
                                }
                            }
                        },
                        filter: function (event, player) {
                            return player.hp <= 4 || _status.kivatianya;
                        },
                        content: function () {
                            'step 0'
                            if (player.hp > 4) {
                                game.delay();
                            }
                            'step 1'
                            player.chooseControl('常山赵子龙', '常山赵子龙', function () {
                                if (Math.random() < 0.5) return '常山赵子龙';
                                return '常山赵子龙';
                            }).set('prompt', '选择一个形态');
                            'step 2'
                            var hp = player.hp;
                            player.removeSkill('boss_baonu', true);
                            if (result.control == '常山赵子龙') {
                                player.init('boss_zhaoyun_kiva');
                            }
                            else {
                                player.init('boss_zhaoyun_kiva');
                            }
                            if (hp > 4) {
                                player.maxHp = hp;
                                player.hp = hp;
                            }
                            player.update();
                            ui.clear();
                            if (player.isLinked()) player.link();
                            if (player.isTurnedOver()) player.turnOver();
                            player.discard(player.getCards('ej'));
                            'step 3'
                            while (_status.event.name != 'phaseLoop') {
                                _status.event = _status.event.parent;
                            }
                            game.resetSkills();
                            _status.paused = false;
                            _status.event.player = player;
                            _status.event.step = 0;
                            if (game.bossinfo) {
                                game.bossinfo.loopType = 1;
                                _status.roundStart = game.boss;
                            }
                        },
                        ai: {
                            effect: {
                                target: function (card, player, target) {
                                    if (get.tag(card, 'damage') || get.tag(card, 'loseHp')) {
                                        if (player.hp == 5) {
                                            if (game.players.length < 4) return [0, 5];
                                            var num = 0
                                            for (var i = 0; i < game.players.length; i++) {
                                                if (game.players[i] != game.boss && game.players[i].hp == 1) {
                                                    num++;
                                                }
                                            }
                                            if (num > 1) return [0, 2];
                                            if (num && Math.random() < 0.7) return [0, 1];
                                        }
                                    }
                                },
                            },
                        },
                    },
                    ziyukiva: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "gainEnd",
                            global: "phaseBegin",
                        },
                        forced: true,
                        content: function () {
                            player.recover();
                        },
                    },
                    kivajixian: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseEnd",
                        },
                        frequent: true,
                        content: function () {
                            player.turnOver();
                            player.changeHujia(6);
                        },
                    },
                    kivayuanqiang: {
                        enable: "phaseUse",
                        usable: 3,
                        audio: "ext:王朝更替_策:2",
                        filterTarget: function (card, player, target) {
                            return player != target && !target.isLinked();
                        },
                        content: function () {
                            "step 0"
                            player.draw();
                            player.chooseToDiscard(true);
                            "step 1"
                            target.damage('thunder');
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'juedou') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivaqijue: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        forced: true,
                        content: function () {
                            trigger.num += 1;
                        },
                        mod: {
                            maxHandcard: function (player, num) {
                                return num = 0;
                            },
                            targetInRange: function (card, player, target, now) {
                                var type = get.type(card);
                                if (type == 'basic') return true;
                            },
                        },
                    },
                    kivabianxiao: {
                        audio: "ext:王朝更替_策:2",
                        trigger: {
                            player: "dying",
                        },
                        priority: 10,
                        forced: true,
                        filter: function (event, player) {
                            return !player.storage.kivabianxiao;
                        },
                        content: function () {
                            player.recover();
                        },
                    },
                    kivahuanyi: {
                        mod: {
                            maxHandcard: function (player, num) {
                                return 2 + num;
                            },
                        },
                        audio: "ext:王朝更替_策:3",
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        priority: -5,
                        filter: function (event, player) {
                            return player.hp < player.maxHp;
                        },
                        forced: true,
                        content: function () {
                            trigger.num = 2 + player.maxHp - player.hp;
                        },
                    },
                    kivabianda: {
                        trigger: {
                            player: "phaseEnd",
                        },
                        direct: true,
                        filter: function (event, player) {
                            if (get.is.altered('kivabianda')) return game.phaseNumber % 6 == 0;
                            return game.phaseNumber % 2 == 0;
                        },
                        content: function () {
                            "step 0"
                            player.chooseTarget(get.prompt('kivabianda'), function (card, player, target) {
                                return target.isEnemyOf(player);
                            }).ai = function (target) {
                                var att = get.attitude(player, target);
                                if (target.isTurnedOver()) {
                                    if (att > 0) {
                                        return att + 5;
                                    }
                                    return -1;
                                }
                                if (player.isTurnedOver()) {
                                    return 5 - att;
                                }
                                return -att;
                            };
                            "step 1"
                            if (result.bool) {
                                player.logSkill('kivabianda', result.targets);
                                result.targets[0].die();
                            }
                        },
                        ai: {
                            threaten: 1.7,
                        },
                    },
                    kivafenlong: {
                        audio: "ext:王朝更替_策:1",
                        trigger: {
                            player: "useCard",
                        },
                        filter: function (event, player) {
                            if (event.card.name != 'sha') return false;
                            return game.hasPlayer(function (current) {
                                return !event.targets.contains(current) && get.distance(player, current) <= 1 && player.canUse('sha', current);
                            });
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivafenlong'), function (card, player, target) {
                                return !_status.event.source.contains(target) && get.distance(player, target) <= 1 && player.canUse('sha', target);
                            }).set('source', trigger.targets).set('ai', function (target) {
                                var player = _status.event.player;
                                return get.effect(target, { name: 'sha' }, player, player);
                            });
                            'step 1'
                            if (result.bool) {
                                if (!event.isMine() && !_status.connectMode) game.delayx();
                                event.target = result.targets[0];
                            }
                            else {
                                event.finish();
                            }
                            'step 2'
                            player.logSkill('kivafenlong', event.target);
                            trigger.targets.push(event.target);
                        },
                        ai: {
                            effect: {
                                player: function (card, player, target) {
                                    if (card.name == 'sha') {
                                        if (player._duanbingtmp) return;
                                        player._duanbingtmp = true;
                                        if (get.effect(target, { name: 'sha' }, player, player) <= 0) {
                                            delete player._duanbingtmp;
                                            return;
                                        }
                                        if (game.hasPlayer(function (current) {
                                            return current != target && get.distance(player, current) <= 1 &&
                                                player.canUse('sha', current) && get.effect(current, { name: 'sha' }, player, player) > 0;
                                        })) {
                                            delete player._duanbingtmp;
                                            return [1, 1];
                                        }
                                        delete player._duanbingtmp;
                                    }
                                },
                            },
                        },
                        audioname: ["heqi"],
                    },
                    kivafafen: {
                        enable: "phaseUse",
                        audio: 2,
                        filterTarget: function (card, player, target) {
                            return player != target && !target.isLinked();
                        },
                        content: function () {
                            "step 0"
                            target.chooseToDiscard(true);
                            "step 1"
                            player.loseHp();
                        },
                        ai: {
                            result: {
                                target: -1,
                                player: function (player) {
                                    return player.isLinked() ? 0 : -0.8;
                                },
                            },
                            order: 2,
                            expose: 0.3,
                            effect: {
                                target: function (card) {
                                    if (card.name == 'tiesuo') {
                                        return 0.5;
                                    }
                                },
                            },
                        },
                    },
                    kivaxinye: {
                        audio: 2,
                        trigger: {
                            player: "dieBegin",
                        },
                        filter: function (event, player) {
                            return game.hasPlayer(function (current) {
                                return player != current;
                            });
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.chooseTarget(get.prompt('kivaxinye'), function (card, player, target) {
                                return player != target;
                            }).ai = function (target) {
                                return get.attitude(player, target);
                            };
                            'step 1'
                            if (result.bool) {
                                player.logSkill('kivaxinye', result.targets);
                                for (var i = 0; i < player.skills.length; i++) {
                                    if (!result.targets[0].hasSkill(player.skills[i]))
                                        result.targets[0].addSkill(player.skills[i]);
                                }
                            }
                        },
                    },
                    kivatuwei: {
                        trigger: {
                            player: "shaBefore",
                        },
                        forced: true,
                        unique: true,
                        audio: true,
                        priority: 1000,
                        filter: function (event, player) {
                            var equip2 = event.target.getEquip(2)
                            return player.hasSkill('kivatuwei') && (equip2 && equip2.name == 'kivduizhang' || equip2 && equip2.name == 'kivmeidui' || equip2 && equip2.name == 'tengjia' || equip2 && equip2.name == 'renwang' || equip2 && equip2.name == 'bagua' || equip2 && equip2.name == 'baiyin' || equip2 && equip2.name == 'jingji' || (event.card.nature && equip2 && equip2.name == 'zhenfen') || equip2 && equip2.name == 'huxinjing' || !event.target.getEquip(2) && event.target.hasSkill('bazhen') || !event.target.getEquip(2) && event.target.hasSkill('linglong'));
                        },
                        content: function () {
                        },
                        ai: {
                            unequip: true,
                            skillTagFilter: function (player, tag, arg) {
                                if (arg && arg.name == 'sha') return true;
                                return false;
                            },
                        },
                    },
                    kivajidi: {
                        audio: 2,
                        trigger: {
                            global: "dieEnd",
                        },
                        forced: true,
                        content: function () {
                            player.draw(3);
                        },
                    },
                },
                translate: {
                    kivaqj: "千驹",
                    "kivaqj_info": "觉醒技，准备阶段，若你的体力为1，你须减1点体力上限，并永久获得技能“冲阵”和“神速”。",
                    kivazj: "志继",
                    "kivazj_info": "觉醒技，准备阶段，若你的体力为1，你须减1点体力上限，并永久获得技能“英姿”和“战绝”。",
                    kivagx: "观星",
                    "kivagx_info": "觉醒技，准备阶段，若你的体力为1，你须减1点体力上限，并永久获得技能“无心”，\"诈降\"和“清捡”。",
                    kivajm: "绝谋",
                    "kivajm_info": "每当你于摸牌阶段外获得牌时，你可以将其中任意牌以任意顺序交给其他角色，每回合最多发动四次",
                    kivabf: "北伐",
                    "kivabf_info": "锁定技 每当你失去1点体力后，你摸三张牌。然后若此时是你的出牌阶段，则直到回合结束，你使用红色【杀】无距离限制且不能被【闪】响应，你可以额外使用一张【杀】。",
                    kivatc: "天策",
                    "kivatc_info": "锁定技，你防止即将受到的伤害，改为流失一点体力；你不能成为其他角色的延时锦囊的目标",
                    kivall: "龙鳞",
                    "kivall_info": "当你使用【杀】造成伤害后，你获得1个“梅影”标记；你可以移去1个“梅影”标记来发动“龙胆”并摸一张牌",
                    kivals: "冲阵",
                    "kivals_info": "每当你发动“龙胆”使用或打出一张手牌时，你可以立即获得对方的一张手牌。",
                    kivaxh: "眩惑",
                    "kivaxh_info": "觉醒技，准备阶段，若你的体力为1，你须减1点体力上限，并永久获得技能“礼让”和“诛杀”。",
                    kivazf: "智辅",
                    "kivazf_info": "主公技，觉醒技，准备阶段，若你的体力是全场最少的(或之一)，你须增加1点体力上限，回复1点体力，并永久获得技能“悲歌”。",
                    kivacy: "仇怨",
                    "kivacy_info": "觉醒技，准备阶段，若你没有手牌，你须回复1点体力或摸两张牌，然后减1点体力上限，并永久获得技能“仇海”。",
                    kivajz: "截资",
                    "kivajz_info": "你可以将一张黑色牌当[羊皮卷]使用",
                    kivazh: "忠汉",
                    "kivazh_info": "觉醒技，当你进入濒死状态时，你减１点体力上限并将体力值回复至２点，然后获得技能矢北",
                    kivapj: "判决",
                    "kivapj_info": "你可以将一张黑色牌当[皇家审判]使用",
                    kivakl: "开乱",
                    "kivakl_info": "主公技，觉醒技，准备阶段，若你的体力是全场最少的(或之一)，你须增加1点体力上限，回复1点体力，并永久获得技能“功獒”。",
                    kivawl: "武烈",
                    "kivawl_info": "觉醒技，当你造成一次伤害后，若你已受伤，你须减1点体力上限，并获得技能“英魂”。",
                    kivacx: "藏玺",
                    "kivacx_info": "觉醒技，准备阶段，若你的体力为1，你须减1点体力上限，并永久获得技能“不屈”和“仇海”。",
                    kivalb: "鲁班",
                    "kivalb_info": "你可以将一张方片花色的手牌当[闪电]使用",
                    kivaly: "鲁育",
                    "kivaly_info": "你可以将一张黑色牌当[以逸待劳]使用",
                    kivadh: "大虎",
                    "kivadh_info": "锁定技，杀死你的角色失去当前的所有技能直到游戏结束。",
                    "kivaxh2": "小虎",
                    "kivaxh2_info": "你死亡时，可以令一名其他角色（杀死你的角色除外）摸三张牌，然后令其回复1点体力。",
                    kivadl: "断粮",
                    "kivadl_info": "出牌阶段限一次，你可以选择一项：将一张黑桃花色牌当做【兵粮寸断】使用；或弃置一张黑桃花色牌并弃置场上的一张【兵粮寸断】。选择完成后，你摸一张牌。",
                    kivays: "鹰视",
                    "kivays_info": "当你受到伤害时，可以获得伤害来源的一张牌",
                    kivalg: "狼顾",
                    "kivalg_info": "你可以将你的任意一张♠或♣手牌当【无懈可击】使用。",
                    kivajj: "决绝",
                    "kivajj_info": "限定技。当你处于濒死状态时，你可以将手牌补至体力上限，体力回复至2点，不失去技能并获一堆技能",
                    kivagc: "鬼才",
                    "kivagc_info": "任意一名角色的判定生效前，你可以打出一张红色牌替换之",
                    kivatzw: "太祖武",
                    "kivatzw_info": "主公技，场上每有一名其他魏角色存活，你的手牌上限便+2。",
                    kivayx: "焰袭",
                    "kivayx_info": "出牌阶段限一次，你的方片手牌可以当做炽羽袭使用",
                    kivalp: "雷破",
                    "kivalp_info": "你可以将两张与你本回合以此法转化的花色均不相同的手牌当惊雷闪】使用，然后当一名已受伤的角色因响应此牌而打出【闪】时，该角色摸一张牌",
                    kivajh: "劫火",
                    "kivajh_info": "你可以将一张红色牌当[趁火打劫]使用",
                    kivatj: "天劫",
                    "kivatj_info": "你可以将一张黑色牌当【过河拆桥】使用；锁定技，在你的回合，其他角色因弃置或被弃置的锦囊牌，你获得之。",
                    kivasy: "烧营",
                    "kivasy_info": "你可以将一张黑色牌当[火烧连营]使用",
                    kivalj: "龙杰",
                    "kivalj_info": "锁定技，你的红桃牌均视为方片",
                    kivasj: "逝吉",
                    "kivasj_info": "当其他角色死亡后，你可以摸四张牌。若如此做，你获得负面技能中的任意一个：“崩坏”、 “无言”和“诛神”",
                    kivabw: "霸王",
                    "kivabw_info": "主公技，吴势力角色可以替你打出[闪]",
                    kivazs: "诛神",
                    "kivazs_info": "锁定技，当你使用锦囊牌时，你可以激昂的叫一下并失去1点体力。",
                    kivasx: "失心",
                    "kivasx_info": "锁定技，每当一名角色死亡后，你失去一点体力上限，回复一点体力。",
                    kivagh: "蛊惑",
                    "kivagh_info": "觉醒技，当你进入濒死状态时，你减１点体力上限并将体力值回复至２点，然后获得技能舍宴",
                    kivalz: "激战",
                    "kivalz_info": "觉醒技，准备阶段，若你的体力为1，你须减1点体力上限，并永久获得技能“强袭”和“飞影”。",
                    kivabm: "白马",
                    "kivabm_info": "周围2人拥有白马",
                    kivazrs: "战神",
                    "kivazrs_info": "觉醒技，准备阶段，若你的体力为1，你须减1点体力上限，并永久获得技能“天义”，\"激昂\"和“替身”。",
                    kivasr: "失仁",
                    "kivasr_info": "觉醒技，结束阶段，若你于此回合内造成过4点或更多伤害，失去\"义从\"，然后从场上、牌堆或弃牌堆中获得【方天画戟】",
                    kivayc: "攸策",
                    "kivayc_info": "出牌阶段，你可以将所有的手牌（至少一张）当做任意一张通常性锦囊牌使用，每阶段限一次。",
                    kivayj: "彧节",
                    "kivayj_info": "你每受到1点伤害，可令任意一名角色将手牌补至其体力上限的张数(不能超过五张)。",
                    kivahy: "汉裔",
                    "kivahy_info": "主公技，限定技，当你进入濒死状态时，其他群势力角色可依次令你回复1点体力，然后这些角色依次受到1点伤害",
                    kivahz: "鸿姿",
                    "kivahz_info": "锁定技，摸牌阶段摸牌时，你额外摸一张牌；你的手牌上限不会因体力值的减少而减少。",
                    kivahux: "虎啸",
                    "kivahux_info": "锁定技，当你造成火焰伤害后，受到此伤害的角色各摸一张牌，本回合你对这些角色使用牌没有次数限制",
                    kivaxuj: "血祭",
                    "kivaxuj_info": "出牌阶段限一次，你可以弃置一张红色牌，然后选择至多X名角色，横置这些角色并对其中一名角色造成1点火焰伤害。（X为你已损失的体力值数且至少为1）",
                    kivawuj: "武继",
                    "kivawuj_info": "觉醒技，结束阶段，若你于此回合内造成过3点或更多伤害，你加1点体力上限并回复1点体力，失去\"虎啸\"，然后从场上、牌堆或弃牌堆中获得【青龙偃月刀】",
                    kivayd: "隐盾",
                    "kivayd_info": "你可以将一张黑色手牌当[闪]使用或打出",
                    kivatg: "天过",
                    "kivatg_info": "每当你使用（指定目标后）或被使用（成为目标后）一张【无懈可击】或【闪】时，你可以摸一张牌。",
                    kivarc: "入曹",
                    "kivarc_info": "觉醒技，当你造成一次伤害后，若你已受伤，你须减1点体力上限，并获得技能“无言”。",
                    kivaws: "魏诗",
                    "kivaws_info": "觉醒技，准备阶段，若你的体力为1，你须减1点体力上限，并永久获得技能“行殇”和“奸雄”。",
                    kivazyx: "夜袭",
                    "kivazyx_info": "每当你于回合外使用或打出一张手牌时，你可以亮出牌堆顶的一张牌，若此牌与你此次使用或打出的牌类别相同，你可以将之交给任意一名角色；若不同则你可以将之置入弃牌堆。",
                    kivaqw: "枪王",
                    "kivaqw_info": "锁定技，回合开始时，若你的装备区里没有【银月枪】，你使用之；当你受到1点伤害后，若你的装备区里没有【银月枪】，你摸一张牌",
                    kivagz: "高祖",
                    "kivagz_info": "锁定技，回合开始时，若你的装备区里没有【青釭剑】，你使用之；当你受到1点伤害后，若你的装备区里没有【青釭剑】，你摸一张牌",
                    kivalsy: "守约",
                    "kivalsy_info": "锁定技，你在回合结束后随机获得一个神势力角色的所有技能",
                    kivahcw: "楚王",
                    "kivahcw_info": "锁定技，你在回合结束后随机获得一个蜀势力角色的所有技能",
                    kivaxcb: "成败",
                    "kivaxcb_info": "锁定技，你在回合结束后随机获得一个吴势力角色的所有技能",
                    kivazzz: "择主",
                    "kivazzz_info": "锁定技，你在回合结束后随机获得一个群势力角色的所有技能",
                    kivayxsyr: "驭人",
                    "kivayxsyr_info": "出牌阶段，你可以弃置任意张牌并摸等量的牌，每阶段限1次",
                    kivacjsy: "神裔",
                    "kivacjsy_info": "<font color=#F0F>被动技能</font>：在你的回合开始之前，你可以变身为“魏武大帝” 并摸取一张牌，然后失去护甲，再将体力值补满。",
                    kivacsy: "圣衣",
                    "kivacsy_info": "锁定技，回合开始时，若你的装备区里没有【蓝格怪衣】，你使用之；当你受到1点伤害后，若你的装备区里没有【蓝格怪衣】，你摸一张牌",
                    kivacc: "参操",
                    "kivacc_info": "觉醒技，准备阶段，若你的体力为1,永久获得技能“圣衣”和“神裔”。",
                    "kivabd3": "kivabd3",
                    "kivabd3_info": "",
                    kivapxz: "破心",
                    "kivapxz_info": "锁定技，你的方片牌均视为梅花",
                    "kivabd1": "北地",
                    "kivabd1_info": "",
                    "kivabd2": "北地",
                    "kivabd2_info": "",
                    kivabd: "北地",
                    "kivabd_info": "主动技，群势力角色可以帮你使用或打出[杀]",
                    kivast: "师徒",
                    "kivast_info": "<font color=#F0F>被动技能</font>：在你的回合开始之前，你可以变身为“界诸葛亮” 并摸取一张牌，然后失去护甲，再将体力值补满。",
                    kivaffj: "辅将",
                    "kivaffj_info": "<font color=#F0F>被动技能</font>：在你的回合开始之前，你可以变身为“高达云” 并摸取一张牌，然后失去护甲，再将体力值补满。",
                    kivahenshin: "变身_北地枪王",
                    "kivahenshin_info": "<font color=#F0F>被动技能</font>：在你的回合开始之前，你可以变身为“北地枪王” 并摸取一张牌，然后失去护甲，再将体力值补满。",
                    kivazy: "忠吟",
                    "kivazy_info": "摸牌阶段，你可以放弃摸牌，改为亮出牌堆顶的两张牌并获得之，若亮出的牌颜色不同，你获得技能“忠勇”、“龙吟”，直到回合结束。",
                    kivazbsm: "丈八",
                    "kivazbsm_info": "锁定技，回合开始时，若你的装备区里没有【丈八蛇矛】，你使用之；当你受到1点伤害后，若你的装备区里没有【丈八蛇矛】，你摸一张牌",
                    kivaqlyyd: "青龙",
                    "kivaqlyyd_info": "锁定技，回合开始时，若你的装备区里没有【青龙偃月刀】，你使用之；当你受到1点伤害后，若你的装备区里没有【青龙偃月刀】，你摸一张牌",
                    "kiva3": "弟袭",
                    "kiva3_info": "<font color=#F0F>被动技能</font>：在你的回合开始之前，你可以变身为“sp界张飞” 并摸取一张牌，然后失去护甲，再将体力值补满。",
                    "kiva2": "兄谋",
                    "kiva2_info": "<font color=#F0F>被动技能</font>：在你的回合开始之前，你可以变身为“sp界关羽” 并摸取一张牌，然后失去护甲，再将体力值补满。",
                    kivazx: "昭心",
                    "kivazx_info": "<font color=#F0F>被动技能</font>：在你的回合开始之前，你可以变身为“sp界司马懿” 并摸取一张牌，然后失去护甲，再将体力值补满。",
                    kivasxk: "神兄",
                    "kivasxk_info": "<font color=#F0F>被动技能</font>：在你的回合开始之前，你可以变身为“界孙策” 并摸取一张牌，然后失去护甲，再将体力值补满。",
                    kivawj: "稳极",
                    "kivawj_info": "你可以将你的任意一张♠或♣手牌当【铁索连环】使用。",
                    kivazbz: "争辩",
                    "kivazbz_info": "每当你使用一张【决斗】时，可以摸取一张牌。出牌阶段限一次，你可以将任意一张牌当【决斗】使用。",
                    kivatzb: "天照",
                    "kivatzb_info": "你可以将你的任意一张♦手牌当【五谷丰登】使用。",
                    kivaszb: "泉佑",
                    "kivaszb_info": "每当体力值为1的一名其他角色受到伤害时，你可以将武将牌翻面并弃置一张装备牌，然后防止此伤害。",
                    kivaft: "附体",
                    "kivaft_info": "<font color=#F0F>被动技能</font>：在你的回合开始之前，你可以变身为“界马云禄” 并摸取一张桃，然后失去护甲，再将体力值补满。",
                    kivagwd: "光武",
                    "kivagwd_info": "限定技，回合开始时，你可以移去所有“梅影”标记，随机观看五名未登场的漢势力角色，将武将牌替换为其中一名角色，并将体力上限数调整为本局游戏中移去“梅影”标记的数量（至多为游戏开始时的角色数），然后若你是体力值最低的角色，你回复1点体力",
                    kivajww: "君威",
                    "kivajww_info": "锁定技，摸牌阶段摸牌时，你额外摸3张牌；你的手牌上限不会因体力值的减少而减少。",
                    kivadll: "大略",
                    "kivadll_info": "结束阶段，你可以将手牌数补至X，X为现存的势力数",
                    kivaxc: "雄才",
                    "kivaxc_info": "锁定技，摸牌阶段摸牌时，你额外摸一张牌；你的手牌上限不会因体力值的减少而减少。",
                    kivafj: "复晋",
                    "kivafj_info": "当其他角色的梅花牌，因弃牌或判定而进入弃牌堆时，你可以获得之。",
                    kivajjjjjjj: "晋劫",
                    "kivajjjjjjj_info": "出牌阶段限一次，你可以选择一项：将一张梅花花色牌当做【草木皆兵】使用；或弃置一张梅花花色牌并弃置场上的一张【草木皆兵】。选择完成后，你摸一张牌。",
                    kivalyw: "琅琊王",
                    "kivalyw_info": "主公技，觉醒技，准备阶段，若你的体力是全场最少的(或之一)，你须增加1点体力上限，回复1点体力，并永久获得技能“王马”。",
                    kivawjsm: "王马",
                    "kivawjsm_info": "锁定技，你的手牌上限为你的体力上限；当你的手牌数小于体力上限时，你不能成为过河拆桥或顺手牵羊的目标；当你的手牌数大于体力上限时，你不能成为乐不思蜀的目标",
                    kivasjj: "弑君",
                    "kivasjj_info": "觉醒技，准备阶段开始时，若你已受伤且体力上限大于存活角色数，你须将手牌摸至体力上限，失去2体力，然后获得技能“崩坏”和“懿心”。",
                    kivayxx: "懿心",
                    "kivayxx_info": "<font color=#F0F>被动技能</font>：在你的回合开始之前，你可以变身为“加强版sp界司马懿” 并摸取一张牌，然后失去护甲，再将体力值补满。",
                    kivazxlx: "中心",
                    "kivazxlx_info": "主公技，觉醒技，准备阶段，若你的体力是全场最少的(或之一)，你须增加1点体力上限，回复1点体力，并永久获得技能“篡莽”。",
                    kivazmm: "篡莽",
                    "kivazmm_info": "锁定技，若你未装备武器，你使用【杀】指定的目标数上限+2，次数上限+1",
                    kivaht: "鸿态",
                    "kivaht_info": "锁定技，摸牌阶段摸牌时，你额外摸一张牌；你的手牌上限不会因体力值的减少而减少。",
                    kivasd: "水得",
                    "kivasd_info": "结束阶段，你可以摸两张牌",
                    kivakyss: "开元",
                    "kivakyss_info": "限定技，准备阶段开始时，你可以失去技能“控局”，然后加1点体力上限并回复1点体力，并获得技能“鸿态”“失态”“水得”，最后让一名角色摸三张牌。",
                    kivastl: "失态",
                    "kivastl_info": "觉醒技，准备阶段，若你的体力为1，你须增加1点体力上限，并永久获得技能“控局”和“安史”，并失去“水得”，“鸿态”。",
                    kivaaszl: "安史",
                    "kivaaszl_info": "锁定技，当你受到一次黑色【杀】或【酒】【杀】造成的伤害后，须减1点体力上限",
                    kivasssssss: "伤逝",
                    "kivasssssss_info": "出牌阶段限三次，你可以选择一项：将一张方片花色牌当做【乐不思蜀】使用；或弃置一张方片花色牌并弃置场上的一张【乐不思蜀】。选择完成后，你摸两张牌，并增加1体力上限和回复一点体力，如果你没有“绝情”，则获得之，如果你有“暗助”，则失去。",
                    kivalx: "乱心",
                    "kivalx_info": "锁定技，当你受到一次黑色【杀】或【酒】【杀】造成的伤害后，须减2点体力上限",
                    kivaaz: "暗助",
                    "kivaaz_info": "结束阶段，你可以摸四张牌",
                    "kivajr1": "-1s",
                    "kivajr1_info": "将一张方片花色牌当做【乐不思蜀】使用】",
                    "kivaj1": "+1s",
                    "kivaj1_info": "弃置一张方片花色牌并弃置场上的一张【乐不思蜀】",
                    kivayjc: "遗计",
                    "kivayjc_info": "当你死亡后，你可以令一名角色随机获得“遗天鬼馈”其中一个技能，然后直到其下回合开始，其不能被选择为其他角色使用梅花牌的目标",
                    kivaty: "天遗",
                    "kivaty_info": "每当你受到一点伤害，可以观看牌堆顶的一张牌，并将其交给任意1名角色",
                    kivaqyc: "起义",
                    "kivaqyc_info": "摸牌阶段，你可以改为从1~2名其他角色各抽取一张手牌",
                    kivazzc: "张楚",
                    "kivazzc_info": "每当一名角色的武将牌翻面或横置时，你可以令其回一滴血。",
                    kivaqmqy: "秦末",
                    "kivaqmqy_info": "限定技，回合结束后，你可以获得技能“恃勇”，然后加1点体力上限并回复1点体力，再令一名角色获得技能“吴广”。",
                    kivawgz: "吴广",
                    "kivawgz_info": "出牌阶段限一次，你可以弃置至少一张手牌并选择一名其他角色，该角色需弃置一张与你弃置的牌类别均不同的手牌，否则其先将其武将牌翻面再摸X张牌（X为你以此法弃置的手牌数量）。",
                    kivabwxy: "霸王",
                    "kivabwxy_info": "回合开始阶段，你可以摸一张牌，并失去“仁心”，“西楚”并获得“天义”，“无双。”",
                    kivaxcxy: "西楚",
                    "kivaxcxy_info": "结束阶段，你可以摸一张，并失去技能“马术”，“霸王”，并获得“激昂”，“慷慨”。",
                    kivagou: "苟...",
                    "kivagou_info": "苟利国家生死以，岂因祸福趋避之。",
                    kivash: "始皇",
                    "kivash_info": "结束阶段，你可以将手牌数补至X，X为现存的势力数",
                    kivadz: "帝尊",
                    "kivadz_info": "摸牌阶段，你可以改为从1~7名其他角色各抽取一张手牌",
                    kivajsh: "尽河",
                    "kivajsh_info": "你死亡时，可以令一名其他角色（杀死你的角色)获得崩坏。",
                    kivakh: "开皇",
                    "kivakh_info": "缘，妙不可言。。。",
                    kivaljlj: "力谏",
                    "kivaljlj_info": "出牌阶段，你可以交给任一其他角色一张装备牌或【杀】，该角色进行二选一：1. 视为对其攻击范围内的另一名由你指定的角色使用一张【万箭齐发】。2. 摸两张牌。每回合限一次。",
                    "kivaFa♂": "FA♂",
                    "kivaFa♂_info": "",
                    kivamo: "膜",
                    "kivamo_info": "",
                    kivanian: "念诗",
                    "kivanian_info": "",
                    kivasxx: "生息",
                    "kivasxx_info": "弃牌阶段结束后，你可以抽取1名其他角色的手牌",
                    kivajyy: "谏言",
                    "kivajyy_info": "限定技，当你受到伤害后，你可令一名其他男性角色获得天义，然后若该角色的武将牌上有主公技且其不为主公，其获得此主公技",
                    kivagy: "归隐",
                    "kivagy_info": "锁定技，当你没有手牌时，不能成为[杀]或[决斗]或[AOE]的目标",
                    kivazb: "占卜",
                    "kivazb_info": "结束阶段，你可以观看牌堆顶的x张牌，并将其以任意顺序置于牌堆项或牌堆底，x为存活角色个数且不超过5",
                    kivaqy: "强运",
                    "kivaqy_info": "每当你失去最后一张手牌，可摸三张牌",
                    kivalm: "亮谋",
                    "kivalm_info": "锁定技，若你的体力值为3或更少，你视为拥有以下技能",
                    kivayr: "瑜燃",
                    "kivayr_info": "锁定技，若你的体力值为3或更少，你视为拥有以下技能",
                    kivaccjj: "爵迹",
                    "kivaccjj_info": "每当你距离4以内的角色成为杀的目标后，你可以摸三张牌。若如此做，你交给其4张牌并展示之，若该牌为装备牌，该角色可以使用此牌。",
                    kivacctc: "铁策",
                    "kivacctc_info": "锁定技，你失去毒时不流失体力；你使用毒时摸牌并获得奇袭；结束阶段，你将一张随机手牌转化为毒",
                    kivacclj: "龙技",
                    "kivacclj_info": "锁定技，当你受到一次红色【杀】或【酒】【杀】造成的伤害后，须加1点体力上限，并获得技能“魔血”。",
                    kivacccl: "策逻",
                    "kivacccl_info": "每当你受到一次伤害，你可以将一张兵粮寸断置入伤害来源的判定区",
                    kivaccjs: "皆锁",
                    "kivaccjs_info": "锁定技，结束阶段，你解除横置状态，除你之外的所有角色进入横置状态",
                    kivatl: "谈利",
                    "kivatl_info": "你可以将一张装备区内的牌当作顺手牵羊使用",
                    kivags: "国士",
                    "kivags_info": "锁定技，你的进攻距离+5",
                    kivayys: "因势",
                    "kivayys_info": "当你没有武器时，你杀次数+1，顺手可多1目标",
                    kivagod: "神计",
                    "kivagod_info": "这是个很强的技能，别再此装逼，你打不过的。",
                    kivawm: "王命",
                    "kivawm_info": "锁定技，游戏的第一个回合开始前，你加X点体力上限和体力（X为全场势力数）；当一名角色死亡后，若没有与其势力相同的角色，你减1点体力上限",
                    kivaxwx: "维新",
                    "kivaxwx_info": "<font color=#F0F>戊戌维新</font>",
                    kivaxxx: "戊戌",
                    "kivaxxx_info": "结束阶段，若你的体力不是全场最少的(或之一)，你须减1点体力或体力上限。",
                    "kivaxbr100": "百日",
                    "kivaxbr100_info": "锁定技，每当你的体力上限增加或减少时，你摸两张牌。",
                    kivadzx: "毒宗",
                    "kivadzx_info": "锁定技，当你的距离内角色被杀后，你可以观看牌堆的X张牌(X为场上存活人数)并且任意移动Y张牌(Y为你当前体力值)",
                    kivadxx: "独秀",
                    "kivadxx_info": "每当你受到一点伤害，可以观看牌堆顶的一张牌，并将其交给任意1名角色",
                    kivakqq: "康乾",
                    "kivakqq_info": "限定技，当你受到伤害后，你可令一名其他男性角色过得技能乾隆，然后若该角色的武将牌上有主公技且其不为主公，其获得此主公技",
                    kivakyq: "康雍",
                    "kivakyq_info": "限定技，让一名角色获得技能雍正",
                    kivakxq: "康熙",
                    "kivakxq_info": "锁定技，摸牌阶段摸牌时，你额外摸一张牌；你的手牌上限不会因体力值的减少而减少。",
                    kivayzq: "雍正",
                    "kivayzq_info": "出牌阶段，你使用[杀]无数量限制",
                    kivaqlq: "乾隆",
                    "kivaqlq_info": "英魂突袭询询闭月战绝仇海",
                    kivawwm: "武王",
                    "kivawwm_info": "锁定技，当你使用桃后，你可以观看牌堆的X张牌(X为场上存活人数)并且任意移动Y张牌(Y为你当前体力值)",
                    kivazsm: "周世",
                    "kivazsm_info": "当一名角色于其出牌阶段内回复体力时，你可以选择一项：1、摸一张牌；2、令该角色摸一张牌 ",
                    kivaxfm: "雄风",
                    "kivaxfm_info": "锁定技，摸牌阶段摸牌时，你额外摸一张牌；你的手牌上限不会因体力值的减少而减少。",
                    kivasgm: "神功",
                    "kivasgm_info": "你可以将你的任意一张♠或♣手牌当【桃】使用。",
                    kivajlm: "聚雷",
                    "kivajlm_info": "锁定技，你的方片，红桃牌均视为红桃",
                    kivaqd: "迁都",
                    "kivaqd_info": "你每受到1点伤害，可令任意一名角色将手牌补至其体力上限的张数(不能超过五张)。",
                    kivassd: "弑帝",
                    "kivassd_info": "基本没有动的了你的",
                    kivajjn: "劫君",
                    "kivajjn_info": "出牌阶段限九百九十九次，你可以展示一张黑色锦囊牌并将之置于牌堆顶，然后令有手牌的一名其他角色选择一项：弃置一张锦囊牌；或弃置两张非锦囊牌",
                    kivascl: "疏财",
                    "kivascl_info": "仁德的疏财，明鉴全世界！",
                    kivalss: "梁山",
                    "kivalss_info": "限定技，当你受到伤害后，你可令一名其他女性角色获得技能问卦，然后若该角色的武将牌上有主公技且其不为主公，其获得此主公技",
                    kivajqq: "集权",
                    "kivajqq_info": "你不能成为♥或♦锦囊的目标。",
                    kivaqsj: "骑射",
                    "kivaqsj_info": "锁定技，你的进攻距离+100",
                    kivagold: "金德",
                    "kivagold_info": "【南蛮入侵】对你无效；你是任何【南蛮入侵】造成伤害的来源，并总有战绝",
                    kivaxss: "小杀",
                    "kivaxss_info": "锁定技，每回合总有飞龙夺凤和太平道术，受到伤害摸1牌",
                    kivarqq: "热情",
                    "kivarqq_info": "锁定技 每当你失去1点体力后，你回1血，如果你有绝情，则失去之。",
                    "kivaxss1": "小杀",
                    "kivaxss1_info": "锁定技，回合开始时，若你的装备区里没有【飞龙夺凤】，你使用之；当你受到1点伤害后，若你的装备区里没有【飞龙夺凤】，你如果另外武将总有绝情（张春华），则失去绝情",
                    "kivaxss2": "小杀",
                    "kivaxss2_info": "锁定技，回合开始时，若你的装备区里没有【太平要术】，你使用之；当你受到1点伤害后，若你的装备区里没有【八卦阵】，你摸一张牌",
                    "kivaxss3": "小杀",
                    "kivaxss3_info": "每当你受到一点伤害，可以观看牌堆顶的一张牌，并将其交给任意1名角色",
                    kivatxx: "天秀",
                    "kivatxx_info": "1.当你受到1点伤害后，你可以将一张牌置于武将牌上，称为“秀”。2.准备阶段开始时，若你的武将牌上有“秀”，你移去所有“秀”，摸2X张牌，然后你于此回合的出牌阶段内使用【杀】的次数上限+X（X为你此次移去的“秀”数）",
                    kivayryr: "驭人",
                    "kivayryr_info": "出牌阶段，你可以弃置任意张牌并摸等量的牌，每阶段限2次",
                    kivasxsx: "生息",
                    "kivasxsx_info": "结束阶段，你可以摸一张牌并让一名角色获得【牛车】。",
                    kivaqhh: "秦皇",
                    "kivaqhh_info": "出牌阶段，你可以弃置1-4牌并摸等量的牌，并让一名角色获得技能马术和飞影，每阶段限1次",
                    kivadww: "帝威",
                    "kivadww_info": "结束阶段，你可以弃置一张红色牌，若如此做，你可以在下个准备阶段令一名距离1以内的角色回复一点体力或摸两张牌",
                    kivadwwshow: "帝威",
                    "kivadwwshow_info": "",
                    kivazyy: "昭月",
                    "kivazyy_info": "摸牌阶段开始时，你可以跳过出牌和弃牌阶段，然后获得若干张杀直到你的手牌数等于你的体值（最多为5）",
                    kivancnc: "牛车",
                    "kivancnc_info": "锁定技，你的攻防距离+1。",
                    kivadzsf: "斗战",
                    "kivadzsf_info": "出牌阶段，你可以将所有的手牌（至少一张）当做决斗或知己知彼使用，每阶段限两次;出牌阶段，你可以将所有的手牌（至少一张）当做决斗或知己知彼使用，每阶段限两次;锁定技，你不能成为[控制系]和[坑将系]的目标;锁定技，回合开始时，若你的装备区里没有【金箍棒】，你使用之；当你受到1点伤害后，若你的装备区里没有【金箍棒】，你增加一点护甲并失去一点体力;锁定技，每当你杀死一名角色，你可以多行动一个回合。",
                    kivaqtds: "齐天",
                    "kivaqtds_info": "锁定技，你的【桃】均视为【杀】;结束阶段，你可以加一点护甲",
                    kivang: "闹宫",
                    "kivang_info": "限定技，准备阶段开始时，你可以失去技能“齐天”，然后加1点体力上限并回复1点体力，再令一名角色失去一点体力。",
                    "kivadzsf1": "斗战",
                    "kivadzsf1_info": "出牌阶段，你可以将所有的手牌（至少一张）当做决斗或知己知彼使用，每阶段限两次。",
                    "kivadzsf2": "斗战",
                    "kivadzsf2_info": "锁定技，你使用的【杀】或【决斗】需要两张【闪】或【杀】响应",
                    "kivaqtds1": "齐天",
                    "kivaqtds1_info": "锁定技，你的【桃】均视为【杀】",
                    "kivaqtds2": "齐天",
                    "kivaqtds2_info": "结束阶段，你可以加一点护甲",
                    "kivadzsf3": "斗战",
                    "kivadzsf3_info": "锁定技，你不能成为[控制系]和[坑将系]的目标",
                    kivaswjj: "金睛",
                    "kivaswjj_info": "每当你使用（指定目标后）或被使用（成为目标后）一张【决斗】或【知己知彼】时，你可以摸一张牌。",
                    "kivadzsf4": "斗战(金箍)",
                    "kivadzsf4_info": "锁定技，回合开始时，若你的装备区里没有【金箍棒】，你使用之；当你受到1点伤害后，若你的装备区里没有【金箍棒】，你增加一点护甲并失去一点体力",
                    "kivajyjy1": "激扬",
                    "kivajyjy1_info": "",
                    "kivahyhy2": "火眼",
                    "kivahyhy2_info": "出牌阶段，可令除你外的所有角色依次对与其距离最近的另一名角色使用一张【杀】，无法如此做者获得技能定神。",
                    kivadsdsds: "定神",
                    "kivadsdsds_info": "锁定技，你始终展示手牌",
                    "kivaswjj1": "金睛",
                    "kivaswjj1_info": "",
                    "kivaswjj2": "金睛",
                    "kivaswjj2_info": "",
                    kivaby: "宝玉",
                    "kivaby_info": "锁定技，回合开始时，若你的装备区里没有【女娲石】，你使用之；当你受到1点伤害后，若你的装备区里没有【女娲石】，你失去一点体力上限并回1血",
                    kivawz: "武征",
                    "kivawz_info": "<font color=#000000>法</font><font color=#898936>罗马</font>出牌阶段，你可以弃置两张牌并选择1名角色，你与其各失去一至二点体力，每阶段限一次",
                    kivadoubiej: "双锏",
                    "kivadoubiej_info": "锁定技，回合开始时，若你的装备区里没有【瓦面金装锏】，你使用之；当你受到1点伤害后，若你的装备区里没有【瓦面金装锏】，你摸一张牌",
                    kivawam: "瓦面",
                    "kivawam_info": "锁定技：每当你的装备区有武器时，你使用【杀】指定一个目标后，该角色需要依次使用三张【闪】才能抵消此【杀】",
                    kivajzj: "金装",
                    "kivajzj_info": "锁定技，若你的体力值为3，你视为拥有技能“短兵”；若你的体力值为2；你视为拥有技能“完杀”；若你的体力值为1，你视为拥有技能“英姿，突袭，马术”。",
                    kivaqqqqqqq: "秦琼",
                    "kivaqqqqqqq_info": "锁定技，回合开始时，若你的装备区里没有【瓦面金装锏】，你使用之；当你受到1点伤害后，若你的装备区里没有【瓦面金装锏】，你摸一张牌;锁定技：每当你的装备区有武器时，你使用【杀】指定一个目标后，该角色需要依次使用三张【闪】才能抵消此【杀】;锁定技，若你的体力值为3，你视为拥有技能“短兵”；若你的体力值为2；你视为拥有技能“完杀”；若你的体力值为1，你视为拥有技能“英姿，突袭，马术”。",
                    "kiva100": "奋竜",
                    "kiva100_info": "你使用【杀】可以多选择一名距离为1的角色为目标;锁定技，你的进攻距离+1",
                    "kiva102": "不悔",
                    "kiva102_info": "锁定技，你不能成为[杀]和[桃]的目标",
                    "kiva104": "妖主",
                    "kiva104_info": "出牌阶段，你可以弃置3-无限并选择1名角色，摸X牌并使其获得不悔，铜雀，重义之证之一(X为玩家血量）",
                    "kiva106": "铜雀",
                    "kiva106_info": "锁定技，你不能成为[酒]和[铁索连环]的目标",
                    "kiva108": "重义",
                    "kiva108_info": "每当你失去最后一张手牌，可摸X张牌(X为玩家血量)",
                    "测试": "测试",
                    "测试_info": "每当你使用或打出一张【闪】，可令任意一名角色进行一次判定，若结果为梅花，其受到一点雷电伤害，然后你回复一点体力；若结果为黑桃，其受到两点雷电伤害",
                    "kiva109": "烈酒",
                    "kiva109_info": "锁定技:你的酒没有次数限制",
                    "kiva110": "烈酒",
                    "kiva110_info": "你可以将你的任意一张♠或♣手牌当【酒】使用。",
                    "kiva111": "烈酒",
                    "kiva111_info": "锁定技:你的酒没有次数限制;你可以将你的任意一张♠或♣手牌当【酒】使用。",
                    "kiva116": "龙剑道，来神！",
                    "kiva116_info": "锁定技，你可以用1张手牌获得一点护甲，每回合限一次",
                    "kiva117": "雷鸣",
                    "kiva117_info": "锁定技，你造成的伤害均视为具有雷属性",
                    kivaleishen: "雷神天明闪",
                    "kivaleishen_info": "当你使用杀或被杀指定，你可以判定，若结果为：黑色，你弃置一名角色区域里的一张牌；红色，你选择一名角色，其摸一张惊雷闪，若其是“先辅”选择的角色，改为其摸三张毒液循环",
                    kivawujin: "无尽",
                    "kivawujin_info": "结束阶段，你可以回两滴血并翻面",
                    kivaweiyan: "围堰",
                    "kivaweiyan_info": "锁定技，你的进攻距离+1",
                    kivagongxin: "攻心",
                    "kivagongxin_info": "出牌阶段，你多摸一张牌并对一名角色使用知己知彼",
                    "kivagongxin2": "攻心",
                    "kivagongxin2_info": "",
                    kivahuairou: "怀柔",
                    "kivahuairou_info": "每当你失去最后一张手牌，可回一滴血;限定技，出牌阶段，你可以对一至三名角色造成至多共3点雷电伤害（你可以任意分配每名目标角色受到的伤害点数），若你将对一名角色分配2点或更多的雷电伤害，你须先弃置四张不同花色的手牌再失去3点体力;锁定技，你视为拥有技能鬼才和鬼道",
                    "kivasha_df": "都风",
                    "kivasha_df_info": "锁定技，你使用杀可以摸一张牌并获得技能谦逊和连营",
                    "kivajiu_df": "都风",
                    "kivajiu_df_info": "锁定技，你使用酒可以摸一张牌并获得技能业炎和英姿",
                    "kivatao_df": "都风",
                    "kivatao_df_info": "锁定技，你使用桃可以摸一张牌并获得技能攻心",
                    "kivashan_df": "都风",
                    "kivashan_df_info": "锁定技，你使用闪可以摸一张牌并获得技能缔盟",
                    "kivadu_df": "都风",
                    "kivadu_df_info": "锁定技，你使用毒可以回复一点体力摸一张牌并获得技能围堰",
                    kivadufeng: "都风",
                    "kivadufeng_info": "锁定技，你使用杀可以摸一张牌并获得技能谦逊和连营;锁定技，你使用酒可以摸一张牌并获得技能业炎和英姿;锁定技，你使用桃可以摸一张牌并获得技能攻心;锁定技，你使用闪可以摸一张牌并获得技能缔盟;锁定技，你使用毒可以回复一点体力摸一张牌并获得技能围堰。",
                    "kivarecover_hr": "怀柔",
                    "kivarecover_hr_info": "每当你失去最后一张手牌，可回一滴血",
                    "kivadamage_hr": "怀柔",
                    "kivadamage_hr_info": "限定技，出牌阶段，你可以对一至三名角色造成至多共3点雷电伤害（你可以任意分配每名目标角色受到的伤害点数），若你将对一名角色分配2点或更多的雷电伤害，你须先弃置四张不同花色的手牌再失去3点体力。",
                    kivaBlade: "剑卡",
                    "kivaBlade_info": "锁定技：每当你的装备区有武器时，你使用【杀】指定一个目标后，该角色需要依次使用两张【闪】才能抵消此【杀】",
                    kivaRyuki: "龙击",
                    "kivaRyuki_info": "当你对距离1以内的一名角色造成1点伤害后，你可以回复1点体力或摸一张牌",
                    kivaDecade: "变身(decade)",
                    "kivaDecade_info": "出牌阶段，你可以变成假面骑士decade并摸一张牌，每回合限一次。",
                    kivapaizhao: "拍照",
                    "kivapaizhao_info": "将一张黑色手牌当流放之诏使用,每回合限一次",
                    "kivaDecade4": "腰带",
                    "kivaDecade4_info": "锁定技，回合开始时，若你的装备区里没有【DCD变身器】，你使用之；当你受到1点伤害后，若你的装备区里没有【DCD变身器】，你摸一张牌",
                    kivaquka: "取卡",
                    "kivaquka_info": "准备阶段，你可以摸一张卡牌",
                    jueshakiva: "绝杀",
                    "jueshakiva_info": "你可以杀敌",
                    dragonkiva: "龙斩",
                    "dragonkiva_info": "若你在一回合内杀死了至少一名角色，此回合结束后，你可以进行一个额外的回合。",
                    kivajiaxi: "甲袭",
                    "kivajiaxi_info": "锁定技，你根据装备区里牌的花色数获得以下技能：1种或以上-武圣；2种或以上-旋风；3种或以上-英姿；4种-神速",
                    juepokiva: "绝破",
                    "juepokiva_info": "在你的回合，除你以外，只有处于濒死状态的角色才能使用【桃】。",
                    kivalongyi: "龙一文字",
                    "kivalongyi_info": "每当你使用的【杀】被目标角色使用的【闪】抵消时，你可以对其使用一张【杀】（无距离限制）。",
                    kivayuanshe: "远射",
                    "kivayuanshe_info": "你可以将一张装备区内的牌当作万箭齐发使用",
                    longhukiva: "龙护",
                    "longhukiva_info": "在你的回合，除你以外，只有处于濒死状态的角色才能使用【桃】。",
                    "kivatxx3": "天秀",
                    "kivatxx3_info": "",
                    "kivatxx2": "天秀",
                    "kivatxx2_info": "",
                    kivajunbing: "郡兵",
                    "kivajunbing_info": "一名角色的结束阶段开始时，若其手牌数少于或者等于1，该角色可以摸一张牌。若如此做，该角色须将所有手牌交给你，然后你交给其等量的牌。",
                    kivaquji: "去疾",
                    "kivaquji_info": "出牌阶段限一次，你可以弃置X张牌（X为你已损失的体力值），然后令至多X名已受伤的角色各回复1点体力并摸一张牌。若你以此法弃置的牌中有黑色牌，你失去一点体力并摸一张牌。",
                    "kivajunbing2": "郡兵",
                    "kivajunbing2_info": "",
                    kivazhengfu: "征服",
                    "kivazhengfu_info": "你可以将一张红色牌当[杀]使用",
                    kivaxiaozhan: "骁战",
                    "kivaxiaozhan_info": "每当你发动“征服”使用或打出一张手牌时，你可以立即获得对方的一张牌。",
                    "kivaxiaozhan1": "骁战",
                    "kivaxiaozhan1_info": "",
                    "kivaxiaozhan2": "骁战",
                    "kivaxiaozhan2_info": "",
                    kivafenglue: "锋略",
                    "kivafenglue_info": "每当你受到伤害后，你可以令一名角色进行一次判定，若结果为红色，该角色摸3张牌；若结果为黑色，该角色摸2张牌，你摸1张牌",
                    kivamoushi: "谋识",
                    "kivamoushi_info": "其他角色使用或打出牌响应你使用的牌时，你可令其获得你使用的牌（其本回合不能使用或打出这张牌），然后你获得其使用或打出的牌",
                    kivaliangmou: "良谋",
                    "kivaliangmou_info": "锁定技，你造成的伤害均视为具有毒属性",
                    kivashiquan: "嗜痊",
                    "kivashiquan_info": "锁定技，每当一名角色死亡后，你摸一张牌，回复一点体力，并获得一轮智愚。",
                    kivaqiongtu: "穷途",
                    "kivaqiongtu_info": "锁定技，若你的体力值大于或等于3:你拥有技能\"无双\";若你的体力值小于或等于3:你拥有技能\"酒池\"。",
                    kivabaoli: "暴戾",
                    "kivabaoli_info": "主公技，其他群雄角色的出牌阶段限一次，可交给你一张♠或【杀】。",
                    "kivabaoli2": "暴戾",
                    "kivabaoli2_info": "",
                    kivajinqu: "进趋",
                    "kivajinqu_info": "结束阶段开始时，你可以摸X张牌，若如此做，你将手牌弃置至Y张（X为你的血量，Y为你于此回合发动过“奇制”的次数）",
                    kivacanshi: "蚕食",
                    "kivacanshi_info": "锁定技，出牌开始阶段，你视为使用一张诱饵",
                    kivashichou: "新誓仇",
                    "kivashichou_info": "主动技，你的杀可以多指定X名目标。(X为损失血量)",
                    kivazhuiji: "新追击",
                    "kivazhuiji_info": "你可以大杀四方",
                    "kivazhuiji1": "追击",
                    "kivazhuiji1_info": "锁定技，你的进攻距离+1",
                    "kivazhuiji2": "追击",
                    "kivazhuiji2_info": "锁定技，你的进攻距离+2",
                    "kivazhuiji3": "追击",
                    "kivazhuiji3_info": "锁定技，你的进攻距离+7",
                    "kivashichou1": "誓仇",
                    "kivashichou1_info": "你使用【杀】可以多选择一名距离为1的角色为目标",
                    "kivashichou2": "誓仇",
                    "kivashichou2_info": "你使用【杀】可以多选择一名距离为1的角色为目标",
                    "kivashichou3": "誓仇",
                    "kivashichou3_info": "你使用【杀】可以多选择一名距离为1的角色为目标",
                    kivamiyin: "秘隐",
                    "kivamiyin_info": "你死亡时，可以让一名角色摸三张牌，令其获得技能【谋识】",
                    kivayewang: "野望",
                    "kivayewang_info": "你可以立即获得对你造成伤害的牌并加上攻击力一下",
                    kivabuwu: "布武",
                    "kivabuwu_info": "锁定技，你造成伤害后，你摸一张牌",
                    "kivayewang1": "野望",
                    "kivayewang1_info": "锁定技，你造成的伤害+1",
                    kivazhichen: "织臣",
                    "kivazhichen_info": "出牌阶段，你可以将任意手牌送给其他角色，若送出的手牌不少于两张，你回复一点体力;每当你对其他角色造成1点伤害后，或受到其他角色造成的1点伤害后，你可与该角色各摸一张牌。",
                    kivaduoquan: "夺权",
                    "kivaduoquan_info": "限定技。当你处于濒死状态时，你可以将手牌补至体力上限，体力回复至2点，不失去技能并获一堆技能",
                    kivafengchen: "丰臣",
                    "kivafengchen_info": "出牌阶段，你可以弃置四张牌并摸四张牌，每阶段限1次",
                    "kivayinren1": "隐忍",
                    "kivayinren1_info": "黑色的杀对你无效",
                    "kivayinren2": "隐忍",
                    "kivayinren2_info": "",
                    kivayinren: "隐忍",
                    "kivayinren_info": "出牌阶段，你可以将任意手牌送给其他角色，若送出的手牌不少于两张，你回复一点体力;每当你对其他角色造成1点伤害后，或受到其他角色造成的1点伤害后，你可与该角色各摸一张牌。",
                    kivamujiang: "幕将",
                    "kivamujiang_info": "其他角色的结束阶段开始时，你可以弃置一张基本牌，令该角色选择一项：1.弃置一张装备牌并令你摸一张牌，失去技能隐忍并获得技能将军；2.受到你对其造成的1点伤害。",
                    kivajiangjun: "将军",
                    "kivajiangjun_info": "锁定技，摸牌阶段摸牌时，你额外摸一张牌；你的手牌上限不会因体力值的减少而减少;出牌阶段，你使用[杀]无数量限制;你可以将【杀】当雷【杀】使用。",
                    kivaclockup: "Rider kick",
                    "kivaclockup_info": "准备阶段，你可以视为使用一张无视距离的杀",
                    kivatuibian: "Cast off",
                    "kivatuibian_info": "受到伤害后，你可以增加攻击力直到造成伤害",
                    "kivakabutokiva2": "Cast off",
                    "kivakabutokiva2_info": "锁定技，你造成的伤害+1",
                    kivakunzhong: "困忠",
                    "kivakunzhong_info": "你死亡时，可以将所有牌交给一名其他角色，令其获得技能【天命】",
                    kivabeifa: "北伐",
                    "kivabeifa_info": "摸牌阶段，你可以改为从牌堆顶亮出五张牌，你获得不同花色的牌各一张",
                    kivawenji: "闻鸡",
                    "kivawenji_info": "每当你成为其他角色的红色牌的目标，可以弃置一张杀并摸两张牌",
                    kivatiancai: " 天才",
                    "kivatiancai_info": "摸牌阶段开始时，你可以选择一项：1.手牌上限+1，然后本回合你的牌不能对其他角色使用；2.回复1点体力，然后本回合你的牌不能对自己使用",
                    kivachouce: "筹策",
                    "kivachouce_info": "当你受到1点伤害后，你可以判定，若结果为：黑色，你摸一张牌并弃置一名角色区域里的一张牌；红色，你选择一名角色，其摸一张牌，若其是“先辅”选择的角色，改为其回一点血",
                    kivatiandu: "天妒",
                    "kivatiandu_info": "你可以立即获得你的判定牌",
                    kivayuanlue: "远略",
                    "kivayuanlue_info": "锁定技，每当你造成一点伤害，你摸一张牌",
                    kivaliyuan: "离袁",
                    "kivaliyuan_info": "锁定技，你的手牌上限-2",
                    kivayingyuan: "应援",
                    "kivayingyuan_info": "当一名角色使用杀时，你可以被铁锁并摸一张牌",
                    "kivayingyuan2": "应援",
                    "kivayingyuan2_info": "每当一名角色的摸牌阶段结束时，你可以使用一张杀",
                    "kivayingyuan3": "应援",
                    "kivayingyuan3_info": "当一名角色使用杀时，你可以横置武将牌或者重置武将牌并摸一张牌;每当一名角色的摸牌阶段结束时，你可以使用一张杀;锁定技，你造成伤害后，你摸一张牌",
                    kivazishu: "自书",
                    "kivazishu_info": "锁定技，摸牌阶段，你额外摸三张牌；你的手牌上限-4",
                    "kivayingyuan4": "应援",
                    "kivayingyuan4_info": "锁定技，你造成伤害后，你摸一张牌",
                    kivabeixian: "备弦",
                    "kivabeixian_info": "你造成伤害后，可以摸一张杀，每回合限一次",
                    kivabingyi: "秉壹",
                    "kivabingyi_info": "结束阶段开始时，你可以展示所有手牌，若均为同一颜色，则你令至多X名角色各摸一张牌，然后你摸一张牌(X为你的手牌数)。",
                    kivashenxing: "慎行",
                    "kivashenxing_info": "出牌阶段，你可以横置或重置自己，弃置一张牌并摸两张牌，每回合限一次。",
                    kivaertian: "二天",
                    "kivaertian_info": "当你出杀时，你可以再使用一张杀，每回合限一次。",
                    "kivacixiong_liubei": "雌雄",
                    "kivacixiong_liubei_info": "游戏开始或受到伤害后，你可以获得一张雌雄双股剑",
                    kivayitian: "倚天",
                    "kivayitian_info": "游戏开始或受到伤害后，你可以获得一张青釭剑",
                    kivazhabing: "诈病",
                    "kivazhabing_info": "回合结束阶段，自减一滴体力，直到下一回合开始前不受任何伤害。",
                    kivaguimou: "鬼谋",
                    "kivaguimou_info": "摸牌阶段，摸\"X+2\"张牌，X为当前损失的体力值。",
                    "kivazhabing2": "诈病",
                    "kivazhabing2_info": "",
                    "测试2": "测试2",
                    "测试2_info": "你可以将一张红色牌当[杀]使用",
                    "kivazhabing3": "诈病",
                    "kivazhabing3_info": "",
                    "kivazhabing4": "诈病",
                    "kivazhabing4_info": "",
                    "kivazhabing5": "诈病",
                    "kivazhabing5_info": "",
                    kivajincui: "尽瘁",
                    "kivajincui_info": "当你判定时，你可以摸三张牌，获得技能鞠躬并失去一点体力",
                    kivajugong: "鞠躬",
                    "kivajugong_info": "在判定牌生效前，你可以打出一张红色牌替换之,然后你失去此技能",
                    kivadiwang: "帝王",
                    "kivadiwang_info": "锁定技，摸牌阶段，你额外摸损失体力+1牌；你的手牌上限=3",
                    kivaqianxun: "劫焰",
                    "kivaqianxun_info": "锁定技，摸牌阶段，你摸X+2牌；你的手牌上限为Y(X为体力，Y为体力上限)",
                    kivayinyang: "阴阳",
                    "kivayinyang_info": "锁定技，摸牌阶段，你可以少摸一张牌并摸一张铁锁;锁定技，出牌阶段结束时，若场上有横置角色，你摸一张【火攻】。",
                    kivaxianji: "先机",
                    "kivaxianji_info": "你使用火攻时，你可以摸一张牌",
                    kivazhanbu: "占卜",
                    "kivazhanbu_info": "其他角色/你的出牌阶段限一次，其可以交给你一张牌，(若当前回合角色为你，则跳过此步骤)，你可以将此牌/一张牌置于牌堆顶或牌堆底，然后你与其/你从另一端摸一张牌",
                    kivatiannu: "天怒",
                    "kivatiannu_info": "锁定技，摸牌阶段，你摸五张杀；你的手牌上限=0",
                    "kivayinyang1": "阴阳",
                    "kivayinyang1_info": "摸牌阶段，你可以少摸一张牌并摸一张铁锁",
                    "kivayinyang2": "阴阳",
                    "kivayinyang2_info": "锁定技，出牌阶段结束时，若场上有横置角色，你摸一张【火攻】。",
                    "kivazhanbu2": "占卜",
                    "kivazhanbu2_info": "",
                    kivajingsi: "静思",
                    "kivajingsi_info": "你可以将一张方片花色的手牌当[静夜思]使用",
                    kivajinqiang: "尽将",
                    "kivajinqiang_info": "摸牌阶段，你可以额外摸一张酒",
                    kivashishi: "诗史",
                    "kivashishi_info": "摸牌阶段，你可以放弃摸牌，并结束阶段分牌",
                    "kivashishi2": "诗史",
                    "kivashishi2_info": "回个结束后，你可以摸一张牌，然后指定至多两名其他角色各摸一张牌。",
                    kivadaotang: "道唐",
                    "kivadaotang_info": "受到伤害后，你可以摸一张牌并选择使用桃",
                    kivawangjian: "王剑",
                    "kivawangjian_info": "<font color=#1800FF>英</font>锁定技，造成伤害后，你摸一张牌并回复一点体力。",
                    kivashichong: "弑重",
                    "kivashichong_info": "<font color=#1800FF>英</font>锁定技，结束阶段，你失去两点体力。",
                    kivadunji: "盾击",
                    "kivadunji_info": "<font color=#AB0000>美</font>利<font color=#1800FF>坚</font>当你使用或打出闪时，你获得一张闪",
                    kivahufu: "虎符",
                    "kivahufu_info": "出牌阶段结束时，你可以对所有敌方角色使用一张杀",
                    kivadunxi: "神盾",
                    "kivadunxi_info": "<font color=#AB0000>美</font>利<font color=#1800FF>坚</font>锁定技，回合开始时，若你的装备区里没有【队长的盾】，你使用之；当你受到1点伤害后，若你的装备区里没有【队长的盾】，你摸一张闪",
                    kivafanji: "反击",
                    "kivafanji_info": "<font color=#AB0000>美</font>利<font color=#1800FF>坚</font>每当你使用或打出一张闪，你可以使用一张杀",
                    kivabingzheng: "秉正",
                    "kivabingzheng_info": "回合结束时，你可以令手牌数不等于体力值的一名角色弃置一张手牌或摸一张牌。然后若其手牌数等于体力值，你摸一张牌，且可以交给该角色一张牌",
                    kivazhanji: "斩技",
                    "kivazhanji_info": "你可以获得其他角色打出的杀。",
                    kivajingshi: "惊师",
                    "kivajingshi_info": "限定技，当你受到伤害时，你可以摸三张牌，并失去一点体力上限，然后获得技能“破阵”。",
                    kivapozhen: "破阵",
                    "kivapozhen_info": "当你对一名角色使用杀之后，你可以选择一名其他角色并获得其一张手牌。",
                    kivajianji: "剑计",
                    "kivajianji_info": "锁定技：每当你的装备区有武器时，你使用【杀】指定一个目标后，该角色需要依次使用两张【闪】才能抵消此【杀】",
                    kivajuewu: "绝舞",
                    "kivajuewu_info": "结束阶段，你可以摸一张牌",
                    kivaxianniang: "线娘",
                    "kivaxianniang_info": "限定技，你可以与场上一名女性角色形成【绝舞】状态，你与该女性角色于结束阶段摸牌。你或者女性角色阵亡时，【绝舞】状态消失",
                    "kivaduizhang1": "队长的盾",
                    "kivaduizhang1_info": "<font color=#AB0000>美</font>利<font color=#1800FF>坚</font>当你使用或打出闪时，你获得一张杀",
                    "kivaduizhang2": "队长的盾",
                    "kivaduizhang2_info": "<font color=#AB0000>美</font>利<font color=#1800FF>坚</font>当你使用或打出杀时，你获得一张闪",
                    kivashendun: "神盾",
                    "kivashendun_info": "<font color=#AB0000>美</font>利<font color=#1800FF>坚</font>锁定技，回合开始时，若你的装备区里没有【队长的盾】，你使用之；当你受到1点伤害后，若你的装备区里没有队长的盾】，你回复一点体力并使用之。",
                    "kivaxuezhan2": "血战",
                    "kivaxuezhan2_info": "距离血战还有2轮",
                    "kivaxuezhan3": "血战",
                    "kivaxuezhan3_info": "距离血战还有1轮",
                    "kivaxuezhan4": "血战",
                    "kivaxuezhan4_info": "神盾局出动",
                    "kivadongyehu1": "洞爷湖",
                    "kivadongyehu1_info": "",
                    "kivadongyehu2": "万事屋",
                    "kivadongyehu2_info": "",
                    kivapeidao: "佩刀",
                    "kivapeidao_info": "锁定技，回合开始时，若你的装备区里没有【洞爷湖】，你使用之；当你受到1点伤害后，若你的装备区里没有【洞爷湖】，你摸一张牌",
                    kivawanshi: "万事",
                    "kivawanshi_info": "锁定技，你在回合结束后随机获得一个日本势力角色的所有技能",
                    "kivagalibang1": "EX咖喱棒",
                    "kivagalibang1_info": "<font color=#F4FF0B>亚瑟王</font>附体技，锁定技，你在回合结束后随机获得一个西方势力角色的所有技能",
                    kivatusi: "吐丝",
                    "kivatusi_info": "<font color=#AB0000>美</font>利<font color=#1800FF>坚</font>锁定技，你的黑杀无距离限制。",
                    kivachanrao: "缠绕",
                    "kivachanrao_info": "<font color=#AB0000>美</font>利<font color=#1800FF>坚</font>出牌阶段，你可以和一名角色拼点，若你赢，你获得铁索连环，若你没赢，你摸一张牌。每回合限一次。",
                    kivaexgalibang: "咖喱棒",
                    "kivaexgalibang_info": "<font color=#F4FF0B>亚瑟王</font>附体技，锁定技，回合开始时，若你的装备区里没有【ex咖喱棒】，你使用之；当你受到1点伤害后，若你的装备区里没有【ex咖喱棒】，你摸一张牌",
                    kivazhongji: "终极",
                    "kivazhongji_info": "<font color=#AB0000>美</font>利<font color=#1800FF>坚</font>锁定技，游戏开始后，你增加三点血上限并回满血",
                    kivashengdun: "圣击",
                    "kivashengdun_info": "<font color=#AB0000>美</font>利<font color=#1800FF>坚</font>锁定技，你的【美队之盾】均视为【杀】",
                    kivazhimao: "掷帽",
                    "kivazhimao_info": "出牌阶段各N次，你可以选择一项：1. 失去一点体力并对一名其他角色造成一点伤害；2. 弃置一张装备牌并对一名其他角色造成一点伤害 ",
                    kivacebu: "策步",
                    "kivacebu_info": "锁定技，你的进攻距离+2",
                    kivaliangyinqiang: "亮银枪",
                    "kivaliangyinqiang_info": "锁定技，若你未装备武器，你使用【杀】指定的目标数上限+2，次数上限+1",
                    kivayingren: "迎刃",
                    "kivayingren_info": "每当你于回合外使用或打出一张手牌时，你可以亮出牌堆顶的一张牌，若此牌与你此次使用或打出的牌类别相同，你可以将之交给任意一名角色；若不同则你可以将之置入弃牌堆。",
                    kivajinlue: "谨略",
                    "kivajinlue_info": "锁定技，你不能成为[顺手牵羊]和[乐不思蜀]的目标",
                    kivaquying: "驱影",
                    "kivaquying_info": "锁定技，场上每有一种势力，你的手牌上限便＋1。",
                    kivaceding: "策定",
                    "kivaceding_info": "<span class=\"bluetext\" style=\"color:#EE0000\">奋发技</span>，锁定技，回合开始阶段，恢复一点体力。",
                    kivatianji: "天机",
                    "kivatianji_info": "出牌阶段，你可以横置一名角色造成雷属性伤害，如此做，你受到一点火焰伤害。",
                    kivaweimu: "谋策",
                    "kivaweimu_info": "每当你受到1点伤害后，你可以可摸一张牌，然后将一张手牌置于武将牌上，称为“谋”；你的手牌上限+X（X为“谋”的数量）。",
                    kivamouce: "帷幄",
                    "kivamouce_info": "出牌阶段限一次，你可以移去一张“谋”并选择一名角色，令其回复一点体力，然后若其血量多于其手牌，你对其造成2伤害并失去一点体力。",
                    kivayuxue: "浴血",
                    "kivayuxue_info": "锁定技，你的红杀无距离限制。",
                    kivafenzhan: "奋战",
                    "kivafenzhan_info": "你使用杀时，可以获得你的手牌数量-1张牌，并对自己造成一点火焰伤害。",
                    kivafengu: "愤孤",
                    "kivafengu_info": "当你造成伤害后，你可以弃置X张牌并回复一点体力(X为游戏轮数);如果你的血量小于或等于2，则你[出牌阶段限一次，你可以与一名其他角色拼点，若你赢，其失去一点体力并你回复一点体力。]，若你的血量为0，则你立刻死亡。",
                    "kivafengu3": "愤孤",
                    "kivafengu3_info": "出牌阶段限一次，你可以与一名其他角色拼点，若你赢，其失去一点体力并你回复一点体力。",
                    "kivafengu2": "愤孤",
                    "kivafengu2_info": "如果你的血量小于或等于2，则你[]，若你的血量为0，则你立刻死亡。",
                    "kivafengu4": "愤孤",
                    "kivafengu4_info": "濒死时，你立即死亡。",
                    kivayingyong: "英勇",
                    "kivayingyong_info": "锁定技，你的【诸葛连弩】均视为【酒】",
                    kivayongwu: "勇武",
                    "kivayongwu_info": "觉醒技，回合开始阶段开始时，若你的手牌数大于你的体力值，你减1点体力上限，然后失去技能“聪慧”，获得技能“咆哮”。",
                    kivaconghui: "聪慧",
                    "kivaconghui_info": "觉醒技，回合结束阶段开始时，若你没有手牌，你减2点体力上限，然后失去技能“勇武”，获得技能“集智”，“飞影”。",
                    kivasizhan: "死战",
                    "kivasizhan_info": "你可以将一张♦牌当做【决斗】使用，每阶段限一次。若你在本回合使用过【决斗】，你的黑色牌可以当做杀使用或打出，直到回合结束。",
                    "kivasizhan2": "死战",
                    "kivasizhan2_info": "",
                    "kivasizhan3": "死战",
                    "kivasizhan3_info": "",
                    kivasishen: "死神",
                    "kivasishen_info": "杀人了，死神杀人了",
                    kivashentan: "神探",
                    "kivashentan_info": "出牌阶段开始时，你可以与一名角色拼点，若你赢，视为你获得技能奇探直到回合结束；若你没赢，视为其对你使用【远交近攻】",
                    kivatancha: "探查",
                    "kivatancha_info": "你可以将你的任意一张♠或♣手牌当【知己知彼】使用。",
                    kivaqitan: "奇探",
                    "kivaqitan_info": "你可以将你的任意一张♥或♦手牌当【顺手牵羊】使用，每回合限一次。",
                    kivadingxuan: "定悬",
                    "kivadingxuan_info": "游戏开始时，限定技，准备阶段开始时，你可以令一名角色获得青天。",
                    kivapanshen: "判审",
                    "kivapanshen_info": "在任意角色的判定牌生效前，你可以打出一张牌代替之,若此做，你摸一张牌。",
                    kivajiean: "结案",
                    "kivajiean_info": "出牌阶段，你可以选择一项：令一名体力值小于你的手牌数的角色摸一张牌并回复一点体力；或令一名体力值大于你手牌数的角色弃置一张牌并失去一点体力。此技能对每名角色只能使用一次。",
                    kivayoushi: "幽释",
                    "kivayoushi_info": "结束阶段，你可以横置自身并受到一点雷电伤害，最后回复一点体力并摸一张牌",
                    kivaqingtian: "青天",
                    "kivaqingtian_info": "每当你受到伤害后，你可以令一名角色进行一次判定，若结果为红色，你；若结果为黑色，你",
                    "kivaqingtian2": "青天(红)",
                    "kivaqingtian2_info": "出牌阶段，你可以横置武将并回复一点体力，每回合限一次。",
                    "kivaqingtian3": "青天(黑)",
                    "kivaqingtian3_info": "出牌阶段，你可以流失一点体力并摸三张牌，每回合限一次。",
                    kivajunwei: "军威",
                    "kivajunwei_info": "锁定技，你的牌无距离限制。",
                    kivawumu: "武穆",
                    "kivawumu_info": "你可以将你的任意一张♥手牌当【桃园结义】使用;你可以将你的任意一张♦手牌当【顺手牵羊】使用;你可以将你的任意一张♠手牌当【万箭齐发】使用;你可以将你的任意一张♣手牌当【杀】使用。",
                    "kivawumu1": "剑阵",
                    "kivawumu1_info": "你可以将你的任意一张♠手牌当【万箭齐发】使用。",
                    "kivawumu2": "援军",
                    "kivawumu2_info": "你可以将你的任意一张♦手牌当【顺手牵羊】使用。",
                    "kivawumu3": "死战",
                    "kivawumu3_info": "你可以将你的任意一张♣手牌当【杀】使用。",
                    kivazhonglie: "忠烈",
                    "kivazhonglie_info": "你可以将一张装备区内的牌当作无懈可击使用",
                    kivayuejiajun: "岳家军",
                    "kivayuejiajun_info": "锁定技，当你没装备武器时，攻击范围+3",
                    kivaxiaojiang: "骁将",
                    "kivaxiaojiang_info": "在所有角色的摸牌阶段和结束阶段，你使用桃时，你可以摸一张牌",
                    kivaqiyi: "弃医",
                    "kivaqiyi_info": "出牌阶段结束时，你可以将一张手牌移出游戏并指定一名其他角色。该角色的准备阶段，其弃置两张手牌，然后你失去学医，获得从文。",
                    kivaxueyi: "学医",
                    "kivaxueyi_info": "出牌阶段，你可以弃置一张手牌令一名角色回复一点体力，每阶段限一次;锁定技，弃牌阶段开始时，你弃置所有手牌并回复一点体力。",
                    "kivaxueyi2": "学医",
                    "kivaxueyi2_info": "锁定技，弃牌阶段开始时，你弃置所有手牌并回复一点体力",
                    kivacongwen: "从文",
                    "kivacongwen_info": "摸牌阶段开始时，你可弃置一张牌，然后摸X张牌(X为你弃置牌的名称字数)。",
                    "kivaqiyi2": "弃医",
                    "kivaqiyi2_info": "",
                    kivajugu: "巨贾",
                    "kivajugu_info": "锁定技，1.你的手牌上限+X。2.你的防御距离加X。3.游戏开始时，你摸Y-1张牌（X为你的体力上限-你的体力，Y为你的体力上限）",
                    kivaziyuan: "资援",
                    "kivaziyuan_info": "锁定技，当你体力大于X+1时，每当你使用一张基本牌，你摸两张牌并弃置一张牌。(X为你的装备数)",
                    kivayiliao: "医疗",
                    "kivayiliao_info": "当有角色进入濒死状态时，你可以展示该角色的一张牌：若此牌不为基本牌，则该角色弃掉这张牌并回复1点体力。",
                    kivapoxuan: "破旋",
                    "kivapoxuan_info": "锁定技，结束阶段，你可以摸一张牌并受到1点雷属性伤害。",
                    kivawufeng: "武风",
                    "kivawufeng_info": "你可以将[杀]当[闪]，或[闪]当[杀]使用或打出;每当你于回合外使用或打出一张手牌时，你可以亮出牌堆顶的一张牌，若此牌与你此次使用或打出的牌类别相同，你可以将之交给任意一名角色；若不同则你可以将之置入弃牌堆。",
                    kivayingmo: "樱末",
                    "kivayingmo_info": "锁定技，当你打出【闪】时，你弃置一张牌。",
                    kivamojiang: "末将",
                    "kivamojiang_info": "锁定技，当你手牌为12或者更多时，你立即死亡。",
                    kivajueshang: "绝殇",
                    "kivajueshang_info": "限定技，所有角色的准备阶段开始时，你可以失去一点体力上限，再令一名角色获得技能自书破旋。",
                    kivazhentian: "真田",
                    "kivazhentian_info": "摸牌阶段开始时，你可以改为令一名其他角色获得破旋自书，然后该角色需对其攻击范围内你选择的另一名角色使用一张【杀】，否则你获得其两张牌",
                    kivaliangmoumou: "良谋",
                    "kivaliangmoumou_info": "准备阶段，你可以弃置一张牌，然后弃置你判定区内一张同花色的牌",
                    kivashence: "神策",
                    "kivashence_info": "锁定技，摸牌阶段，你额外摸3张牌，你的手牌上限+3",
                    "kivaliangyinqiang2": "亮银枪",
                    "kivaliangyinqiang2_info": "锁定技，若你未装备武器，你使用【杀】指定的目标数上限+2，次数上限+无限",
                    kivayajiao: "涯角",
                    "kivayajiao_info": "每当你于回合外使用或打出一张手牌时或者出杀时，你可以亮出牌堆顶的一张牌，若此牌与你此次使用或打出的牌类别相同，你可以将之交给任意一名角色；若不同则你可以将之置入弃牌堆。",
                    kivatianya: "天涯",
                    "kivatianya_info": "锁定技，当你的体力值降至4或更低时，你变身为常山赵子龙，并立即开始你的回合",
                    ziyukiva: "自愈",
                    "ziyukiva_info": "当你获得一样牌或者每个角色回合开始时，你可以回复一点体力",
                    kivajixian: "极限",
                    "kivajixian_info": "结束阶段，你可以翻面并获得6点护甲",
                    kivayuanqiang: "元枪",
                    "kivayuanqiang_info": "biubiu",
                    kivaqijue: "奇绝",
                    "kivaqijue_info": "锁定技，摸牌阶段，你额外摸牌；你的手牌上限=0，你的基本牌无距离限制。",
                    kivabianxiao: "变小",
                    "kivabianxiao_info": "濒死时，你回复一点体力。",
                    kivahuanyi: "唤蚁",
                    "kivahuanyi_info": "锁定技，摸牌阶段，你摸牌的数量改为你已损失的体力值+2；你的手牌上限+2。",
                    kivabianda: "变大",
                    "kivabianda_info": "结束阶段，你可以选择一名敌方角色将其杀死，每两回合限一次。",
                    kivafenlong: "奋竜",
                    "kivafenlong_info": "你使用【杀】可以多选择一名距离为1的角色为目标",
                    kivafafen: "伐分",
                    "kivafafen_info": "出牌阶段，你可以令一名其他角色弃置一张牌，若如此做，你失去一点体力。",
                    kivaxinye: "新野",
                    "kivaxinye_info": "当你死亡时，你可以令一名其他角色获得你当前的所有技能。",
                    kivatuwei: "突围",
                    "kivatuwei_info": "每当你使用【杀】指定一名目标角色后，你无视其防具。",
                    kivajidi: "击敌",
                    "kivajidi_info": "当场上有一名角色阵亡时，你摸三张牌",
                    kivajiang: "激昂",
                    "kivajiang_info": "回合开始前，你可以摸X张牌并弃置X张牌。(X为游戏轮数)",
                    kivahunshang: "魂殇",
                    "kivahunshang_info": "锁定技，每当你摸一张牌，你失去一点体力;锁定技，当你濒死时，你回复一点体力。",
                    "kivahunshang2": "魂殇",
                    "kivahunshang2_info": "濒死时，你回复一点体力。",
                    kivazhiba: "制霸",
                    "kivazhiba_info": "锁定技，你的手牌上限不会因体力值的减少而减少。",
                    kivatianyi: "天义",
                    "kivatianyi_info": "出牌阶段，你可以选择一名角色，你和他弃置所有手牌，然后其摸X牌，你摸2X牌，出牌阶段限一次(X为游戏轮数)",
                    kivayizhan: "义战",
                    "kivayizhan_info": "每当你受到伤害后，你可以对伤害来源发动【知己知彼】。",
                    kivabawang: "霸王",
                    "kivabawang_info": "主公技，觉醒技，当你用【魂孙策】在一血时使用魂姿失去一点体力，则升级技能【霸王】。",
                    "kivabawang2": "霸王",
                    "kivabawang2_info": "锁定技，若你的手牌数小于4，你将手牌补至四张;锁定技，若你的手牌大于4，你弃置所有手牌。",
                    "kivabawang3": "霸王",
                    "kivabawang3_info": "",
                    kivaguanyuan: "观元",
                    "kivaguanyuan_info": "<font color=#FF0000>意</font>大<font color=#00C134>利</font>出牌阶段，你可以将两张非特殊装备牌合成为一张强化装备",
                    kivajuebian: "绝辩",
                    "kivajuebian_info": "<font color=#FF0000>意</font>大<font color=#00C134>利</font>每当你受到伤害后，你可以对伤害来源发动三张【杀】。",
                    kivacaijin: "猜金",
                    "kivacaijin_info": "<font color=#FF0000>意</font>大<font color=#00C134>利</font>每当你使用杀后，你对自己发动【掉血】和【无中生有】。",
                    kivajiushi: "救世",
                    "kivajiushi_info": "<font color=#FF0000>意</font>大<font color=#00C134>利</font><span class=\"bluetext\" style=\"color:#EE0000\">奋发技</span>，锁定技，回合开始阶段，恢复一点体力或者摸一张牌。",
                    kivajueji: "绝技",
                    "kivajueji_info": "出牌阶段开始时，结束时，回复时，很多，很多，你可以对所有敌方角色使用一张南蛮入侵",
                    "kivabawang4": "霸王",
                    "kivabawang4_info": "濒死阶段，你可以选择一名吴国角色并令其摸一张牌。",
                    kivayingyang: "鹰扬",
                    "kivayingyang_info": "国战技，濒死阶段，你可以选择一名角色并令其摸一张牌。",
                    kivayingcai: "英才",
                    "kivayingcai_info": "摸牌阶段，你展示排堆顶一张牌，并获取之。",
                    "kivayingcai2": "英才",
                    "kivayingcai2_info": "锁定技，你立即获得你的判定牌",
                    kivaqixi: "奇袭",
                    "kivaqixi_info": "出牌阶段限一次，你可以弃置一名角色X张牌。(X为游戏轮数)",
                    kivadimeng: "缔盟",
                    "kivadimeng_info": "每当一名角色在其出牌阶段使用【杀】时，你可弃置一张牌令此【杀】不计入出牌阶段使用次数，若此【杀】为红色，你摸一张牌。",
                    kivahaoshi: "好施",
                    "kivahaoshi_info": "出牌阶段限一次，你可以让一名角色摸与你手牌等量的牌，然后你失去所有手牌;结束阶段，你可以摸三张牌并将武将牌翻面。",
                    "kivahaoshi2": "好施",
                    "kivahaoshi2_info": "结束阶段，你可以摸三张牌并将武将牌翻面。",
                    "kivamoushi2": "谋时",
                    "kivamoushi2_info": "锁定技，开始阶段，弃一张牌;锁定技，结束阶段，摸一张牌。",
                    kivacefan: "策反",
                    "kivacefan_info": "出牌阶段，你可以使用一张护心镜并对自己使用一张静夜思，然后摸两张牌，每回合限一次。",
                    "kivamoushi22": "谋时",
                    "kivamoushi22_info": "锁定技，开始阶段，弃一张牌;锁定技，结束阶段，摸一张牌。",
                    kivagongao: "功獒",
                    "kivagongao_info": "锁定技，结束阶段，你失去一点体力上限并摸两张牌",
                    kivajiangzhong: "将忠",
                    "kivajiangzhong_info": "锁定技，当你受到伤害或者失去一点体力时，你失去等量体力上限，直到你体力值为1。",
                    kivajuyi: "举义",
                    "kivajuyi_info": "觉醒技，准备阶段，若你的体力为1，则你增加5点体力上限并回复5点体力，失去功獒和将忠并永久获得技能“威重”。",
                    kivaweizhong: "威重",
                    "kivaweizhong_info": "锁定技，摸牌阶段，你额外摸X+1牌；你的手牌上限=3;结束阶段，你受到一点伤害;锁定技，你不能成为[顺手牵羊]和[桃]的目标。(X为你损失体力)",
                    "kivajiangzhong2": "将忠",
                    "kivajiangzhong2_info": "",
                    "kivaweizhong2": "威重",
                    "kivaweizhong2_info": "结束阶段，你受到一点伤害。",
                    "kivaweizhong3": "威重",
                    "kivaweizhong3_info": "锁定技，你不能成为[顺手牵羊]和[桃]的目标",
                    kivacegang: "策刚",
                    "kivacegang_info": "出牌阶段限一次，你可以受到一点无来源的伤害，若如此做，你可以令一名其他角色失去所有技能，直到当前回合结束。",
                    kivaguangsu: "光速",
                    "kivaguangsu_info": "在一名其他角色的回合开始前，若你的武将牌正面朝上，你可以摸一张牌并进行一个额外回合，并在回合结束后将武将牌横置并失去一点体力。若如此做，你对其使用卡牌无视距离直到回合结束。",
                    "kivaguangsu2": "光速",
                    "kivaguangsu2_info": "",
                    kivashenjie: "神戒",
                    "kivashenjie_info": "你每受到一次伤害，可以获得伤害来源装备区中的一张牌并立即放入你的装备区。",
                    kivalvdeng: "绿灯",
                    "kivalvdeng_info": "出牌阶段结束后，你可以摸一张牌。若如此做，终止一切结算，当前回合结束。",
                    kivazhenyan: "真言",
                    "kivazhenyan_info": "出牌阶段限一次，你可以令一名其他角色横置武将牌并受到一点伤害，若如此做，你摸一张牌并弃置两张牌。",
                    kivajingong: "进攻",
                    "kivajingong_info": "出牌阶段限一次，你可以令一名体力值小于你的其他角色角色受到一点雷属性伤害。",
                    kivagangtie: "钢铁",
                    "kivagangtie_info": "锁定技，你不能成为[南蛮入侵]和[万箭齐发]的目标",
                    kivabinglian: "并肩",
                    "kivabinglian_info": "当你使用一张[杀]时，可进行一次判定，若为红色则此[杀]不可闪避，你可以将杀闪互相转换",
                    kivafazhan: "伐战",
                    "kivafazhan_info": "出牌阶段限X次，你可以和一名角色拼点，若你赢，你摸两张牌获得挑衅直到回合结束，若你没赢，则其对你使用一张【兵粮寸断】。(X为场上忠臣数量)",
                    kivajijin: "激进",
                    "kivajijin_info": "锁定技，你的进攻距离+2",
                    kivatuidi: "退敌",
                    "kivatuidi_info": "限定技，出牌阶段，你可以令一名其他角色弃置X张牌。(X为游戏轮数)",
                    kivayingji: "迎击",
                    "kivayingji_info": "限定技，出牌阶段，你可以令一名其他角色受到X点伤害。(X为游戏轮数)",
                    kivalongfen: "龙焚",
                    "kivalongfen_info": "出牌阶段限一次，你可以令一名其他角色摸一张牌，若如此做，你对其使用一张杀;你的回合内杀视为酒。",
                    kivalongyu: "龙祤",
                    "kivalongyu_info": "当你手牌数小于5时，每当你打出一张手牌或者一名角色回合开始时，你可以摸一张牌;你可以用一张黑牌当闪打出",
                    "kivalongyu2": "龙祤",
                    "kivalongyu2_info": "你可以将一张黑色手牌当[闪]使用或打出",
                    kivakongjue: "龙觉",
                    "kivakongjue_info": "锁定技，摸牌阶段开始时，你不摸牌；<span class=\"bluetext\" style=\"color:#EE0000\">奋发技</span>，若你回合开始时体力值小于2，你回复一点体力。",
                    "kivalongjue2": "龙觉",
                    "kivalongjue2_info": "",
                    "kivalongfen3": "龙焚",
                    "kivalongfen3_info": "锁定技，你的【杀】均视为【酒】",
                    "kivalongfen4": "龙焚",
                    "kivalongfen4_info": "",
                    kivagaigePeter: "<font color=#FFE087>改革</font>",
                    "kivagaigePeter_info": "<font color=#F0F>沙</font>俄附体技，出牌阶段，你可以失去1点体力上限，然后摸两张牌。",
                    "kivajunwei2": "<font color=#C70000>军威</font>",
                    "kivajunwei2_info": "<font color=#C70000>苏维埃</font>锁定技，结束阶段，你弃置一张牌并失去一点体力",
                    kivayuanping: "<font color=#C70000>鸳平</font>",
                    "kivayuanping_info": "<font color=#C70000>苏维埃</font>觉醒技，若你体力值为3，你摸1牌，然后获得“制衡”并失去\"<font color=#C70000>军威</font>\"",
                    kivatiexue: "<font color=#696969>铁</font><font color=#C70000>血</font>",
                    "kivatiexue_info": "<font color=#696969>德意志</font>每当有人死亡时，你获得一个额外回合；你使用杀前，你可以使用一张酒",
                    "kivatiexue2": "<font color=#696969>铁</font><font color=#C70000>血</font>",
                    "kivatiexue2_info": "",
                    kivajuexiang: "绝响",
                    "kivajuexiang_info": "你死亡时，可以令一名其他角色（杀死你的角色除外）获得额外回合，然后令其回复1点体力。",
                    kivazhenjun: "镇军",
                    "kivazhenjun_info": "结束阶段，若你体力值少于3或你没有手牌，你可以令一名角色弃置装备区的牌。",
                    "kivatuxi魂": "突袭",
                    "kivatuxi魂_info": "出牌阶段，你可以选择一名角色，你弃置X手牌并对其造成Y点伤害。(X为你弃置的牌数，Y为你弃置的牌的一半)",
                    kivaxiaoguo: "骁果",
                    "kivaxiaoguo_info": "当你造成伤害时，你可以替换3张手牌",
                    kivaziliang: "资粮",
                    "kivaziliang_info": "出牌阶段限一次，你可以移去一张“田”并选择一名角色，令其摸两张牌，然后若其手牌为2，则其回复一点体力。",
                    kivashuangxiong: "双雄",
                    "kivashuangxiong_info": "出牌阶段限一次，你可以失去一点体力并对一名角色使用一张决斗，若其体力值大于你，你可以继续伤害，重复十次",
                    "kivaxiying2": "袭营",
                    "kivaxiying2_info": "",
                    kivaxiying: "袭营",
                    "kivaxiying_info": "锁定技，摸牌阶段，你弃置X张牌;每当一名角色受到一点伤害，你可以摸一张牌(X为你手牌数的一半)",
                    kivamanshen: "漫神",
                    "kivamanshen_info": "你拥有国漫的威力。",
                    kivaxunxun: "恂恂",
                    "kivaxunxun_info": "出牌阶段，重铸一张手牌，每阶段限10次",
                    kivabingfa: "兵法",
                    "kivabingfa_info": "出牌阶段限一次，你可以将所有装备牌交给一名其他角色，若如此做，该角色于其下个回合使用一张装备牌可摸一张牌",
                    kivabaoshen: "保身",
                    "kivabaoshen_info": "结束阶段，你可以翻面并在下个回个之前不受【杀】和【决斗】的伤害。",
                    "kivabingfa2": "兵法",
                    "kivabingfa2_info": "每当你使用一张非转化的装备牌，可以摸一张牌",
                    "kivabaoshen2": "保身",
                    "kivabaoshen2_info": "锁定技，你不能成为[杀]和[决斗]的目标",
                    kivahuaiju: "怀橘",
                    "kivahuaiju_info": "觉醒技，准备开始阶段，若你血量为2，手牌和装备牌均为3，你获得游戏胜利。",
                    kivaligong: "急攻",
                    "kivaligong_info": "你可以弃置三张牌，然后失去一点体力并回复一点体力。",
                    kivaluanji: "乱击",
                    "kivaluanji_info": "你失去一点体力时，你可以对所有敌方角色使用一张万箭齐发",
                    kivaxieyi: "血裔",
                    "kivaxieyi_info": "锁定技，游戏开始时，你摸三张牌;你的手牌上限+3。",
                    kivazhuzhen: "助阵",
                    "kivazhuzhen_info": "哪吒杨戬助阵技，游戏开始时，你装备三尖刀和带火风轮。",
                    kivanizhan: "逆战",
                    "kivanizhan_info": "每当你使用一张杀时，你可以可摸一张牌，然后将一张手牌置于武将牌上，称为“逆”；你的杀可以攻击的敌人+1，你的进攻距离+X（X为“逆”的数量）。",
                    kivawucheng: "武成",
                    "kivawucheng_info": "觉醒技，准备阶段，若你的逆标记大于3，你须减1点体力上限，并永久获得技能“突烽”。",
                    kivatufeng: "突烽",
                    "kivatufeng_info": "出牌阶段，你可以把任意一张逆当【决斗】使用，每回合限一次。",
                    kivashifei: "饰非",
                    "kivashifei_info": "每当你对其他角色造成1点伤害后，或受到其他角色造成的1点伤害后，你可与该角色各摸一张牌。",
                    kivaxxianji: "献急",
                    "kivaxxianji_info": "锁定技，你的回合外，你每受到一次伤害，伤害来源获得随势，直到该回合结束。",
                    kivakuanggu: "狂骨",
                    "kivakuanggu_info": "当你造成1点伤害后，你可以可摸一张牌，然后将一张手牌置于武将牌上，称为“狂”；你的手牌上限-X;你的进攻距离+1（X为“狂”的数量）。",
                    kivaqimou: "奇谋",
                    "kivaqimou_info": "出牌阶段限一次，你可以移去一张“狂”并选择一名角色，令其摸一张牌，然后若其体力值为1，其多摸两张牌。",
                    kivayulong: "御龙",
                    "kivayulong_info": "每当你受到1点伤害后，你可以可摸一张牌，然后将一张手牌置于武将牌上，称为“御”。",
                    kivatengkong: "腾空",
                    "kivatengkong_info": "锁定技，摸牌阶段，你额外摸X张牌(X为你的\"御\"的数量)",
                    kivahubao: "虎豹",
                    "kivahubao_info": "锁定技，出牌阶段结束后，你可以摸2牌并弃置2牌;与你距离为1的其他角色不能使用或打出牌响应你使用的牌",
                    kivasidi: "司敌",
                    "kivasidi_info": "每当你使用或打出一张非转化的普通基本牌，可以摸一张牌",
                    kivatucao: "吐槽",
                    "kivatucao_info": "出牌阶段，你可以将一张【闪】交给一名本回合未获得过“吐槽”牌的其他角色，然后其于下个回合结束之前使用牌时，其弃置一张牌",
                    "kivatucao2": "吐槽",
                    "kivatucao2_info": "",
                    "kivacaodan2": "坑爹",
                    "kivacaodan2_info": "",
                    kivacaodan: "槽弹",
                    "kivacaodan_info": "锁定技，准备阶段，你令所有其他角色的获得坑爹buff直到回合结束",
                    kivabaota: "宝塔",
                    "kivabaota_info": "出牌阶段限一次，你可以令一名其他角色横置武将牌，若如此做，其失去非锁定技直到回合结束。",
                    kivajiangcai: "将才",
                    "kivajiangcai_info": "出牌阶段限一次，你可以选择一名其他角色，若你的体力大于其，其对你使用一张决斗，若你的体力小于其，你对其使用一张决斗，若你们体力值相等，你们各摸一张牌。",
                    kivafuchou: "复仇",
                    "kivafuchou_info": "每当你受到伤害后，你可以对伤害来源发动【杀】。",
                    kivarenwang: "仁望",
                    "kivarenwang_info": "当你一次失去至少两张牌后，你可以回复一点体力",
                    kivajizhao: "激诏",
                    "kivajizhao_info": "出牌阶段限一次，你可以将所有手牌交给一名其他角色，若如此做，该角色于其下个回合的杀可以攻击的武将数量+1，进攻距离加一，且出杀的次数上限+1",
                    "kivajizhao2": "激诏",
                    "kivajizhao2_info": "",
                    kivahengzhi: "衡制",
                    "kivahengzhi_info": "出牌阶段，你可以弃置任意张牌并摸等量的牌，若你的体力值为1，你回复一点体力，每阶段限1次",
                    kivayuanzhu: "援助",
                    "kivayuanzhu_info": "每当你失去一张装备牌，可以回复一点体力",
                    kivashixiong: "势雄",
                    "kivashixiong_info": "你可以立即获得对你造成伤害的牌，然后替换两张牌",
                    kivahuzhen: "护阵",
                    "kivahuzhen_info": "结束阶段，你可以令任意名已受伤的角色摸一张牌，然后你与其他角色的的距离+1。",
                    kivakuilei: "傀儡",
                    "kivakuilei_info": "锁定技，你视为总有\"奸雄\"，和\"酒池\"。",
                    kivatianming: "天命",
                    "kivatianming_info": "回合开始时，若回合大于2，若你的装备数少于3，则你变成【sp魂刘备】;若你的装备数等于于3，则你变成【sp魂孙权】;若你的装备数大于3，则你变成【sp魂曹操】。",
                    kivazhenlong: "真龙",
                    "kivazhenlong_info": "游戏开始时，你可以更改皮肤",
                    kivatiancaibuild: "天才",
                    "kivatiancaibuild_info": "每当你使用一张【桃】，你可以使用一张无中生有。",
                    kivashuangchong: "双重",
                    "kivashuangchong_info": "结束阶段，若你的手牌数小于3且没有装备牌，你可以额外执行一个回合。",
                    kivapolu: "破虏",
                    "kivapolu_info": "锁定技，你的黑杀无距离限制。",
                    kivafuzhi: "父志",
                    "kivafuzhi_info": "出牌阶段，你可以选择一名角色，你弃置任意张手牌，然后其弃置X牌并获得你弃置的牌(X为你失去的血量)。",
                    kivayice: "遗策",
                    "kivayice_info": "每当你受到一点伤害，可以观看牌堆顶的三张牌，并将其交给任意1~3名角色",
                    kivatianze: "天泽",
                    "kivatianze_info": "出牌阶段限一次，你可以让一名角色回复一点体力或者获得三张牌，然后你失去一点体力。",
                    "guojia_fuhekiva": "负荷",
                    "guojia_fuhekiva_info": "负荷技，准备阶段，若你的体力值为1，你变成【郭嘉】并失去一点体力上限。",
                    kivawulin: "武临",
                    "kivawulin_info": "锁定技，你的红色手牌视为杀；锁定技，你使用红色杀时无距离限制，使用黑杀不计入使用【杀】的次数。",
                    kivamengyan: "梦魇",
                    "kivamengyan_info": "锁定技，每当你受到伤害后，伤害来源失去一点体力上限。",
                    "guanyu_fuhekiva": "负荷",
                    "guanyu_fuhekiva_info": "负荷技，结束阶段，若你没有使用【杀】你变成【界关羽】并失去一点体力上限。",
                    kivawangong: "挽弓",
                    "kivawangong_info": "出牌阶段限一次，你可以失去1点体力并选择一名有手牌的其他角色，你观看其手牌：若其手牌中有【桃】，则视为你对其使用【杀】,且造成3点伤害并使其回复两点体力；若其手牌中没有【桃】，其弃置两张牌",
                    kivabaizhong: "百中",
                    "kivabaizhong_info": "锁定技，你的杀必中。",
                    "huangzhong_fuhekiva": "负荷",
                    "huangzhong_fuhekiva_info": "负荷技，结束阶段，若你体力值为1，你变成【黄忠】并失去一点体力上限。",
                    "kivawangong2": "挽弓",
                    "kivawangong2_info": "",
                    "kivawangong3": "挽弓",
                    "kivawangong3_info": "",
                    kivaxinyan: "衅言",
                    "kivaxinyan_info": "出牌阶段限一次，你可以摸一张牌并选择一名有手牌和装备牌的其他角色，你观看其手牌：若其手牌中有【杀】，则视为其对你使用【杀】,然后其弃置其一张装备牌；若其手牌中没有【杀】，你弃置其两张牌，然后你弃置一张牌，最后其摸牌阶段少摸一张牌。",
                    kivajitian: "继天",
                    "kivajitian_info": "锁定技，准备阶段，你弃置所有判定区内的牌。",
                    "jiangwei_fuhekiva": "负荷",
                    "jiangwei_fuhekiva_info": "负荷技，准备阶段，若你没有手牌，你变成【姜维】并失去一点体力上限。",
                    kivashexue: "涉学",
                    "kivashexue_info": "锁定技，摸牌阶段摸牌时，你额外摸一张牌；你的手牌上限为无限。",
                    kivazhanxin: "战心",
                    "kivazhanxin_info": "出牌阶段限一次，你可以弃置0-2张牌并选择一名有手牌的其他角色，你观看其手牌：若其手牌中有【桃】，则视为你弃置其一张牌；若其手牌中没有【桃】，你看其手牌。",
                    "lvmeng_fuhekiva": "负荷",
                    "lvmeng_fuhekiva_info": "负荷技，当你手牌为20或者更多时，你变成【界吕蒙】并弃牌直到手牌为4。",
                    kivaxunya: "逊雅",
                    "kivaxunya_info": "当你成为锦囊牌的目标后，你可以将任意张手牌交给一名其他角色;锁定技，准备阶段，你弃置所有判定区内的牌;你不能成为[顺手牵羊]和[过河拆桥]的目标",
                    kivajieying: "劫营",
                    "kivajieying_info": "每当你失去最后一张手牌，可摸X张牌(X为你的装备数)。",
                    "luxun_fuhekiva": "负荷",
                    "luxun_fuhekiva_info": "负荷技，你一次摸牌大于或等于5，你变成【陆逊】并失去一点体力上限。",
                    "kivaxinyan2": "衅言",
                    "kivaxinyan2_info": "",
                    kivafeizhe: "废哲",
                    "kivafeizhe_info": "出牌阶段，你可以弃置任意张牌，若你的手牌数大于等于2，则另一名角色变成【朱然】;若你的手牌数等于1，则另一名角色变成【朱桓】;若你的手牌数等于1，则另一名角色变成【朱治】;若你的目标为自己，你获得【胆守】，【安国】和【平寇】。",
                    kivazhuaji: "爪击",
                    "kivazhuaji_info": "出牌阶段限一次，你可以对一名体力值最少的角色之一并对其使用一张不影响出杀数量的【杀】。",
                    kivazhenjin: "振金",
                    "kivazhenjin_info": "若你的手牌数等于或小于2，你的杀必中并，若你没有护甲，你获得一点护甲。",
                    kivaleishenthor: "雷神",
                    "kivaleishenthor_info": "锁定技，你吸收即将受到的雷电伤害，若如此做，你下一次伤害为雷电伤害。",
                    "kivaleishen2": "雷神",
                    "kivaleishen2_info": "",
                    kivatianshen: "天神",
                    "kivatianshen_info": "锁定技，你收到的伤害减半。",
                    kivajisu: "疾速",
                    "kivajisu_info": "结束阶段，你获得额外的摸牌阶段和出牌阶段。",
                    kivayaxing: "雅行",
                    "kivayaxing_info": "若回合数为10，你胜利。",
                    kivajingu: "金骨",
                    "kivajingu_info": "你受到伤害之前，你可以失去一点体力，然后摸一张牌并停止结算。",
                    kivalangzhua: "狼爪",
                    "kivalangzhua_info": "锁定技，当你没装备武器时，攻击范围+2，你的攻击目标+1。",
                    kivayongbing: "佣兵",
                    "kivayongbing_info": "当你对一名其他角色造成伤害后，该角色可令你获得其一张牌，若如此做，则视为你对其选择的另一名角色使用一张【过河拆桥】",
                    kivalengxue: "冷血",
                    "kivalengxue_info": "当你使用过河拆桥时，你可以重铸一张牌",
                    kivashiting: "时停",
                    "kivashiting_info": "限定技，你可以让一名角色获得副将【奇异法阵】。",
                    kivahuansuo: "幻梭(旧)",
                    "kivahuansuo_info": "其他角色回合开始阶段，你可以弃置一张手牌并令当前角色选择暂时获得以下技能直到下轮开始。",
                    kivaqqiyi: "奇异",
                    "kivaqqiyi_info": "开始阶段，你可以摸一张牌",
                    "kivahuansuo2": "幻梭",
                    "kivahuansuo2_info": "锁定技，每名角色的回合开始时，你进行一次判定，然后你随花色获得以下技能:若判定花色为红桃，则视为你有\"寄篱\";若判定花色为方片，则视为你有\"自书\";若判定花色为黑桃，则视为你有\"帷幕\";若判定花色为梅花，则视为你有\"绝情\"。",
                    kivapinghuan: "平唤",
                    "kivapinghuan_info": "在你的判定牌生效前，你可以打出一张手牌代替之，若如此做，你获得你的判定牌。",
                    kivazhounan: "州难",
                    "kivazhounan_info": "你拼点时，可以改为用牌堆顶的一张牌进行拼点；当你拼点的牌亮出后，若此牌花色为黑桃，则点数视为1",
                    kivaawenji: "问计",
                    "kivaawenji_info": "弃牌阶段开始时，你可与一名其他角色拼点。若你赢，你受到一点伤害并摸两张牌；若你没赢，你跳过弃牌阶段。",
                    kivatunjiang: "屯江",
                    "kivatunjiang_info": "摸牌阶段，你可以额外摸X张牌，若如此做，你的手牌数不能超过6。(X为全场普通势力数)",
                    "kivatunjiang2": "屯江",
                    "kivatunjiang2_info": "",
                    kivawumou: "无谋",
                    "kivawumou_info": "锁定技，每当你使用一张非转化的锦囊牌，你失去一点体力;你的进攻距离无限。",
                    kivafenjiang: "愤将",
                    "kivafenjiang_info": "锁定技，你造成的伤害必中且伤害+1。",
                    "fuhekiva_lvbu": "负荷",
                    "fuhekiva_lvbu_info": "负荷技，若回合数为5，你变成界吕布并且体力上限为2。",
                    kivajianzhi: "谏止",
                    "kivajianzhi_info": "当场上有一名角色使用牌时，若其体力的倍数小于卡牌点数，你可以弃一张牌制止之。",
                    kivaxiaozhong: "效忠",
                    "kivaxiaozhong_info": "锁定技，若你的身份是忠，且当前回合为主公的回合，则你进行判定，若为红色，则主公回复一点体力。",
                    kivashejun: "射君",
                    "kivashejun_info": "若你的身份为反且当前回合角色身份为主公，你可以对其使用一张【杀】。",
                    kivaanruo: "暗弱",
                    "kivaanruo_info": "锁定技，若场上角色一次失去不少于两张牌，你弃置一张牌;若场上除你以外角色一次性弃置1-2张牌，你可以摸一张牌。",
                    "kivaanruo2": "暗弱",
                    "kivaanruo2_info": "",
                    "kivafenjiang2": "愤将",
                    "kivafenjiang2_info": "",
                    kivaxunlong: "训龙",
                    "kivaxunlong_info": "锁定技，你的回合开始时，你获得'训'标记。",
                    kivakonglong: "恐龙",
                    "kivakonglong_info": "出牌阶段，你可以移去3枚'训'并视为对至多3名角色使用【过河拆桥】和【杀】。",
                    kivaletian: "乐天",
                    "kivaletian_info": "开始阶段，你对自己使用一张【顺手牵羊】，我估计AI队友会打出【无懈可击】。",
                    kivajianzao: "建造",
                    "kivajianzao_info": "出牌阶段限一次，你可以弃置一张牌另一名角色获得一张装备牌。",
                    kivafanxiong: "反雄",
                    "kivafanxiong_info": "锁定技，每当你使用一张杀，你将根据花色进行以下内容;若此牌花色为♥，此【杀】不能被响应;若此牌花色为♦，你摸一张牌。",
                    kivaxuwu: "虚无",
                    "kivaxuwu_info": "锁定技，结束阶段，你受到一点伤害。",
                    kivashaobing: "哨兵",
                    "kivashaobing_info": "锁定技，在你受到伤害之前，你进行一次判定，若为红，你受到伤害-1;若为黑，你受到伤害减半。",
                    kivayueyin: "月引",
                    "kivayueyin_info": "锁定技，每名角色的回合开始时，其进行一次判定;若判定牌点数为13，你获得判定牌。",
                    kivaxiachan: "狭缠",
                    "kivaxiachan_info": "出牌阶段，你可以和一名角色拼点，若你赢，你视为对其使用一张【决斗】，若你没赢，其视为对你使用一张【决斗】。每回合限一次。",
                    kivasuzi: "肃资",
                    "kivasuzi_info": "当一名角色死亡，若你的手牌数为0或者你的体力值为1，你可以立即获得死亡角色的所有牌。",
                    "kiva新renwang": "仁望",
                    "kiva新renwang_info": "当一名角色对你使用一张【杀】或锦囊牌时，你可以弃置其一张牌。",
                    kivahuanxiang: "幻象",
                    "kivahuanxiang_info": "每当一名角色受到一点伤害之前，若此牌为♦，且其体力值等于其体力上限，你可以获得此牌并停止结算。",
                    kivaczhasi: "诈死",
                    "kivaczhasi_info": "锁定技，每当你进入濒死状态时，你解除负面状态，回满体力并失去一点体力上限。",
                },
            },
            intro: "",
            author: ":+࿈࿆剑牙雷少Kiva࿈࿆+:",
            diskURL: "",
            forumURL: "",
            version: "1.0",
        }, files: { "character": ["taishici魂kiva.jpg", "sunce魂kiva.jpg", "김유의 편지. kiva.jpg", "wenyangxinkiva.jpg"], "card": ["kivayiliaobao.png"], "skill": [] }
    }
})
