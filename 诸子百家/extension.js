game.import("extension", function (lib, game, ui, get, ai, _status) {
    return {
        name: "诸子百家",
        content: function (config, pack) {

        },
        precontent: function (诸子百家) {
            if (诸子百家.enable) {
                game.import('character', function () {
                    var 诸子百家 = {
                        name: '诸子百家',
                        connect: true,
                        character: {
                            "道家·庄周": ["male", "chu", 3, ["梦蝶"], ["des:道家创始人之一，楚国贵族，但是不问世事，追求精神上的绝对自由，将为官之人称为“牲畜”。"]],
                            "阴阳·徐福": ["male", "qin", 8, ["炼丹", "噬魂"], ["des:阴阳家人物，方士，相传为秦始皇寻找长生药而跑去日本，成了日本人的祖先，"]],
                            "兵家·尉缭": ["male", "wei", 3, ["zz_yanzhan", "zz_zhanwei"], ["des:尉缭，梁惠王时期的人物，为鬼谷子高弟，精通兵法，著有《尉缭子》一书。《尉缭子》的军事思想，是比较可观的，既是对前人，如《孙武兵法》的理解延伸，也有着自己的特色，因此，在兵家中，享有较高地位。"]],
                            "阴阳·邹衍": ["male", "qi", 3, ["wuxing", "tantian"], ["des:邹衍（约公元前305年至公元前240年），齐国（今山东淄博市临淄）人，阴阳家的代表人物，因其学问迂大而宏辩，人称为谈天衍，又称邹子。"]],
                            "杂家·吕不韦": ["male", "zhao", 3, ["居货", "千金"], ["des:吕不韦主持编纂《吕氏春秋》（又名《吕览》），有八览、六论、十二纪共20余万言，汇合了先秦各派学说，“兼儒墨，合名法”，故史称“杂家”。书成之日，悬于国门，声称能改动一字者赏千金。此为“一字千金”。执政时曾攻取周、赵、卫的土地，立三川、太原、东郡，对秦王政兼并六国的事业有重大贡献。后因嫪毐集团叛乱事受牵连，被免除相邦职务，出居河南封地。不久，秦王政复命让其举家迁蜀，吕不韦担心被诛杀，于是饮鸩自尽"]],
                            "zz_HYY": ["female", "shu", 2, ["zz_ML", "zz_GY"], ["des:诸葛亮之妻，诸葛瞻之母，有奇才，上通天文，下察地理，精通兵法，近乎诸略无所不晓，善于发明制造，传授诸葛亮很多学识，在诸葛亮病逝之后不久也随之仙逝，死前以“忠孝”勉励其子诸葛瞻；"]],
                            "zz_ZGL": ["male", "shu", 2, ["zz_WL", "zz_JH"], ["des:三国时期蜀国丞相，号卧龙(伏龙)，躬耕南阳，隐居隆中，后因徐庶举荐，刘备三顾出山，协助刘备三分天下，在刘备死后独掌大权，在平定南中之后数度北伐，病逝于五丈原"]],
                            "兵家·项羽": ["male", "chu", 4, ["神勇"], ["zhu", "des:项羽（公元前232年―公元前202年），项氏，芈姓，名籍，字羽，楚国下相（今江苏宿迁）人，楚国名将项燕之孙，他是中国军事思想“兵形势”代表人物（兵家四势：兵形势、兵权谋、兵阴阳、兵技巧） 的军事家，也是以个人武力出众而闻名的武将。李晚芳对其有“羽之神勇，千古无二”的评价。"]],
                            "墨家·禽滑离": ["male", "han", 3, ["圄城", "守御"], ["des:禽子，禽滑厘（qín gǔlí），本作禽滑口（㫥，上殹下康，lí），根据《汉语大字典》和《辞海》的解释，“㫥”同“釐（lí）”，用于人名。禽滑釐又作滑黎、骨釐、屈釐等。“釐”现今简化为“厘”。战国初人，传说是墨子的首席弟子，他的字为慎子。他的后代以他的字作为姓氏，形成慎姓。 禽滑釐曾是儒门弟子，学于子夏，自转投墨子后，便一直潜心墨学。禽滑釐与慎到不是同一个人，一个是魏国人墨子的弟子，另一个是赵国人学老子的学说。但从战国历史地理楚国、魏国、赵国相邻，试想慎邑、禽滑釐、慎到三者之间虽无历史文献记载，也并不能排除没有关系。"]],
                            "法家·李斯": ["male", "qin", 3, ["营党", "焚书"], ["des:李斯（约公元前284年—公元前208年），李氏，名斯，字通古。战国末期楚国上蔡（今河南省上蔡县芦冈乡李斯楼村人。秦代著名的政治家、文学家和书法家。秦始皇死后，他与赵高合谋，伪造遗诏，迫令始皇长子扶苏自杀，立少子胡亥为二世皇帝。后为赵高所忌，于秦二世二年（前208年）被腰斩于咸阳闹市，并夷三族。"]],
                            "法家·慎到": ["male", "qi", 3, ["因循", "威德"], ["des:慎到（约公元前395～约前315），先秦诸子之一。赵国人，早年曾“学黄老道德之术”，其学术倾向至今有争议，有人认为属于黄老道家，有人认为属于法家，也有人鉴于其道法结合的思想倾向，称之为道法家。他长期在齐国稷下讲学，是稷下学宫的学术领袖人物之一。《史记》说他有《十二论》，《汉书·艺文志》的法家类著录了《慎子》四十二篇。后来很多都失传了，《慎子》现存有《威德》、《因循》、《民杂》、《德立》、《君人》五篇，《群书治要》里有《知忠》、《君臣》两篇，清朝时，钱熙祚合编为七篇，刻入《守山阁丛书》。此外，还有佚文数十条。"]],
                            "法家·申不害": ["male", "han", 3, ["权术", "辅法"], ["des:申不害（公元前385－前337，或前420年－前337年），亦称申子，郑韩时期人物（今河南新郑）人。战国时期法家重要代表人物之一、思想家。以“术”著称，著有《申子》是春秋战国时期，百家争鸣中的代表人物。申不害原是郑国京邑（今郑州荥阳东南京襄城）人，曾为郑国小吏，公元前375年（韩哀侯二年），韩国灭掉郑国，遂成为韩人，并做了韩国的低级官员。公元前337年，申不害卒于韩都（今新郑）。"]],
                            "zz_WQ": ["male", "chu", 4, ["无敌", "先机"], ["des:兵家亚圣，地位仅次于孙武，吴起著有《吴起兵法》，且吴起儒法兼修，在军事上，吴起一生大小七十多战，胜利六十多场，其余近十场也并未败绩，有战神之称。"]],
                            "zz_LE": ["male", "lu", 3, ["zz_dunyin", "zz_xuanmiao", "zz_tiandao"], ["des:即为老聃，老子，道家创始人之一，隐居于世，曾经授学孔子，老子主张“无为而治”“顺其自然”“遵循大道”等思想，著有《道德经》这部国际文化名书，也因此称颂于后世，他的思想成了与儒家思想并肩的大思想，为世界上很多人学习；"]],
                            "zz_GZ": ["male", "qi", 4, ["zz_KY", "zz_geqi"], ["des:管仲，齐国人，被誉为“华夏第一相”，中国历史上著名的政治家、军事家、经济学家、改革家。同时也是法家的代表人物，管仲辅佐齐桓公，施行“尊王攘夷”等策略，称霸天下，令齐桓公成为“五霸之首”，无人能及。"]],
                            "zz_TRJ": ["male", "qi", 3, ["zz_renben", "zz_yibing", "zz_chiyan"], ["des:齐国著名军事家，著有《司马法》，在兵家也有相当大的地位，司马子以“未出兵而国土收”出名，威慑燕国，收复了国土，立下了功勋，司马法中强调“正义”，主张战争是政治的延续，因此需要尽力发展政治，并且认为只有正义之师才能攻无不克，战无不胜，认为杀人应该安人，以兵制兵，以战止战，好战必亡，忘战必危等等；"]],
                            "zz_KQ": ["male", "lu", 3, ["zz_SR", "zz_SW", "zz_SY"], ["des:孔丘，字仲尼，鲁国人，中国历史上影响最为深远嗯思想家，孔子精通六艺，博学古今，但是，命运又是比较坎坷的，孔丘并非人们意识中的一名导师而已，实际上，他的政治谋略和智慧，也是相当的高。因其功勋和地位，孔丘被列为文庙主祭，是为“文圣人”"]],
                            "zz_XMB": ["male", "wei", 4, ["治邺", "畯法"], ["des:西门豹（生卒年不详），战国时期魏国安邑（今山西省运城市盐湖区安邑一带）人。魏文侯时任邺令，是著名的政治家、水利家，曾立下赫赫功勋。初到邺城 （今河南安阳北一带)）时，看到这里人烟稀少，田地荒芜萧条，一片冷清，百业待兴，于是立志改善现状。后来趁河伯娶妻的机会，惩治了地方恶霸势力，随后颁布律令，禁止巫风。教育了广大的百姓。原先出走人家也回到了自己的家园。同时，他又亲自率人勘测水源，发动百姓在漳河开围挖掘了12渠，使大片田地成为旱涝保收的良田。在发展农业生产的同时，还实行“寓兵于农、藏粮于民”的政策，很快就使邺城民富兵强，成为战国时期魏国的东北重镇。"]],
                            "zz_QY": ["male", "chu", 4, ["离骚", "天问", "zz_MZ"], ["des:屈原（约公元前340或339年～公元前278年），战国时期楚国诗人、政治家，出生地楚国丹阳，湖北省宜昌市，芈姓，屈氏，名平，字原；又自云名正则，字灵均，战国时。楚武王熊通之子屈瑕的后代。少年时受过良好的教育，博闻强志，志向远大。早年受楚怀王信任，任左徒、三闾大夫，兼管内政外交大事。 他提倡“美政”，主张对内举贤任能，修明法度，对外力主联齐抗秦。因遭贵族排挤毁谤，被先后流放至汉北和沅湘流域。秦将白起攻破楚都郢（今湖北江陵）后，屈原自沉于汨罗江，以身殉国。 屈原是中国历史上第一位伟大的爱国诗人，中国浪漫主义文学的奠基人，“楚辞”的创立者和代表作者，开辟了“香草美人”的传统，被誉为“中华诗祖”、“辞赋之祖”。屈原的出现，标志着中国诗歌进入了一个由集体歌唱到个人独创的新时代。屈原的主要作品有《离骚》《九歌》《九章》《天问》等。以屈原作品为主体的《楚辞》是中国浪漫主义文学的源头，与《诗经》并称“风骚”，对后世诗歌产生了深远影响。"]],
                            "zz_ZH": ["male", "Han", 3, ["木圣", "zz_TY"], ["des:东汉著名文学家和大科学家，大发明家，几乎涉及所有领域，科学上，张衡发明了“浑天仪”“地动仪”等领先世界的伟大发明，对许多科技品进行了改进和更新发展，文学上则精于汉赋，张衡因其宏伟之才而被人尊为“木(科)圣”；"]],
                            "zz_ZC": ["male", "lu", 4, ["zz_xinzheng", "zz_xinfa"], ["des:子产，郑国上大夫，对郑国进行改革，是春秋时期的大政治家，同时也是军事家、外交家，子产为政初期，人民很不满意，但是，后来才发现，子产的新法新政是利国利民之道，郑国也因此焕然一新，强大了起来，而郑国人民也因此非常爱戴子产。子产是法家的代表人物之一，他的政治主张，对后来的法家兴起，是有较大的影响的。而他死前说的那番话，则成了哲理，广为流传，即“火容易烧伤人们，所以很少有人被火所烧伤，而水性温，所以常常有人会溺水而死”。"]],
                            "zz_ZL": ["male", "Han", 3, ["zz_QM", "zz_CQ"], ["des:汉初三杰之一，儒雅有胆识，曾经散尽家财，刺杀秦始皇，失败流亡，得到了黄石公的赏识，赐予他《六轁》《素书》等，并收他为徒，后来张良学成，拥有王佐之才，并且得到了刘邦的赏识，替刘邦运筹帷幄，谋功为高，在刘邦一统天下时，离开刘邦，保全了性命，相比之下，萧何，韩信皆惹来了杀身之祸，而张良独退山林；"]],
                            "zz_HX": ["male", "Han", 3, ["兵仙", "因势"], ["des:汉初三杰之一，号称“兵仙”，没落贵族，靠蹭饭过活，后来韩信投靠项羽，但是并未得到重用，于是韩信投靠了刘邦，几经波折后，韩信成为刘邦的大元帅，于是，韩信“暗度陈仓”，灭亡了赵国，战死了龙苴，攻灭了齐国，横扫四海，所向披靡，为刘邦一统天下，立下了赫赫战功；"]],
                            "zz_sunwu": ["male", "qi", 4, ["zz_bingsheng", "zz_jiubian"], ["des:兵家代表人物之一，著有兵学圣典《孙武兵法》，此书至今仍为兵书之最，孙武是齐国人，吴国将领，协助吴王阖闾制霸天下，无人能敌，曾经带领三万吴军对抗二十万楚军，一举击败之，并且攻破楚国国都，孙武在兵家的地位最高。"]],
                            "zz_caocao": ["male", "wei", 4, ["zz_JX"], ["zhu", "des:东汉末年著名的政治家，军事家，文学家，诗人，曹操被誉为“治世之能臣，乱世之奸雄”，曹操的一生是在马背上的，自古用兵者莫如曹操的评价也是因此而来，曹操还是当时的文学代表，富有文采，史称“三曹”，曹操未能统一中原，带着遗憾而死；"]],
                            "zz_sb": ["male", "qi", 4, ["诱敌", "伏袭"], ["des:兵家代表人物之一，孙武之后，著有《孙膑兵法》，在兵家中享有极高地位，曾经几度击败魏国，功勋卓著，特别是“马陵之战”，“围魏救赵”等成语皆出自于孙膑。"]],
                            "zz_hf": ["male", "han", 3, ["法学", "大成"], ["des:法家集大成者，著有《韩非子》一书，对后世法学的影响极大。"]],
                            "zz_bq": ["male", "qin", 3, ["佯敌", "诈利"], ["des:四名将之首，兵家代表人物之一，出身行伍，为秦国征战天下，所向披靡，因杀人无数而号称“人屠”，“长平之战”、“郢都之战”等为其戎马一生的代表，六国之军，无不畏惧白起，但后来白起为秦昭王赐死。"]],
                            "zz_yy": ["male", "yan", 3, ["元帅"], ["des:兵家代表人物之一，曾在赵国为官，后来感激燕昭王之恩，遂辅佐燕昭王，使燕国强大起来，带领五国联军击败齐军之后，乐毅独自带领燕国军队乘胜追击，一举攻破齐国七十二座城池，几近灭亡齐国。"]],
                            "zz_sz": ["male", "qin", 3, ["合纵", "连横"], ["des:苏秦（？－前284年），字季子，东周雒阳（河南洛阳）人，战国时期著名的纵横家、外交家和谋略家。苏秦师从鬼谷子，学成后，外出游历多年，潦倒而归；随后刻苦攻读《阴符》，一年后游说列国，被燕文公赏识，出使赵国。苏秦到赵国后，提出合纵六国以抗秦的战略思想，并最终组建合纵联盟；任“从约长”，兼佩六国相印，使秦十五年不敢出函谷关；联盟解散后，齐国攻打燕国，苏秦说齐归还燕国城池；后自燕至齐，从事反间活动，被齐国任为客卿，齐国众大夫因争宠派人刺杀，苏秦死前献策诛杀了刺客。张仪（？－前309年），魏国安邑（今山西万荣）张仪村人，魏国贵族后裔，战国时期著名的纵横家、外交家和谋略家。张仪首创连横的外交策略，游说入秦。秦惠王封张仪为相，后来张仪出使游说各诸侯国，以“横”、破、“纵”，使各国纷纷由合纵抗秦转变为连横亲秦。张仪也因此被秦王封为武信君。秦惠王死后，因为即位的秦武王在当太子的时候就不喜欢张仪，张仪出逃魏国，并出任魏相，一年后去世。"]],
                            "zz_xx": ["male", "chu", 3, ["饔飧", "zz_ailei"], ["des:东周战国时期著名农学家、思想家。华夏族，楚国之随人，生于楚宣王至楚怀王时期，约与孟子同一时代，在《孟子．滕文公上》记载有许行其人“为神农之言”，所以被归为农家，后世也将许行视为先秦时代农家的代表人物，但因没有著作流传于世，详细思想内容与其他事迹皆不可考。"]],
                            "zz_gg": ["male", "wei", 3, ["裨阖", "反应"], ["des:纵横家，战国时期人物，充满神秘色彩，教有诸多学生，其中孙膑、庞涓、张仪、苏秦等为最，著有纵横书之最《鬼谷子》。"]],
                            "zz_dzs": ["male", "Han", 3, ["天人", "合一"], ["des:西汉著名政治家，文学家，他的“罢逐百家，独尊儒术”，“天人合一”等思想影响了整个汉朝乃至整个封建王朝，董仲舒曾经有一段时间闭门不出，专门专研治国利民之术，后来终于学成，得到了武帝的赏识，推行了自己的主张，使得大汉帝国更加强盛；"]],
                            "zz_huishi": ["male", "wei", 3, ["zz_mingshi", "坚白"], ["des:惠施，宋（今河南商丘）人，生于公元前370年（或公元前380年），传卒于公元前310年，战国中期宋国著名学者，名家鼻祖，与庄子为友，曾做过魏（梁惠王）的相国；后惠施联合齐、楚的活动遭到失败，被张仪驱逐。"]],
                            "zz_lyk": ["male", "lu", 3, ["zz_chongxu", "zz_yufeng"], ["des:道家学派的杰出代表人物，先秦天下十豪之一，著名的思想家、文学家。对后世哲学、文学、科技、养生、乐曲、宗教影响非常深远。著有《列子》，其学说本于黄帝老子，归同于老、庄。创立了先秦哲学学派贵虚学派（列子学）。是介于老子与庄子之间道家学派承前启后的重要传承人物。"]],
                            "zz_xk": ["male", "zhao", 3, ["胜天", "舟水"], ["des:儒家代表人物之一，主张“人定胜天”、“人性本恶”等思想，并有著名论断“水能载舟，亦能覆舟”，警告为政者关爱百姓，著有《荀子》。"]],
                            "zz_lk": ["male", "wei", 3, ["地力", "fajing"], ["des:李悝（lǐ kuī）（前455—前395年），河南濮阳人。中国战国时期的政治人物。法家重要代表人物。曾任魏文侯相，主持变法。经济上推行“尽地力”和“善平籴”的政策，鼓励农民精耕细作，增强产量。他汇集当时各国法律编成《法经》，是我国古代第一部比较完整的法典，现已失传。其“重农”与“法治”结合的思想对商鞅、韩非影响极大"]],
                            "zz_mk": ["male", "qi", 4, ["王霸", "三迁"], ["des:儒家亚圣，继孔子之后又一儒家大圣人，孟轲主张“民贵君轻”等思想，周游列国，传颂儒道，著有《孟子》。"]],
                            "zz_md": ["male", "han", 3, ["义驰", "墨守"], ["des:墨家创始人，主张兼爱平等，非攻自强、非命非乐等等一系列思想，是中国哲学史上一颗耀眼的星。"]],
                            "zz_gsl": ["male", "zhao", 3, ["诡辩", "非马"], ["des:公孙龙能言善辩，曾经做过平原君的门客，其主要著作为《公孙龙子》，西汉时共有14篇，唐代时分为三卷，北宋时遗失了8篇，至今只残留6篇，共一卷。其中最重要的两篇是《白马论》和《坚白论》，提出了“白马非马”和“离坚白”等论点，认为对于 “坚白石”，“视不得其所坚而得其所白者，无坚也”；“拊不得其所白而得其所坚者，无白也”，强调视觉与触觉的差异故“坚白石二”。又分析一般与个别的关系，强调“白马”（个别）与“马”（一般）的区别，得出“白马非马”的结论。与他齐名的是另一名家惠施。"]],
                            "zz_wy": ["male", "qin", 3, ["图强", "变法"], ["des:法家代表人物之一。辅佐秦孝公，使得秦国空前强盛，并且为统一六国奠定了重大基础。"]],
                            "zz_yz": ["male", "lu", 3, ["贵己", "不拔"], ["des:杨朱主张“贵己” “重生” “人人不损一毫”的思想。是道家杨朱学派的创始人。他的见解散见于《列子》，《庄子》，《孟子》，《韩非子》，《吕氏春秋》等。在战国时期，有“天下之言不归杨则归墨的现象”，可见其学说影响之大。"]],


                        },





                        translate: {

                            Han: "汉",
                            HanColor: "#000000",
                            lu: "鲁",
                            luColor: "#000000",
                            qin: "秦",
                            qinColor: "#000000",
                            chu: "楚",
                            chuColor: "#A67D3D",
                            qi: "齐",
                            qiColor: "#871F78",
                            yan: "燕",
                            yanColor: "#007FFF",
                            zhao: "赵",
                            zhaoColor: "#42426F",
                            wei: "魏",
                            weiColor: "#FF0000",
                            han: "韩",
                            hanColor: "#32CD32",
                            "道家·庄周": "道家·庄周",
                            "阴阳·徐福": "阴阳·徐福",
                            "兵家·尉缭": "兵家·尉缭",
                            "阴阳·邹衍": "阴阳·邹衍",
                            "杂家·吕不韦": "杂家·吕不韦",
                            "zz_HYY": "兵家·黄月英",
                            "zz_ZGL": "兵家·诸葛亮",
                            "兵家·项羽": "兵家·项羽",
                            "墨家·禽滑离": "墨家·禽滑离",
                            "法家·李斯": "法家·李斯",
                            "法家·慎到": "法家·慎到",
                            "法家·申不害": "法家·申不害",
                            "zz_WQ": "兵家·吴起",
                            "zz_LE": "道家·李耳",
                            "zz_GZ": "法家·管仲",
                            "zz_TRJ": "兵家·田禳苴",
                            "zz_KQ": "儒家·孔丘",
                            "zz_XMB": "法家·西门豹",
                            "zz_QY": "法家·屈原",
                            "zz_ZH": "科学家·张衡",
                            "zz_ZC": "法家·子产",
                            "zz_ZL": "儒家·张良",
                            "zz_HX": "兵家·韩信",
                            "zz_sunwu": "兵家·孙武",
                            "zz_caocao": "兵家·曹操",
                            "zz_sb": "兵家·孙膑",
                            "zz_hf": "法家·韩非",
                            "zz_bq": "兵家·白起",
                            "zz_yy": "兵家·乐毅",
                            "zz_sz": "纵横·苏张",
                            "zz_xx": "农家·许行",
                            "zz_gg": "纵横·鬼谷子",
                            "zz_dzs": "儒家·董仲舒",
                            "zz_huishi": "名家·惠施",
                            "zz_lyk": "道家·列御寇",
                            "zz_xk": "儒家·荀况",
                            "zz_lk": "法家·李悝",
                            "zz_mk": "儒家·孟轲",
                            "zz_md": "墨家·墨翟",
                            "zz_gsl": "名家·公孙龙",
                            "zz_wy": "法家·卫鞅",
                            "zz_yz": "道家·杨朱", "图强": "图强",
                            "图强_info": "锁定技：你的回合结束时，可以将武将牌翻面，然后摸取2张牌。",
                            "变法": "变法",
                            "变法_info": "锁定技：在你打出牌响应之前，若你的武将牌反面向上，你弃置一张手牌，然后将武将牌翻面以及摸取三张牌。",
                            "义驰": "义驰",
                            "义驰_info": "锁定技：出牌阶段限一次，你可以失去一点体力，然后令一名角色摸取两张牌。",
                            "墨守": "墨守",
                            "墨守_info": "锁定技：当你回合结束时，若你已受伤，你需要弃置等同于你当前体力值的牌并回血一点。<font color=#F0F>自强</font> ：第一次发动【墨守】时永久获得【谦逊】、【空城】。",
                            "梦蝶": "梦蝶",
                            "梦蝶_info": "锁定技：当你回合结束时，你将武将牌翻面然后摸牌两张以及恢复一点体力，在你武将牌反面向上时，你无视诸多卡牌。",
                            "法学": "法学",
                            "法学_info": "出牌阶段限一次，你弃置一张牌并选择一名其他角色，对之造成一点伤害，然后其摸取一张牌，此时，若你的体力值大于等于目标的体力值，你可以摸取一张牌。",
                            "大成": "大成",
                            "大成_info": "锁定技：每当你获得手牌后，若此时你的手牌数大于你的体力值，你可以恢复一点体力。",
                            "裨阖": "裨阖",
                            "裨阖_info": "每当一名角色回合开始时，若你已受伤，你可以摸取等同于已损失体力值的牌，然后弃置一张牌。",
                            "反应": "反应",
                            "反应_info": "锁定技：当你被杀指定时，使用者需要弃置一张牌。",
                            "王霸": "王霸",
                            "王霸_info": "当你于回合外失去手牌时，若你的手牌数小于体力上限，你可以补充至体力上限。",
                            "三迁": "三迁",
                            "三迁_info": "锁定技，每当你体力减少时，你须摸两张牌并弃一张牌",
                            "炼丹": "炼丹",
                            "炼丹_info": "锁定技：出牌阶段，你可以将一张手牌当成无中生有使用。",
                            "噬魂": "噬魂",
                            "噬魂_info": "锁定技：在你的回合内，当你获得至少2张牌后，你需要失去一点体力然后摸取一张牌。",
                            "胜天": "胜天",
                            "胜天_info": "在任意角色的判定牌生效前，你可以打出一张手牌代替之",
                            "舟水": "舟水",
                            "舟水_info": "锁定技：每当一名角色判定阶段开始时，若你的已受伤，其需要弃置一张牌，然后你摸取一张牌。",
                            "诱敌": "诱敌",
                            "诱敌_info": "出牌阶段一次，你指定一名其他角色，令其对你使用一张杀，若其不对你使用，弃置其两张牌（包括判定区内的牌）。",
                            "伏袭": "伏袭",
                            "伏袭_info": "锁定技：当你于你的回合内被杀指定为目标后，你可以对目标造成一点伤害然后其弃置一张牌，并且由你摸牌一张。",
                            "诈利": "诈利",
                            "诈利_info": "锁定技：当你于回合内被杀指定时，你令使用者弃置一张牌然后将武将牌翻面。",
                            "佯敌": "佯敌",
                            "佯敌_info": "出牌阶段一次，你指定一名其他角色，令其对你使用一张杀，若其不对你使用，其弃置x张牌（x为其当前体力值）。",
                            "元帅": "元帅",
                            "元帅_info": "在你的回合开始前，你将跳过你的摸牌阶段，然后摸取等同于当前游戏人数的牌。",
                            "无敌": "无敌",
                            "无敌_info": "锁定技：你的手牌上限增加x点（x为你的体力值）。",
                            "先机": "先机",
                            "先机_info": "限定技：游戏开始时，你摸取三张牌。然后获得技能【神速】、【铁骑】。锁定技：你的回合开始时，摸取一张牌。",
                            "zz_bingsheng": "兵圣",
                            "zz_bingsheng_info": "每当你打出或者使用一张非转化的【杀】、【闪】、【酒】、【桃】时(即基本牌)，你摸取一张牌。",
                            "zz_jiubian": "九变",
                            "zz_jiubian_info": "每当你获得牌时，你可以令一名其他角色弃置一张牌（你的回合内至多三次）。",
                            "zz_yuanxin": "渊心",
                            "zz_yuanxin_info": "当你受伤后，对你造成伤害的角色流失x点体力(x为你已损失体力值)。锁定技：你无视延时锦囊牌。",
                            "zz_geqi": "革齐",
                            "zz_geqi_info": "觉醒技、限定技：当你的回合结束时，若你的体力小于3，你失去一点体力上限之后回复体力至上限，摸取x张牌（x为场上存活角色身份数），然后开始一个新的回合，失去本技能，获得技能【渊心】。",
                            "zz_xinfa": "新法",
                            "zz_xinfa_info": "你回合开始前，若你装备区内有牌，你摸取等同于装备区里牌数的牌，然后弃置等量的任意区域内的牌。",
                            "zz_xinzheng": "新政",
                            "zz_xinzheng_info": "每当你在一次弃牌时，弃置大于一张的牌，那么你摸取一张牌并且获得一个出牌阶段。",
                            "zz_yanzhan": "言战",
                            "zz_yanzhan_info": "每当你于回合内对一名其他角色造成伤害后，可以视为你对之使用了一张【杀】(出牌阶段仅限一次)。",
                            "zz_zhanwei": "战威",
                            "zz_zhanwei_info": "每当你造成伤害后，可以摸取一张牌并令目标弃置一张装备区里的牌。锁定技：你使用的【杀】无视距离。",
                            "zz_renben": "仁本",
                            "zz_renben_info": "当你使用一张杀指定一名其他角色时，你需要同其一同摸取一张牌，然后你获得一层护甲。",
                            "zz_yibing": "义兵",
                            "zz_yibing_info": "在你的回合结束时，若你拥有护甲，那么你需要失去一层护甲，然后摸取一张牌并且上升一点体力上限。锁定技：你的手牌上限加x(x为护甲数)",
                            "zz_chiyan": "斥燕",
                            "zz_chiyan_info": "觉醒技：当你的回合开始时，若你的体力上限大于4时，那么你失去技能【义兵】、【斥燕】，获得技能【陷谗】，再将体力值调整到等同于体力上限。",
                            "zz_xianchan": "陷谗",
                            "zz_xianchan_info": "每当你造成或者受到伤害后，你失去一点体力。",
                            "zz_xuanmiao": "玄妙",
                            "zz_xuanmiao_info": "锁定技：每当你被一名其他角色的【杀】指定时，你获得一层护甲。",
                            "zz_dunyin": "遁隐",
                            "zz_dunyin_info": "锁定技：当你拥有护甲时，你不能成为锦囊牌的目标。锁定技：你的手牌上限加x（x为你装备区内的牌）。",
                            "zz_tiandao": "天道",
                            "zz_tiandao_info": "当任意一名其他角色造成伤害后，若你的护甲数大于零，那么你可以选择一名其他角色，令之和你摸取x张牌(x为护甲数),然后你失去所有的护甲。你的回合开始时，若你有护甲，那么你失去之并且跳过摸牌阶段。",
                            "zz_yufeng": "御风",
                            "zz_yufeng_info": "锁定技：当你计算与其他角色的距离时始终减一。当其他角色计算与你的距离时始终加一。你的手牌上限加一。",
                            "zz_chongxu": "冲虚",
                            "zz_chongxu_info": "锁定技：每当你受到大于一点的伤害时，取消之，然后摸取两张牌。",
                            "地力": "地力",
                            "地力_info": "你的回合开始时、结束时，都能摸取一张牌。",
                            fajing: "法经",
                            "fajing_info": "出牌阶段，你可以弃置一张黑色牌并指定一名其他角色。若如此做，你获得其一张牌并置于你的武将牌上，称为“法经”（数量最多为三）。当你受到伤害后，若你的“法经”数目不小于3，那么你失去所有的“法经”，摸取一张牌，然后在当前回合结束时你进行一个新的回合。",
                            tantian: "谈天",
                            "tantian_info": "每当一名角色将要进行判定时，你可以展示牌堆顶牌，然后可以选择一项：将一张手牌置于牌堆顶，或令其将一张手牌置于牌堆顶。",
                            wuxing: "五行",
                            "wuxing_info": "每当你受到属性伤害时，取消之，并且回复一点体力。锁定技：你的手牌上限始终等于体力上限。",
                            "坚白": "坚白",
                            "坚白_info": "每当你拼点赢，你可以获得对方此次拼点的牌然后摸取两张牌；每当你拼点没赢，你可以收回你此次拼点的牌然后弃置一张判定区内的牌",
                            "zz_mingshi": "名实",
                            "zz_mingshi_info": "出牌阶段开始时，你可以选择一名其他角色，与之进行拼点，若你赢，你获得【巧说】效果：你下一次使用的基本牌或普通锦囊牌可以增加或者减少一名指定目标。若你输，获得【巧说】效果：你不能使用锦囊牌到回合结束。",
                            "贵己": "贵己",
                            "贵己_info": "锁定技：其他角色计算与你的距离的时候，始终加2。",
                            "不拔": "不拔",
                            "不拔_info": "每当你失去一次牌后，此时若你的手牌数小于体力上限，那么你摸取一张牌。",
                            "饔飧": "饔飧",
                            "饔飧_info": "出牌阶段限一次，你可以将任意一张装备区里的牌当【桃】使用。",
                            "zz_ailei": "爱类",
                            "zz_ailei_info": "当你回复1点体力时，你可以令一名其他角色回复1点体力或摸两张牌",
                            "居货": "居货",
                            "居货_info": "每当一名角色的武将牌翻面或横置时，你可以发动此技能，立即摸一张牌。锁定技：你的手牌上限加2。",
                            "千金": "千金",
                            "千金_info": "锁定技：你不能成为红色锦囊牌的目标。",
                            "天人": "天人",
                            "天人_info": "在任意角色的判定牌生效前，若你的手牌大于当前体力值，你可以打出一张手牌代替之，在任意角色的判定时，若你的手牌数不大于当前体力值，你可以摸取一张牌。",
                            "合一": "合一",
                            "合一_info": "你的回合开始前，若你的手牌数等于当前体力值，那么你选择一名其他角色，令之回复体力一点然后你恢复体力一点，再摸取两张牌。",
                            "兵仙": "兵仙",
                            "兵仙_info": "出牌阶段限三次，你可以将任意的牌当【杀】使用。",
                            "因势": "因势",
                            "因势_info": "出牌阶段，你使用[杀]的次数为当前游戏人物数量。",
                            "zz_ML": "明亮",
                            "zz_ML_info": "<font color=#F0F>被动技能</font>：在你的回合开始之前，你可以变身为“兵家·诸葛亮” 并摸取一张牌，然后失去护甲，再将体力值补满。",
                            "zz_GY": "归隐",
                            "zz_GY_info": "你可以在你的回合结束后弃置任意张牌。锁定技，总牌数比你多的角色无法在回合内对你使用卡牌",
                            "zz_WL": "卧龙",
                            "zz_WL_info": "<font color=#F0F>被动技能</font> ：你可以在你的出牌阶段结束后变身为“兵家·黄月英”且获得一层护甲，变身后，体力值回复至满血。",
                            "zz_JH": "劫火",
                            "zz_JH_info": "每当你使用一张【火攻】时，可以摸取一张牌。出牌阶段限一次，你可以将任意一张牌当【火攻】使用。",
                            "zz_QM": "奇谋",
                            "zz_QM_info": "你的回合开始时，你可以指定一名角色，令之进入混乱状态，至其下个回合结束。",
                            "zz_CQ": "刺秦",
                            "zz_CQ_info": "当你的回合结束时，若你装备区内有牌和手牌不为零，那么你可以弃置所有的手牌和装备区内一张牌，然后选择一名其他角色，对其造成一点伤害（若目标角色有护甲，其先破除之），然后你获得一层护甲（若你有护甲，你先失去之）并令目标角色跳过其下个出牌阶段。",
                            "zz_JX": "奸雄",
                            "zz_JX_info": "<font color=#F0F>被动技能</font> ：每当你受到伤害后，你随机进行一项：①伤害来源弃置一张手牌，②伤害来源弃置一张装备区内的牌，③你摸取两张牌，④你恢复一点体力。",
                            "zz_TY": "天仪",
                            "zz_TY_info": "每名角色回合开始阶段时，你可以观看牌堆顶的Ｘ张牌（Ｘ为存活角色的数量，且最多为2），将其中任意数量的牌以任意顺序置于牌堆顶，其余以任意顺序置于牌堆底。",
                            "木圣": "木圣",
                            "木圣_info": "在你需要打出【闪】响应时，你可以将任意一张装备区里的或手牌区里的牌当之打出。",
                            "非马": "非马",
                            "非马_info": "当你被指定为拼点目标即将拼点时，你取消之，然后摸取两张牌。",
                            "诡辩": "诡辩",
                            "诡辩_info": "在你的回合开始前，你可以指定一到x名其他角色（x为你已损失体力值），令之指定你为目标，同你拼点，然后其弃置一张手牌。",
                            "离骚": "离骚",
                            "离骚_info": "每当你判定区内的牌的效果要生效时，你将之反转。",
                            "zz_MZ": "美政",
                            "zz_MZ_info": "出牌阶段每名角色限一次，若其区域内有牌，那么你令之弃置一张牌再摸取一张牌。",
                            "天问": "天问",
                            "天问_info": "你的回合开始前，你可以进行一次判定，若为♥：你恢复一点体力，若为♦：你摸取两张牌，若为♣：你弃置一张牌，若为♠：你受到一点伤害。",
                            "zz_MZ2": "美政",
                            "zz_MZ2_info": "你不能再成为【美政】的目标。",
                            "神勇": "神勇",
                            "神勇_info": "当一名角色受到你造成的伤害后，若其体力值小于你，你可以选择弃置其所有的手牌或装备区内的牌。",
                            "圄城": "圄城",
                            "圄城_info": "当你将要受到体力流失时，你取消之，并且摸取一张牌。",
                            "守御": "守御",
                            "守御_info": "若你的手牌数加上装备区里的牌不小于六，你可以在出牌阶段开始前发动此技能，选择至多三名角色，令之摸取一张牌并且获得一层护甲，每分配一名，你需要弃置两张牌。锁定技：你的手牌上限加x，x为当前游戏人数。",
                            "营党": "营党",
                            "营党_info": "出牌阶段时限一次，你可以将一张【杀】当【铁索连环】使用。",
                            "焚书": "焚书",
                            "焚书_info": "出牌阶段限一次，若你装备区内有牌，你可以自损体力一点并弃置一张装备区内的牌指定一名其他角色，令之受到一点火焰伤害和弃置一张牌。",
                            "治邺": "治邺",
                            "治邺_info": "出牌阶段限一次，你可以令一名手牌数大于你的其他角色弃置两张牌然后你弃置一张牌。",
                            "畯法": "畯法",
                            "畯法_info": "在你的回合内，若有其他角色一次弃置大于一张牌，你可以在此之后弃置一张牌，令一名其他角色受到一点伤害。每回合至多一次。",
                            "威德": "威德",
                            "威德_info": "每当你造成伤害前，目标需要弃置一张牌，然后你选择一名其他角色，令其摸取一张牌。",
                            "因循": "因循",
                            "因循_info": "当你的弃牌阶段开始前，若你的手牌数大于当前体力值，你可以跳过此弃牌阶段，并摸取一张牌。",
                            "权术": "权术",
                            "权术_info": "出牌阶段限一次，你可以令一名区域内有牌的其他角色摸取一张牌，然后你获得其两张牌（包括判定区）。",
                            "辅法": "辅法",
                            "辅法_info": "当你一次获得至少两张牌后，你可以令一名角色摸一张牌",
                            "合纵": "合纵",
                            "合纵_info": "当你受到伤害后，若你没有护甲，那么你可以选择一名其他角色，同之摸取一张牌并且其获得一层护甲，你获得两层。",
                            "连横": "连横",
                            "连横_info": "你的回合开始前，若你拥有护甲和手牌，则可以发动此技能，你选择一名其他角色，对之造成一点伤害(若其拥有护甲，其先破除之)，然后他弃置一张牌，再由你摸取一张牌和失去所有护甲并跳过摸牌阶段。",
                            "zz_KY": "鲲意",
                            "zz_KY_info": "每当一名其他角色回合结束时，若此时你的体力值不等于体力上限，那么你摸取一张牌并且可以弃置目标1~x张牌（x为其已损失体力值，至少为零）。",
                            "zz_SR": "圣人",
                            "zz_SR_info": "每名其他角色回合开始时你可以摸取一张牌。锁定技：你无视延时锦囊牌。",
                            "zz_SW": "师威",
                            "zz_SW_info": "你的回合开始时，你可以弃置x张手牌（x为当前体力值，不足则全弃），然后选择一名其他角色将其武将牌翻面",
                            "zz_SY": "射御",
                            "zz_SY_info": "限定技，出牌阶段你可以弃置任意花色不同的牌，然后根据以下技能获得相应技能:黑桃·无双。 红桃·马术。",



                        },
                        skill: {
                            "图强": {
                                trigger: {
                                    player: "phaseEnd",
                                },
                                frequent: true,
                                content: function () {
                                    player.draw(2)
                                    player.turnOver();
                                    var chat = ['圣王不贵义，而贵法！_《商君书》'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "变法": {
                                trigger: {
                                    player: "chooseToRespondBegin",
                                },
                                frequent: true,
                                filter: function (event, player) {
                                    return player.isTurnedOver();
                                },
                                content: function () {
                                    player.chooseToDiscard(1, 'h');
                                    player.draw(3);
                                    player.turnOver()
                                    var chat = ['治世不一道，便国不法古！_《商君书》'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "义驰": {
                                enable: "phaseUse",
                                usable: 1,
                                filterTarget: function (player, target) {
                                    return player != target && target.hp >= 0
                                },
                                content: function () {
                                    player.loseHp(1);
                                    target.draw(2)
                                    var chat = ['兼相爱，交相利！_《墨子》', '吾为义驱驰！'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "墨守": {
                                mark: true,
                                intro: {
                                    content: "兼爱非攻",
                                },
                                trigger: {
                                    player: "phaseEnd",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return player.hp < player.maxHp;
                                },
                                content: function () {
                                    player.chooseToDiscard('hej', player.hp, true)
                                    player.recover()
                                    player.addSkill('kongcheng')
                                    player.addSkill('qianxun')
                                    var chat = ['非攻自强，墨守成规！'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "梦蝶": {
                                group: ["梦蝶_1", "梦蝶_2"],
                                subSkill: {
                                    "1": {
                                        trigger: {
                                            player: "phaseEnd",
                                        },
                                        forced: true,
                                        content: function () {
                                            player.turnOver();
                                            player.recover();
                                            player.draw(2);
                                            var chat = ['周为蝶乎？蝶为周乎？'].randomGet()
                                            player.say(chat);
                                        },
                                        sub: true,
                                    },
                                    "2": {
                                        mod: {
                                            targetEnabled: function (card, player, target, now) {
                                                if (target.isTurnedOver()) {
                                                    if (card.name == 'sha' || card.name == 'juedou' || card.name == 'guohe' || card.name == 'shunshou' || card.name == 'lebu' || card.name == 'bingliang' || card.name == 'shandian' || card.name == 'nanman' || card.name == 'wanjian' || card.name == 'liuxinghuoyu' || card.name == 'tiesuo' || card.name == 'jiedao' || card.name == 'fudi' || card.name == 'huogong' || card.name == 'touliang') return false;
                                                }
                                            },
                                        },
                                        sub: true,
                                    },
                                },
                            },
                            "法学": {
                                enable: "phaseUse",
                                usable: 1,
                                filterCard: true,
                                selectCard: 1,
                                filterTarget: true,
                                selectTarget: 1,
                                content: function () {
                                    target.damage();
                                    target.draw();
                                    var chat = ['弱乱难为计，治强常有功！_《韩非子》'].randomGet()
                                    player.say(chat);
                                    if (target.hp <= player.hp) {
                                        player.draw();
                                    }
                                },
                                check: function (card) {
                                    return 6 - ai.get.value(card);
                                },
                            },
                            "大成": {
                                trigger: {
                                    player: "gainEnd",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return player.num('h') > player.hp;
                                },
                                content: function () {
                                    player.recover();
                                    var chat = ['集前圣之智，为吾所用！'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "裨阖": {
                                trigger: {
                                    global: "phaseBegin",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return player.hp < player.maxHp;
                                },
                                content: function () {
                                    player.draw(player.maxHp - player.hp);
                                    player.chooseToDiscard('裨阖:请弃置一张牌', 'he', true);
                                    var chat = ['圣人之在天地间也！_《鬼谷子》', '反以观彼,复以知己！_《鬼谷子》', '知己反可知彼！'].randomGet()
                                    player.say(chat);









                                },
                            },
                            "反应": {
                                trigger: {
                                    target: "useCardToBefore",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return event.card.name == 'sha';
                                },
                                content: function () {
                                    trigger.player.chooseToDiscard(true)
                                    var chat = ['象者象其事，比者比其辞！_《鬼谷子》', '重之袭之，反之复之！_《鬼谷子》'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "王霸": {
                                trigger: {
                                    player: "loseEnd",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    for (var i = 0; i < event.cards.length; i++) {
                                        if (event.cards[i].original == 'h') return _status.currentPhase != player && (player.num('h') < player.maxHp);
                                    }
                                },
                                content: function () {
                                    player.draw(player.maxHp - player.num('h'));
                                    var chat = ['王霸之道，在乎民生！'].randomGet()
                                    player.say(chat);
                                },
                                ai: {
                                    threaten: 1.8,
                                },
                            },
                            "三迁": {
                                trigger: {
                                    player: ["damageAfter", "loseHpAfter"],
                                },
                                forced: true,
                                content: function () {
                                    player.draw(2)
                                    player.chooseToDiscard(1, 'he', true);
                                    var chat = ['母之三迁，使吾完人也！'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "炼丹": {
                                enable: "phaseUse",
                                filterCard: true,
                                position: "h",
                                viewAs: {
                                    name: "wuzhong",
                                    suit: "club",
                                    number: 13,
                                    cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": { "uncheck": [], "vanishtag": [] }, "suit": "club", "number": 13, "name": "jinchan", "cardid": "7807738247", "_transform": "translateX(437.14285714285717px)", "clone": { "name": "jinchan", "suit": "club", "number": 13, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 529 }, "timeout": 429, "original": "h" }],
                                },
                                ai: {
                                    basic: {
                                        order: 1,
                                        useful: 4.5,
                                        value: 9.2,
                                    },
                                    result: {
                                        player: function (player) {
                                            if (player.countCards('h') >= player.hp - 1) return -1;
                                            if (player.hp < 3) return -1;
                                            return 1;
                                        },
                                        target: 2,
                                    },
                                    tag: {
                                        draw: 2,
                                    },
                                },
                            },
                            "噬魂": {
                                trigger: {
                                    player: "gainEnd",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (_status.currentPhase != player) return false;
                                    return event.cards && event.cards.length > 1;
                                },
                                content: function () {
                                    player.loseHp();
                                    player.draw();
                                },
                            },
                            "胜天": {
                                audio: "ext:诸子百家_战国:2",
                                trigger: {
                                    global: "judge",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return player.countCards('h') > 0;
                                },
                                content: function () {
                                    "step 0"
                                    player.chooseCard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +
                                        get.translation(trigger.player.judging[0]) + '，' + get.prompt('胜天')).set('ai', function (card) {
                                            var trigger = _status.event.getTrigger();
                                            var player = _status.event.player;
                                            var judging = _status.event.judging;
                                            var result = trigger.judge(card) - trigger.judge(judging);
                                            var attitude = get.attitude(player, trigger.player);
                                            if (attitude == 0 || result == 0) return 0;
                                            if (attitude > 0) {
                                                return result - get.value(card) / 2;
                                            }
                                            else {
                                                return -result - get.value(card) / 2;
                                            }
                                        }).set('judging', trigger.player.judging[0]);
                                    "step 1"
                                    if (result.bool) {
                                        player.respond(result.cards, 'highlight');
                                    }
                                    else {
                                        event.finish();
                                    }
                                    "step 2"
                                    if (result.bool) {
                                        player.logSkill('胜天');
                                        if (trigger.player.judging[0].clone) {
                                            trigger.player.judging[0].clone.classList.remove('thrownhighlight');
                                            game.broadcast(function (card) {
                                                if (card.clone) {
                                                    card.clone.classList.remove('thrownhighlight');
                                                }
                                            }, trigger.player.judging[0]);
                                            game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));
                                        }
                                        ui.discardPile.appendChild(trigger.player.judging[0]);
                                        trigger.player.judging[0] = result.cards[0];
                                        if (!get.owner(result.cards[0], 'judge')) {
                                            trigger.position.appendChild(result.cards[0]);
                                        }
                                        game.log(trigger.player, '的判定牌改为', result.cards[0]);
                                        game.delay(2);
                                    }
                                },
                                ai: {
                                    tag: {
                                        rejudge: 1,
                                    },
                                },
                            },
                            "舟水": {
                                trigger: {
                                    global: "judge",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return player.hp < player.maxHp;
                                },
                                content: function () {
                                    trigger.player.chooseToDiscard('he', true);
                                    player.draw();
                                    var chat = ['水能载舟，亦能覆舟！_《荀子》'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "诱敌": {
                                audio: "ext:诸子百家_战国:4",
                                enable: "phaseUse",
                                usable: 1,
                                filterTarget: function (card, player, target) {
                                    return target.canUse({ name: 'sha' }, player) && target.countCards('he');
                                },
                                content: function () {
                                    "step 0"
                                    target.chooseToUse({ name: 'sha' }, player, -1, '诱敌：对' + get.translation(player) + '使用一张杀，或令其弃置你的两张牌').set('targetRequired', true);
                                    "step 1"
                                    if (result.bool == false && target.countCards('he') > 0) {
                                        player.discardPlayerCard(target, 2, 'hej', true);
                                    }
                                    else {
                                        event.finish();
                                    }
                                },
                                ai: {
                                    order: 4,
                                    expose: 0.2,
                                    result: {
                                        target: -1,
                                        player: function (player, target) {
                                            if (target.countCards('h') == 0) return 0;
                                            if (target.countCards('h') == 1) return -0.1;
                                            if (player.hp <= 2) return -2;
                                            if (player.countCards('h', 'shan') == 0) return -1;
                                            return -0.5;
                                        },
                                    },
                                    threaten: 1.1,
                                },
                            },
                            "伏袭": {
                                trigger: {
                                    target: "useCardToBefore",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (_status.currentPhase != player) return false;
                                    return event.card.name == 'sha';
                                },
                                content: function () {
                                    trigger.player.damage();
                                    trigger.player.chooseToDiscard(true);
                                    player.draw();
                                    var chat = ['兵者！以诈利，以利动！_《孙武兵法》', '以利动之，以卒待之！_《孙武兵法》', '明年的今天，我会祭祀你的！'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "诈利": {
                                trigger: {
                                    target: "useCardToBefore",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (_status.currentPhase != player) return false;
                                    return event.card.name == 'sha';
                                },
                                content: function () {
                                    trigger.player.turnOver();
                                    trigger.player.chooseToDiscard(true);
                                    var chat = ['你中计了！', '到此为止了！'].randomGet()
                                    player.say(chat);

                                },
                            },
                            "佯敌": {
                                audio: "ext:诸子百家_战国:4",
                                enable: "phaseUse",
                                usable: 1,
                                filterTarget: function (card, player, target) {
                                    return target.canUse({ name: 'sha' }, player) && target.countCards('he');
                                },
                                content: function () {
                                    "step 0"
                                    target.chooseToUse({ name: 'sha' }, player, -1, '佯敌：对' + get.translation(player) + '使用一张杀，或令其弃置你的x张牌').set('targetRequired', true);
                                    "step 1"
                                    if (result.bool == false && target.countCards('he') > 0) {
                                        player.discardPlayerCard(target, target.hp, 'he', true);
                                    }
                                    else {
                                        event.finish();
                                    }
                                },
                                ai: {
                                    order: 4,
                                    expose: 0.2,
                                    result: {
                                        target: -1,
                                        player: function (player, target) {
                                            if (target.countCards('h') == 0) return 0;
                                            if (target.countCards('h') == 1) return -0.1;
                                            if (player.hp <= 2) return -2;
                                            if (player.countCards('h', 'shan') == 0) return -1;
                                            return -0.5;
                                        },
                                    },
                                    threaten: 1.1,
                                },
                            },
                            "元帅": {
                                trigger: {
                                    player: "phaseBefore",
                                },
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    player.skip('phaseDraw')
                                    'step 1'
                                    player.draw(game.players.length)
                                    var chat = ['元帅之任，非常也！', '五国不进，那我就独进！'].randomGet()
                                    player.say(chat);






                                },
                                ai: {
                                    threaten: 1.3,
                                },
                            },
                            "无敌": {
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num += player.hp;
                                    },
                                },
                            },
                            "先机": {
                                group: ["先机_1", "先机_2"],
                                subSkill: {
                                    "1": {
                                        trigger: {
                                            player: "phaseBegin",
                                        },
                                        frequent: true,
                                        content: function () {
                                            player.draw();
                                        },
                                        sub: true,
                                    },
                                    "2": {
                                        trigger: {
                                            global: "gameStart",
                                        },
                                        frequent: true,
                                        content: function () {
                                            player.draw(3)
                                            player.addSkill('shensu')
                                            player.addSkill('tieji');
                                        },
                                        sub: true,
                                    },
                                },
                            },
                            "zz_bingsheng": {
                                trigger: {
                                    player: ["useCard", "respond"],
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return (get.type(event.card) == 'basic' && event.cards[0] && event.cards[0] == event.card);
                                    ;
                                },
                                content: function () {
                                    player.draw();
                                    var chat = ['兵者，国之大事，死生之地，存亡之道，不可不察也——《孙武兵法》', '不知三军之务而为军政，是谓縻军——《孙武兵法》'].randomGet()
                                    player.say(chat);
                                },
                                ai: {
                                    threaten: 1.4,
                                    noautowuxie: true,
                                },
                            },
                            "zz_jiubian": {
                                trigger: {
                                    player: "gainEnd",
                                },
                                usable: 3,
                                direct: true,
                                filter: function (event, player) {
                                    return event.cards && event.cards.length > 0;
                                },
                                content: function () {
                                    'step 0'
                                    game.delay(0.5);
                                    player.chooseTarget(get.prompt('zz_jiubian'), function (card, player, target) {
                                        return target != player && target.num('he') > 0;
                                    }).set("ai", function (target) {
                                        return get.damageEffect(target, player, player);

                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('zz_jiubian', result.targets);
                                        result.targets[0].chooseToDiscard(true, 'he');
                                        var chat = ['不能知九变之利者，不能得地利——《孙武兵法》', '无恃其不来，恃吾有以待——《孙武兵法》', '无恃其不攻，恃吾有所不可攻——《孙武兵法》'].randomGet()
                                        player.say(chat);
                                    }
                                },
                                ai: {
                                    expose: 0.2,
                                },
                            },
                            "zz_yuanxin": {
                                group: ["zz_yuanxin_1", "zz_yuanxin_2"],
                                subSkill: {
                                    "1": {
                                        trigger: {
                                            player: "damageEnd",
                                        },
                                        forced: true,
                                        filter: function (event) {
                                            return event.source != undefined;
                                        },
                                        content: function () {
                                            trigger.source.loseHp(player.maxHp - player.hp);
                                            var chat = ['政善治，心善渊！——《道德经》', '心若深渊，则敌不可测！——《诸子》'].randomGet()
                                            player.say(chat);
                                        },
                                        ai: {
                                            threaten: 0.7,
                                        },
                                        sub: true,
                                    },
                                    "2": {
                                        mod: {
                                            targetEnabled: function (card, player, target) {
                                                if (get.type(card) == 'delay') {
                                                    return false;
                                                }
                                            },
                                        },
                                        sub: true,
                                    },
                                },
                            },
                            "zz_geqi": {
                                skillAnimation: true,
                                unique: true,
                                derivation: "zz_yuanxin",
                                trigger: {
                                    player: "phaseEnd",
                                },
                                mark: true,
                                intro: {
                                    content: "limited",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (player.storage.zz_geqi) return false;
                                    return player.hp < 3;
                                },
                                content: function () {
                                    player.storage.zz_geqi = true;
                                    player.loseMaxHp();
                                    player.recover(player.maxHp - player.hp);
                                    player.draw(get.population('fan', 'zhong', 'zhu', 'nei'));
                                    player.insertPhase();
                                    player.addSkill('zz_yuanxin');
                                    player.awakenSkill('zz_geqi');
                                    var chat = ['若要图霸，我在这里！'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "zz_xinfa": {
                                trigger: {
                                    player: "phaseBefore",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return player.num('e') > 0;
                                },
                                content: function () {
                                    player.draw(player.num('e'));
                                    player.chooseToDiscard(player.num('e'), 'hej', true);
                                    var chat = ['穷则变，变则通，通则久——《周易》'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "zz_xinzheng": {
                                trigger: {
                                    player: "discardAfter",
                                },
                                frequent: true,
                                filter: function (event, player) {
                                    return event.cards && event.cards.length > 1;
                                },
                                content: function () {
                                    player.draw();
                                    player.phaseUse();
                                    var chat = ['水之性善，不能育民！', '火之性烈，可以安国！'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "zz_yanzhan": {
                                trigger: {
                                    source: "damageEnd",
                                },
                                usable: 1,
                                forced: true,
                                filter: function (event, player) {
                                    if (_status.currentPhase != player) return false;
                                    return player.hp > 0;
                                },
                                content: function () {
                                    player.useCard({ name: 'sha' }, trigger.player);
                                    var chat = ['战不必胜，不可以言战，攻不必取，不可以言攻——《尉缭子》', '兴亡安危，在于枹端——《尉缭子》'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "zz_zhanwei": {
                                trigger: {
                                    source: "damageEnd",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return player.hp > 0;
                                },
                                content: function () {
                                    trigger.player.chooseToDiscard(true, 'e');
                                    player.draw();
                                    var chat = ['善用兵者，夺人而不夺于人——《尉缭子》', '夺者心之机，令者一众心——《尉缭子》', '此威胜也——《尉缭子》', '止如堵墙，动如风雨——《尉缭子》'].randomGet()
                                    player.say(chat);
                                },
                                mod: {
                                    targetInRange: function (card) {
                                        if (card.name == 'sha') return true;
                                    },
                                },
                            },
                            "zz_renben": {
                                trigger: {
                                    player: "shaBegin",
                                },
                                forced: true,
                                content: function () {
                                    player.draw()
                                    trigger.target.draw()
                                    player.changeHujia();
                                    var chat = ['杀人安人，杀之可也——《司马法》', '攻其国，亲其民——《司马法》', '古者，以仁为本——《司马法》'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "zz_yibing": {
                                trigger: {
                                    player: "phaseEnd",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return player.hujia ? true : false;
                                },
                                content: function () {
                                    "step 0"
                                    player.draw()
                                    player.gainMaxHp();
                                    var chat = ['吾为正义而战！', '义兵者，民心所向！'].randomGet()
                                    player.say(chat);
                                    "step 1"
                                    player.changeHujia(-1);
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num += player.hujia;
                                    },
                                },
                            },
                            "zz_chiyan": {
                                skillAnimation: true,
                                unique: true,
                                mark: true,
                                intro: {
                                    content: "limited",
                                },
                                derivation: "zz_xianchan",
                                trigger: {
                                    player: "phaseBegin",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (player.storage.zz_chiyan) return false;
                                    return player.maxHp > 4;
                                },
                                content: function () {
                                    player.storage.zz_chiyan = true;
                                    player.recover(player.maxHp - player.hp)
                                    player.awakenSkill('zz_yibing');
                                    player.awakenSkill('zz_chiyan');
                                    player.addSkill('zz_xianchan');
                                    var chat = ['犯我大齐者，吾必诛之！'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "zz_xianchan": {
                                trigger: {
                                    player: "damageEnd",
                                    source: "damageEnd",
                                },
                                forced: true,
                                content: function () {
                                    player.loseHp();
                                    var chat = ['吾为国尽忠，竟为尔等所陷！'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "zz_xuanmiao": {
                                trigger: {
                                    target: "useCardToBefore",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return event.card.name == 'sha';
                                },
                                content: function () {
                                    player.changeHujia();
                                    var chat = ['玄之又玄，众妙之门——《道德经》', '此之谓物化——《庄子》'].randomGet()
                                    player.say(chat);

                                },
                            },
                            "zz_dunyin": {
                                group: ["zz_dunyin_1", "zz_dunyin_2", "zz_dunyin_3"],
                                subSkill: {
                                    "1": {
                                        mod: {
                                            targetEnabled: function (card, player, target) {
                                                if (target.hujia > 0) {
                                                    if (get.type(card) == 'trick') return false;
                                                }
                                            },
                                        },
                                        sub: true,
                                    },
                                    "2": {
                                        mod: {
                                            targetEnabled: function (card, player, target) {
                                                if (target.hujia > 0) {
                                                    if (get.type(card) == 'delay') return false;
                                                }
                                            },
                                        },
                                        sub: true,
                                    },
                                    "3": {
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num += player.num('e');
                                            },
                                        },
                                        sub: true,
                                    },
                                },
                            },
                            "zz_tiandao": {
                                group: ["zz_tiandao_1", "zz_tiandao_2"],
                                subSkill: {
                                    "1": {
                                        trigger: {
                                            global: "damageAfter",
                                        },
                                        direct: true,
                                        filter: function (event, player) {
                                            return event.player != player && player.hujia > 0;
                                        },
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget(get.prompt('zz_tiandao'), function (card, player, target) {
                                                return target != player;
                                            }).ai = function (target) {
                                                return ai.get.attitude(player, target);
                                            };
                                            'step 1'
                                            if (result.bool) {
                                                player.logSkill('zz_tiandao', result.targets);
                                                result.targets[0].draw(player.hujia);
                                                player.draw(player.hujia);
                                                player.changeHujia(-player.hujia);
                                                var chat = ['苍天不佑，唯赖自己！', '天道酬勤也！', '合抱之木，生于毫末——《道德经》'].randomGet()
                                                player.say(chat);
                                            }
                                        },
                                        ai: {
                                            expose: 0.1,
                                        },
                                        sub: true,
                                    },
                                    "2": {
                                        trigger: {
                                            player: "phaseBegin",
                                        },
                                        forced: true,
                                        filter: function (event, player) {
                                            return player.hujia > 0;
                                        },
                                        content: function () {
                                            player.changeHujia(-player.hujia)
                                            player.skip('phaseDraw');
                                            var chat = ['为者败之，执者失之——《道德经》', '福兮祸所伏——《道德经》'].randomGet()
                                            player.say(chat)







                                        },
                                        sub: true,
                                    },
                                },
                            },
                            "zz_yufeng": {
                                group: ["zz_yufeng_1", "zz_yufeng_2", "zz_yufeng_3"],
                                subSkill: {
                                    "1": {
                                        mod: {
                                            globalFrom: function (from, to, distance) {
                                                return distance - 1;
                                            },
                                        },
                                        sub: true,
                                    },
                                    "2": {
                                        mod: {
                                            globalTo: function (from, to, distance) {
                                                return distance + 1;
                                            },
                                        },
                                        sub: true,
                                    },
                                    "3": {
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num + 1;
                                            },
                                        },
                                        sub: true,
                                    },
                                },
                            },
                            "zz_chongxu": {
                                trigger: {
                                    player: "damageBegin",
                                },
                                forced: true,
                                priority: -999999,
                                unique: true,
                                filter: function (event) {
                                    return event.num > 1;
                                },
                                content: function () {
                                    trigger.untrigger();
                                    trigger.finish();

                                    player.draw(2);

                                    var chat = ['吾已飞登太虚，汝伤不到我！', '天下之大，无奇不有！'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "地力": {
                                trigger: {
                                    player: ["phaseBegin", "phaseEnd"],
                                },
                                frequent: true,
                                content: function () {
                                    player.draw()
                                },
                            },
                            fajing: {
                                group: ["fajing_1", "fajing_2"],
                                subSkill: {
                                    "1": {
                                        enable: "phaseUse",
                                        filterCard: {
                                            color: "black",
                                        },
                                        position: "he",
                                        intro: {
                                            content: "cards",
                                            onunmark: "throw",
                                        },
                                        mark: true,
                                        filter: function (event, player) {
                                            return player.countCards('he', { color: 'black' }) > 0 && player.storage.fajing.length < 3;
                                        },
                                        filterTarget: function (card, player, target) {
                                            return target.countCards('he') > 0 && target != player;
                                        },
                                        init: function (player) {
                                            player.storage.fajing = [];
                                        },
                                        check: function (card) {
                                            return 6 - get.value(card);
                                        },
                                        content: function () {
                                            'step 0'
                                            player.choosePlayerCard('hej', target, true);
                                            var chat = ['法者，一国人也！', '刻不容缓！'].randomGet()
                                            player.say(chat);
                                            'step 1'
                                            if (result.bool && result.links && result.links.length) {
                                                target.$give(result.links, player);
                                                target.lose(result.links, ui.special);
                                                player.storage.fajing.push(result.links[0]);
                                                player.markSkill('fajing');
                                                player.syncStorage('fajing');
                                            }
                                        },
                                        ai: {
                                            order: 10.1,
                                            expose: 0.1,
                                            result: {
                                                target: function (player, target) {
                                                    if (target.hasSkill('tuntian')) return 0;
                                                    var es = target.getCards('e');
                                                    var nh = target.countCards('h');
                                                    var noe = (es.length == 0 || target.hasSkillTag('noe'));
                                                    var noe2 = (es.length == 1 && es[0].name == 'baiyin' && target.hp < target.maxHp);
                                                    var noh = (nh == 0 || target.hasSkillTag('noh'));
                                                    if (noh && noe) return 0;
                                                    if (noh && noe2) return 0.01;
                                                    if (get.attitude(player, target) <= 0) return (target.countCards('he')) ? -1.5 : 1.5;
                                                    var js = target.getCards('j');
                                                    if (js.length) {
                                                        var jj = js[0].viewAs ? { name: js[0].viewAs } : js[0];
                                                        if (jj.name == 'guohe') return 3;
                                                        if (js.length == 1 && get.effect(target, jj, target, player) >= 0) {
                                                            return -1.5;
                                                        }
                                                        return 2;
                                                    }
                                                    return -1.5;
                                                },
                                            },
                                        },
                                        sub: true,
                                    },
                                    "2": {
                                        trigger: {
                                            player: "damageEnd",
                                        },
                                        forced: true,
                                        filter: function (event, player) {
                                            return player.storage.fajing.length >= 3;
                                        },
                                        content: function () {
                                            "step 0"
                                            player.storage.fajing.length -= 3;
                                            "step 1"
                                            player.draw();
                                            player.insertPhase();
                                            var chat = ['施之于国，必将强国！', '不循古，不守旧！'].randomGet()
                                            player.say(chat)

                                        },
                                        sub: true,
                                    },
                                },
                            },
                            tantian: {
                                trigger: {
                                    global: "judgeBefore",
                                },
                                content: function () {
                                    'step 0'
                                    player.showCards(ui.cardPile.firstChild);
                                    var chat = ['这就是天命！'].randomGet()
                                    player.say(chat);
                                    event.chosed = false;
                                    'step 1'
                                    player.chooseCard('是否将一张手牌置于牌堆顶？').set('ai', function (card) {
                                        var trigger = _status.event.getTrigger();
                                        var player = _status.event.player;
                                        var judging = ui.cardPile.firstChild;
                                        var result = trigger.judge(card) - trigger.judge(judging);
                                        var attitude = get.attitude(player, trigger.player);
                                        if (attitude == 0 || result == 0) return 0;
                                        if (attitude > 0) {
                                            return result - get.value(card) / 2;
                                        }
                                        else {
                                            return -result - get.value(card) / 2;
                                        }
                                    });
                                    event.current = player;
                                    'step 2'
                                    if (result && result.cards) {
                                        event.card = result.cards[0];
                                        event.current.lose(result.cards, ui.special);
                                        game.broadcastAll(function (player) {
                                            var cardx = ui.create.card();
                                            cardx.classList.add('infohidden');
                                            cardx.classList.add('infoflip');
                                            player.$throw(cardx, 1000, 'nobroadcast');
                                        }, event.current);
                                    }
                                    else {
                                        if (trigger.player == player) {
                                            event.finish();
                                        }
                                        else if (event.chosed) {
                                            event.finish();
                                        }
                                        else {
                                            trigger.player.chooseCard('将一张手牌置于牌堆顶？', true).set('ai', function (card) {
                                                var trigger = _status.event.getTrigger();
                                                var player = trigger.player;
                                                var judging = ui.cardPile.firstChild;
                                                var result = trigger.judge(card) - trigger.judge(judging);
                                                var attitude = get.attitude(player, trigger.player);
                                                if (attitude == 0 || result == 0) return 0;
                                                if (attitude > 0) {
                                                    return result - get.value(card) / 2;
                                                }
                                                else {
                                                    return -result - get.value(card) / 2;
                                                }
                                                return -get.value(card);
                                            });
                                            event.chosed = true;
                                            event.current = trigger.player;
                                            event.goto(2);
                                        }
                                    }
                                    'step 3'
                                    if (event.current == game.me) game.delay(0.5);
                                    'step 4'
                                    if (event.card) {
                                        event.card.fix();
                                        ui.cardPile.insertBefore(event.card, ui.cardPile.firstChild);
                                    }
                                },
                            },
                            wuxing: {
                                group: ["wuxing_1", "wuxing_2"],
                                subSkill: {
                                    "1": {
                                        trigger: {
                                            player: "damageBefore",
                                        },
                                        forced: true,
                                        unique: true,
                                        filter: function (event) {
                                            return event.nature == 'fire';
                                        },
                                        content: function () {
                                            trigger.untrigger();
                                            trigger.finish();
                                            player.recover();
                                            var chat = ['相生相克，不可穷尽！'].randomGet()
                                            player.say(chat);

                                        },
                                        ai: {
                                            effect: {
                                                target: function (card) {
                                                    if (get.tag(card, 'fireDamage')) {
                                                        return [0, 2];
                                                    }
                                                },
                                            },
                                        },
                                        sub: true,
                                    },
                                    "2": {
                                        trigger: {
                                            player: "damageBefore",
                                        },
                                        forced: true,
                                        unique: true,
                                        filter: function (event) {
                                            return event.nature == 'thunder';
                                        },
                                        content: function () {
                                            trigger.untrigger();
                                            trigger.finish();
                                            player.recover();
                                            var chat = ['相生相克，不可穷尽！'].randomGet()
                                            player.say(chat);

                                        },
                                        ai: {
                                            effect: {
                                                target: function (card) {
                                                    if (get.tag(card, 'fireDamage')) {
                                                        return [0, 2];
                                                    }
                                                },
                                            },
                                        },
                                        sub: true,
                                    },
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        if (player.hp < player.maxHp) return num + player.maxHp - player.hp;
                                    },
                                },
                            },
                            "坚白": {
                                trigger: {
                                    player: ["chooseToCompareAfter", "compareMultipleAfter"],
                                    target: ["chooseToCompareAfter", "compareMultipleAfter"],
                                },
                                filter: function (event, player) {
                                    if (event.preserve) return false;
                                    if (player == event.player) {
                                        if (event.card1.number > event.card2.number) {
                                            return !get.owner(event.card2);
                                        }
                                        else {
                                            return !get.owner(event.card1);
                                        }
                                    }
                                    else {
                                        if (event.card1.number < event.card2.number) {
                                            return !get.owner(event.card1);
                                        }
                                        else {
                                            return !get.owner(event.card2);
                                        }
                                    }
                                },
                                check: function (event, player) {
                                    if (player == event.player) {
                                        if (event.card1.number > event.card2.number) {
                                            return event.card2.name != 'du';
                                        }
                                        else {
                                            return event.card1.name != 'du';
                                        }
                                    }
                                    else {
                                        if (event.card1.number < event.card2.number) {
                                            return event.card1.name != 'du';
                                        }
                                        else {
                                            return event.card2.name != 'du';
                                        }
                                    }
                                },
                                content: function () {
                                    if (player == trigger.player) {
                                        if (trigger.card1.number > trigger.card2.number) {
                                            player.gain(trigger.card2, 'gain2');
                                            player.draw(2);
                                            var chat = ['阁下之言，真是愚昧无知！'].randomGet()
                                            player.say(chat);
                                        }
                                        else {
                                            player.chooseToDiscard(true, 'j');
                                            var chat = ['恕在下直言！'].randomGet()
                                            player.say(chat);
                                            player.gain(trigger.card1, 'gain2');
                                        }
                                    }
                                    else {
                                        if (trigger.card1.number < trigger.card2.number) {
                                            player.gain(trigger.card1, 'gain2');



                                        }
                                        else {
                                            player.gain(trigger.card2, 'gain2');
                                        }
                                    }
                                },
                            },
                            "zz_mingshi": {
                                trigger: {
                                    player: "phaseUseBegin",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return player.countCards('h') > 0;
                                },
                                content: function () {
                                    "step 0"
                                    player.chooseTarget(get.prompt('zz_mingshi'), function (card, player, target) {
                                        return player != target && target.countCards('h') > 0;
                                    }).set('ai', function (target) {
                                        return -get.attitude(_status.event.player, target) / target.countCards('h');
                                    });
                                    "step 1"
                                    if (result.bool) {
                                        player.logSkill('zz_mingshi', result.targets[0]);
                                        player.chooseToCompare(result.targets[0]);
                                    }
                                    else {
                                        event.finish();
                                    }
                                    "step 2"
                                    if (result.bool) {
                                        player.addTempSkill('qiaoshui3');
                                    }
                                    else {
                                        player.addTempSkill('qiaoshui2');
                                    }
                                },
                                ai: {
                                    expose: 0.1,
                                },
                            },
                            "贵己": {
                                mod: {
                                    globalTo: function (from, to, distance) {
                                        return distance + 2;
                                    },
                                },
                            },
                            "不拔": {
                                trigger: {
                                    player: "loseEnd",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return player.num('h') < player.maxHp;
                                },
                                content: function () {
                                    player.draw();
                                    var chat = ['不取一毫，不利天下！', '余不利人，一毫不与！'].randomGet()
                                    player.say(chat);
                                },
                                ai: {
                                    threaten: 1.8,
                                },
                            },
                            "饔飧": {
                                enable: "phaseUse",
                                filterCard: true,
                                usable: 1,
                                position: "e",
                                viewAs: {
                                    name: "tao",
                                    suit: "diamond",
                                    number: 5,
                                    cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": { "uncheck": [], "vanishtag": [] }, "suit": "diamond", "number": 5, "name": "muniu", "cardid": "1602077314", "clone": { "name": "muniu", "suit": "diamond", "number": 5, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 2542 }, "original": "e", "timeout": 2458 }],
                                },
                                ai: {
                                    basic: {
                                        order: function (card, player) {
                                            if (player.hasSkillTag('pretao')) return 5;
                                            return 2;
                                        },
                                        useful: [8, 6.5, 5, 4],
                                        value: [8, 6.5, 5, 4],
                                    },
                                    result: {
                                        target: function (player, target) {
                                            // if(player==target&&player.hp<=0) return 2;
                                            var nd = player.needsToDiscard();
                                            var keep = false;
                                            if (nd <= 0) {
                                                keep = true;
                                            }
                                            else if (nd == 1 && target.hp >= 2 && target.countCards('h', 'tao') <= 1) {
                                                keep = true;
                                            }
                                            var mode = get.mode();
                                            if (target.hp >= 2 && keep && target.hasFriend()) {
                                                if (target.hp > 2 || nd == 0) return 0;
                                                if (target.hp == 2) {
                                                    if (game.hasPlayer(function (current) {
                                                        if (target != current && get.attitude(target, current) >= 3) {
                                                            if (current.hp <= 1) return true;
                                                            if ((mode == 'identity' || mode == 'versus' || mode == 'chess') && current.identity == 'zhu' && current.hp <= 2) return true;
                                                        }
                                                    })) {
                                                        return 0;
                                                    }
                                                }
                                            }
                                            if (target.hp < 0 && target != player && target.identity != 'zhu') return 0;
                                            var att = get.attitude(player, target);
                                            if (att < 3 && att >= 0 && player != target) return 0;
                                            var tri = _status.event.getTrigger();
                                            if (mode == 'identity' && player.identity == 'fan' && target.identity == 'fan') {
                                                if (tri && tri.name == 'dying' && tri.source && tri.source.identity == 'fan' && tri.source != target) {
                                                    var num = game.countPlayer(function (current) {
                                                        if (current.identity == 'fan') {
                                                            return current.countCards('h', 'tao');
                                                        }
                                                    });
                                                    if (num > 1 && player == target) return 2;
                                                    return 0;
                                                }
                                            }
                                            if (mode == 'identity' && player.identity == 'zhu' && target.identity == 'nei') {
                                                if (tri && tri.name == 'dying' && tri.source && tri.source.identity == 'zhong') {
                                                    return 0;
                                                }
                                            }
                                            if (mode == 'stone' && target.isMin() &&
                                                player != target && tri && tri.name == 'dying' && player.side == target.side &&
                                                tri.source != target.getEnemy()) {
                                                return 0;
                                            }
                                            return 2;
                                        },
                                    },
                                    tag: {
                                        recover: 1,
                                        save: 1,
                                    },
                                },
                            },
                            "zz_ailei": {
                                audio: "ext:诸子百家:2",
                                trigger: {
                                    player: "recoverAfter",
                                },
                                direct: true,
                                content: function () {
                                    "step 0"
                                    var chat = ['饔飧而治，缗者自安！', '天道酬勤，切勿不劳而获！'].randomGet()
                                    player.say(chat);
                                    player.chooseTarget(get.prompt('zz_ailei'), function (card, player, target) {
                                        return target != player;
                                    }).set('ai', function (target) {
                                        return get.attitude(_status.event.player, target);
                                    });
                                    "step 1"
                                    if (result.bool) {
                                        player.logSkill('zz_ailei', result.targets);
                                        result.targets[0].chooseDrawRecover(2, true);
                                    }
                                },
                                ai: {
                                    threaten: 0.8,
                                    expose: 0.1,
                                },
                            },
                            "居货": {
                                group: ["居货_1", "居货_2"],
                                subSkill: {
                                    "1": {
                                        trigger: {
                                            global: ["turnOverAfter", "linkAfter"],
                                        },
                                        filter: function (event, player) {
                                            if (event.name == 'link') return event.player.isLinked();
                                            return true;
                                        },
                                        check: function (event, player) {
                                            return get.attitude(player, event.player) > 0;
                                        },
                                        logTarget: "player",
                                        content: function () {
                                            player.draw();
                                            var chat = ['贱买贵卖，才是商人本色！', '这货色，不值钱！', '看到了吗？这才是宝物！'].randomGet()
                                            player.say(chat)
                                        },
                                        ai: {
                                            expose: 0.2,
                                        },
                                        sub: true,
                                    },
                                    "2": {
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num += 2;
                                            },
                                        },
                                        sub: true,
                                    },
                                },
                            },
                            "千金": {
                                mod: {
                                    targetEnabled: function (card) {
                                        if ((get.type(card) == 'trick' || get.type(card) == 'delay') &&
                                            get.color(card) == 'red') return false;
                                    },
                                },
                            },
                            "天人": {
                                trigger: {
                                    global: "judge",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return player.countCards('h') > player.hp;
                                },
                                content: function () {
                                    "step 0"
                                    player.chooseCard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +
                                        get.translation(trigger.player.judging[0]) + '，' + get.prompt('天人')).set('ai', function (card) {
                                            var trigger = _status.event.getTrigger();
                                            var player = _status.event.player;
                                            var judging = _status.event.judging;
                                            var result = trigger.judge(card) - trigger.judge(judging);
                                            var attitude = get.attitude(player, trigger.player);
                                            if (attitude == 0 || result == 0) return 0;
                                            if (attitude > 0) {
                                                return result - get.value(card) / 2;
                                            }
                                            else {
                                                return -result - get.value(card) / 2;
                                            }
                                        }).set('judging', trigger.player.judging[0]);
                                    "step 1"
                                    if (result.bool) {
                                        player.respond(result.cards, 'highlight');
                                        var chat = ['大道恒在，天命难违！'].randomGet()
                                        player.say(chat);
                                    }
                                    else {
                                        event.finish();
                                    }
                                    "step 2"
                                    if (result.bool) {
                                        player.logSkill('天人');
                                        if (trigger.player.judging[0].clone) {
                                            trigger.player.judging[0].clone.classList.remove('thrownhighlight');
                                            game.broadcast(function (card) {
                                                if (card.clone) {
                                                    card.clone.classList.remove('thrownhighlight');
                                                }
                                            }, trigger.player.judging[0]);
                                            game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));
                                        }
                                        ui.discardPile.appendChild(trigger.player.judging[0]);
                                        trigger.player.judging[0] = result.cards[0];
                                        if (!get.owner(result.cards[0], 'judge')) {
                                            trigger.position.appendChild(result.cards[0]);
                                        }
                                        game.log(trigger.player, '的判定牌改为', result.cards[0]);
                                        game.delay(2);
                                    }
                                },
                                ai: {
                                    tag: {
                                        rejudge: 1,
                                    },
                                },
                                group: "天人_1",
                                subSkill: {
                                    "1": {
                                        trigger: {
                                            global: "judge",
                                        },
                                        direct: true,
                                        filter: function (event, player) {
                                            return player.countCards('h') <= player.hp;
                                        },
                                        content: function () {
                                            player.draw();
                                            var chat = ['时机未到！', '修心养性，以待君命！'].randomGet()
                                            player.say(chat)
                                        },
                                        sub: true,
                                    },
                                },
                            },
                            "合一": {
                                trigger: {
                                    player: "phaseBefore",
                                },
                                filter: function (event, player) {
                                    return player.num('h') == player.hp;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('合一'), function (card, player, target) {
                                        return target != player;
                                    }).set('ai', function (target) {
                                        return ai.get.attitude(player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('合一', result.targets);
                                        result.targets[0].draw(2);
                                        result.targets[0].recover();
                                        player.draw(2);
                                        player.recover();
                                        var chat = ['君上，此即天人之际！'].randomGet()
                                        player.say(chat);

                                    };










                                },
                            },
                            "兵仙": {
                                enable: "phaseUse",
                                filterCard: true,
                                position: "hej",
                                usable: 3,
                                viewAs: {
                                    name: "sha",
                                    suit: "diamond",
                                    number: 12,
                                    cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "diamond", "number": 12, "name": "shan", "cardid": "6021129382", "original": "h", "_transform": "translateX(0px)", "clone": { "name": "shan", "suit": "diamond", "number": 12, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 7604 }, "timeout": 7394 }],
                                },
                                ai: {
                                    basic: {
                                        useful: [5, 1],
                                        value: [5, 1],
                                    },
                                    order: function () {
                                        if (_status.event.player.hasSkillTag('presha', true, null, true)) return 10;
                                        return 3;
                                    },
                                    result: {
                                        target: function (player, target) {
                                            if (player.hasSkill('jiu') && !target.getEquip('baiyin')) {
                                                if (get.attitude(player, target) > 0) {
                                                    return -6;
                                                }
                                                else {
                                                    return -3;
                                                }
                                            }
                                            return -1.5;
                                        },
                                    },
                                    tag: {
                                        respond: 1,
                                        respondShan: 1,
                                        damage: function (card) {
                                            if (card.nature == 'poison') return;
                                            return 1;
                                        },
                                        natureDamage: function (card) {
                                            if (card.nature) return 1;
                                        },
                                        fireDamage: function (card, nature) {
                                            if (card.nature == 'fire') return 1;
                                        },
                                        thunderDamage: function (card, nature) {
                                            if (card.nature == 'thunder') return 1;
                                        },
                                        poisonDamage: function (card, nature) {
                                            if (card.nature == 'poison') return 1;
                                        },
                                    },
                                },
                            },
                            "因势": {
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return game.players.length;
                                    },
                                },
                                ai: {
                                    unequip: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (!get.zhu(player, 'shouyue')) return false;
                                        if (arg && arg.name == 'sha') return true;
                                        return false;
                                    },
                                },
                            },
                            "zz_ML": {
                                trigger: {
                                    player: "phaseBefore",
                                },
                                unique: true,
                                content: function () {
                                    player.init('zz_ZGL')
                                    player.removeSkill('zz_GY')
                                    player.removeSkill('zz_ML')
                                    player.draw();
                                    var chat = ['亮，让我们一起努力吧！'].randomGet()
                                    player.say(chat)




                                },
                            },
                            "zz_GY": {
                                trigger: {
                                    player: "phaseEnd",
                                },
                                content: function () {
                                    player.chooseToDiscard([1, player.num('hej')], 'hej', true)
                                    var chat = ['你别去归隐，不复奢望！'].randomGet()
                                    player.say(chat)

                                },
                                mod: {
                                    targetEnabled: function (card, player, target) {
                                        if (_status.currentPhase == player && target.num('hej') < player.num('hej')) return false;
                                    },
                                },
                            },
                            "zz_WL": {
                                trigger: {
                                    player: "phaseUseAfter",
                                },
                                unique: true,
                                content: function () {
                                    player.init('zz_HYY')
                                    player.removeSkill('zz_WL')
                                    player.removeSkill('zz_JH')
                                    player.changeHujia();
                                    var chat = ['潜居待时，是为神智！'].randomGet()
                                    player.say(chat)


                                },
                            },
                            "zz_JH": {
                                trigger: {
                                    player: "huogongBegin",
                                },
                                content: function () {
                                    player.draw();
                                    var chat = ['发火有日，起火有时——《孙武兵法》', '齐备硫磺焰硝，待命引火！'].randomGet()
                                    player.say(chat)


                                },
                                group: "zz_JH_1",
                                subSkill: {
                                    "1": {
                                        enable: "phaseUse",
                                        filterCard: true,
                                        position: "hej",
                                        usable: 1,
                                        viewAs: {
                                            name: "huogong",
                                            suit: "club",
                                            number: 13,
                                            cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "club", "number": 13, "name": "sha", "cardid": "4536044426", "clone": { "name": "sha", "suit": "club", "number": 13, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 10043 }, "timeout": 9996, "original": "h" }],
                                        },
                                        ai: {
                                            basic: {
                                                order: 4,
                                                value: [3, 1],
                                                useful: 1,
                                            },
                                            wuxie: function (target, card, player, current, state) {
                                                if (get.attitude(current, player) >= 0 && state > 0) return false;
                                            },
                                            result: {
                                                player: function (player) {
                                                    var nh = player.countCards('h');
                                                    if (nh <= player.hp && nh <= 4 && _status.event.name == 'chooseToUse') {
                                                        if (typeof _status.event.filterCard == 'function' &&
                                                            _status.event.filterCard({ name: 'huogong' })) {
                                                            return -10;
                                                        }
                                                        if (_status.event.skill) {
                                                            var viewAs = get.info(_status.event.skill).viewAs;
                                                            if (viewAs == 'huogong') return -10;
                                                            if (viewAs && viewAs.name == 'huogong') return -10;
                                                        }
                                                    }
                                                    return 0;
                                                },
                                                target: function (player, target) {
                                                    if (target.hasSkill('huogong2') || target.countCards('h') == 0) return 0;
                                                    if (player.countCards('h') <= 1) return 0;
                                                    if (target == player) {
                                                        if (typeof _status.event.filterCard == 'function' &&
                                                            _status.event.filterCard({ name: 'huogong' })) {
                                                            return -1.5;
                                                        }
                                                        if (_status.event.skill) {
                                                            var viewAs = get.info(_status.event.skill).viewAs;
                                                            if (viewAs == 'huogong') return -1.5;
                                                            if (viewAs && viewAs.name == 'huogong') return -1.5;
                                                        }
                                                        return 0;
                                                    }
                                                    return -1.5;
                                                },
                                            },
                                            tag: {
                                                damage: 1,
                                                fireDamage: 1,
                                                natureDamage: 1,
                                                norepeat: 1,
                                            },
                                        },
                                        sub: true,
                                    },
                                },
                            },
                            "zz_QM": {
                                trigger: {
                                    player: "phaseBefore",
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('zz_QM'), function (card, player, target) {
                                        return target != player;
                                    }).set("ai", function (target) {
                                        return get.damageEffect(target, player, player);

                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('zz_QM', result.targets);
                                        result.targets[0].goMad({ player: 'phaseAfter' })
                                        var chat = ['谋当者胜，不当者亡！', '谋者，帝王术也！'].randomGet()
                                        player.say(chat)

                                    };








                                },
                            },
                            "zz_CQ": {
                                trigger: {
                                    player: "phaseEnd",
                                },
                                filter: function (event, player) {
                                    return player.num('h') > 0 && player.num('e') > 0;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('zz_CQ'), function (card, player, target) {
                                        return target != player;
                                    }).set("ai", function (target) {
                                        return get.damageEffect(target, player, player);


                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('zz_CQ', result.targets);
                                        result.targets[0].changeHujia(-100);
                                        result.targets[0].damage();
                                        result.targets[0].skip('phaseUse')
                                        player.chooseToDiscard(player.num('h'), 'h', true);
                                        player.chooseToDiscard(1, 'e', true);
                                        player.changeHujia(-100);
                                        player.changeHujia()
                                        var chat = ['秦王政，拿命来！', '我要你血债血偿！'].randomGet()
                                        player.say(chat)
                                    };








                                },
                            },
                            "zz_JX": {
                                trigger: {
                                    player: "damageEnd",
                                },
                                content: function () {
                                    var n = [1, 2, 3, 4].randomGet();
                                    if (n == 1) trigger.source.chooseToDiscard(1, 'e', true);
                                    if (n == 2) trigger.source.chooseToDiscard(1, 'h', true);
                                    if (n == 3) player.recover();
                                    if (n == 4) player.draw(2);
                                    var chat = ['宁我负人，毋人负我——《三国志》', '混账，拖出去斩了！'].randomGet()
                                    player.say(chat)




                                },
                            },
                            "zz_TY": {
                                srlose: true,
                                trigger: {
                                    global: "phaseBegin",
                                },
                                frequent: true,
                                content: function () {
                                    "step 0"
                                    if (player.isUnderControl()) {
                                        game.modeSwapPlayer(player);
                                    }
                                    var cards = get.cards(Math.min(2, game.players.length));
                                    event.cards = cards;
                                    var switchToAuto = function () {
                                        _status.imchoosing = false;
                                        if (event.dialog) event.dialog.close();
                                        if (event.control) event.control.close();
                                        var top = [];
                                        if (event.triggername == 'phaseBegin') {
                                            var judges = player.node.judges.childNodes;
                                            var stopped = false;
                                            if (!player.countCards('h', 'wuxie')) {
                                                for (var i = 0; i < judges.length; i++) {
                                                    var judge = get.judge(judges[i]);
                                                    cards.sort(function (a, b) {
                                                        return judge(b) - judge(a);
                                                    });
                                                    if (judge(cards[0]) < 0) {
                                                        stopped = true; break;
                                                    }
                                                    else {
                                                        top.unshift(cards.shift());
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            var judges = player.next.node.judges.childNodes;
                                            var stopped = false;
                                            if (get.attitude(player, player.next) > 0) {
                                                for (var i = 0; i < judges.length; i++) {
                                                    var judge = get.judge(judges[i]);
                                                    cards.sort(function (a, b) {
                                                        return judge(b) - judge(a);
                                                    });
                                                    if (judge(cards[0]) < 0) {
                                                        stopped = true; break;
                                                    }
                                                    else {
                                                        top.unshift(cards.shift());
                                                    }
                                                }
                                            }
                                        }
                                        var bottom;
                                        if (!stopped) {
                                            cards.sort(function (a, b) {
                                                return get.value(b, player) - get.value(a, player);
                                            });
                                            while (cards.length) {
                                                if (get.value(cards[0], player) <= 5) break;
                                                top.unshift(cards.shift());
                                            }
                                        }
                                        bottom = cards;
                                        for (var i = 0; i < top.length; i++) {
                                            ui.cardPile.insertBefore(top[i], ui.cardPile.firstChild);
                                        }
                                        for (i = 0; i < bottom.length; i++) {
                                            ui.cardPile.appendChild(bottom[i]);
                                        }
                                        player.popup(get.cnNumber(top.length) + '上' + get.cnNumber(bottom.length) + '下');
                                        game.log(player, '将' + get.cnNumber(top.length) + '张牌置于牌堆顶');
                                        game.delay(2);
                                    }
                                    var chooseButton = function (online, player, cards) {
                                        var event = _status.event;
                                        player = player || event.player;
                                        cards = cards || event.cards;
                                        event.top = [];
                                        event.bottom = [];
                                        event.status = true;
                                        event.dialog = ui.create.dialog('按顺序选择置于牌堆顶的牌（先选择的在上）', cards);
                                        event.switchToAuto = function () {
                                            event._result = 'ai';
                                            event.dialog.close();
                                            event.control.close();
                                            _status.imchoosing = false;
                                        },
                                            event.control = ui.create.control('ok', 'pileTop', 'pileBottom', function (link) {
                                                var event = _status.event;
                                                if (link == 'ok') {
                                                    if (online) {
                                                        event._result = {
                                                            top: [],
                                                            bottom: []
                                                        }
                                                        for (var i = 0; i < event.top.length; i++) {
                                                            event._result.top.push(event.top[i].link);
                                                        }
                                                        for (var i = 0; i < event.bottom.length; i++) {
                                                            event._result.bottom.push(event.bottom[i].link);
                                                        }
                                                    }
                                                    else {
                                                        var i;
                                                        for (i = 0; i < event.top.length; i++) {
                                                            ui.cardPile.insertBefore(event.top[i].link, ui.cardPile.firstChild);
                                                        }
                                                        for (i = 0; i < event.bottom.length; i++) {
                                                            ui.cardPile.appendChild(event.bottom[i].link);
                                                        }
                                                        for (i = 0; i < event.dialog.buttons.length; i++) {
                                                            if (event.dialog.buttons[i].classList.contains('glow') == false &&
                                                                event.dialog.buttons[i].classList.contains('target') == false)
                                                                ui.cardPile.appendChild(event.dialog.buttons[i].link);
                                                        }
                                                        player.popup(get.cnNumber(event.top.length) + '上' + get.cnNumber(event.cards.length - event.top.length) + '下');
                                                        game.log(player, '将' + get.cnNumber(event.top.length) + '张牌置于牌堆顶');
                                                    }
                                                    event.dialog.close();
                                                    event.control.close();
                                                    game.resume();
                                                    _status.imchoosing = false;
                                                }
                                                else if (link == 'pileTop') {
                                                    event.status = true;
                                                    event.dialog.content.childNodes[0].innerHTML = '按顺序选择置于牌堆顶的牌';
                                                }
                                                else {
                                                    event.status = false;
                                                    event.dialog.content.childNodes[0].innerHTML = '按顺序选择置于牌堆底的牌';
                                                }
                                            })
                                        for (var i = 0; i < event.dialog.buttons.length; i++) {
                                            event.dialog.buttons[i].classList.add('selectable');
                                        }
                                        event.custom.replace.button = function (link) {
                                            var event = _status.event;
                                            if (link.classList.contains('target')) {
                                                link.classList.remove('target');
                                                event.top.remove(link);
                                            }
                                            else if (link.classList.contains('glow')) {
                                                link.classList.remove('glow');
                                                event.bottom.remove(link);
                                            }
                                            else if (event.status) {
                                                link.classList.add('target');
                                                event.top.unshift(link);
                                            }
                                            else {
                                                link.classList.add('glow');
                                                event.bottom.push(link);
                                            }
                                        }
                                        event.custom.replace.window = function () {
                                            for (var i = 0; i < _status.event.dialog.buttons.length; i++) {
                                                _status.event.dialog.buttons[i].classList.remove('target');
                                                _status.event.dialog.buttons[i].classList.remove('glow');
                                                _status.event.top.length = 0;
                                                _status.event.bottom.length = 0;
                                            }
                                        }
                                        game.pause();
                                        game.countChoose();
                                    }
                                    event.switchToAuto = switchToAuto;
                                    if (event.isMine()) {
                                        chooseButton();
                                        event.finish();
                                    }
                                    else if (event.isOnline()) {
                                        event.player.send(chooseButton, true, event.player, event.cards);
                                        event.player.wait();
                                        game.pause();
                                    }
                                    else {
                                        event.switchToAuto();
                                        event.finish();
                                    }
                                    "step 1"
                                    if (event.result == 'ai' || !event.result) {
                                        event.switchToAuto();
                                    }
                                    else {
                                        var top = event.result.top || [];
                                        var bottom = event.result.bottom || [];
                                        for (var i = 0; i < top.length; i++) {
                                            ui.cardPile.insertBefore(top[i], ui.cardPile.firstChild);
                                        }
                                        for (i = 0; i < bottom.length; i++) {
                                            ui.cardPile.appendChild(bottom[i]);
                                        }
                                        for (i = 0; i < event.cards.length; i++) {
                                            if (!top.contains(event.cards[i]) && !bottom.contains(event.cards[i])) {
                                                ui.cardPile.appendChild(event.cards[i]);
                                            }
                                        }
                                        player.popup(get.cnNumber(top.length) + '上' + get.cnNumber(event.cards.length - top.length) + '下');
                                        game.log(player, '将' + get.cnNumber(top.length) + '张牌置于牌堆顶');
                                        game.delay(2);
                                    }
                                },
                                ai: {
                                    threaten: 1.2,
                                },
                            },
                            "木圣": {
                                enable: "chooseToRespond",
                                filterCard: true,
                                position: "he",
                                viewAs: {
                                    name: "shan",
                                },
                                ai: {
                                    basic: {
                                        useful: [7, 2],
                                        value: [7, 2],
                                    },
                                },
                            },
                            "非马": {
                                trigger: {
                                    target: "chooseToCompareBefore",
                                },
                                content: function () {
                                    trigger.untrigger();
                                    trigger.finish();
                                    player.draw(2);
                                    var chat = ['此白马耶？此非马也！', '白马非马，汝等非人！'].randomGet()
                                    player.say(chat);



                                },
                            },
                            "诡辩": {
                                trigger: {
                                    player: "phaseBefore",
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('诡辩'), [1, player.maxHp - player.hp], function (card, player, target) {
                                        return target != player;
                                    }).set("ai", function (target) {
                                        return get.damageEffect(target, player, player);

                                    });
                                    'step 1'
                                    if (result.bool) {
                                        for (var i = 0; i < result.targets.length; i++) {
                                            player.logSkill('诡辩', result.targets);
                                            result.targets[i].chooseToCompare(player);
                                            result.targets[i].chooseToDiscard(1, 'h', true)

                                            var chat = ['一较高下吧！'].randomGet()
                                            player.say(chat)



                                        }
                                    }










                                },
                            },
                            "离骚": {
                                mod: {
                                    judge: function (player, result) {
                                        if (_status.event.type == 'phase') {
                                            if (result.bool == false) {
                                                result.bool = null;
                                            }
                                            else {
                                                result.bool = false;
                                            }
                                        }
                                    },
                                },
                            },
                            "zz_MZ": {
                                enable: "phaseUse",
                                filter: function (event, player) {
                                    return player.hp > 0;
                                },
                                filterTarget: function (card, player, target) {
                                    return target.num('hej') > 0 && !target.hasSkill('zz_MZ2');
                                },
                                content: function () {
                                    target.addTempSkill('zz_MZ2', 'phaseAfter');
                                    target.chooseToDiscard(1, 'hej', true)
                                    target.draw();
                                    var chat = ['忽奔走以先后兮，及前王之崇武——《离骚》', '高余冠之岌岌兮，长余佩之陆离——《离骚》'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "天问": {
                                trigger: {
                                    player: "phaseBefore",
                                },
                                content: function () {
                                    "step 0"
                                    player.judge();
                                    var chat = ['欲少留此灵锁兮，日乎乎其将暮——《离骚》', '应龙何画？河海何历？——《天问》', '羲和之未杨，若华何光？——《天问》'].randomGet()
                                    player.say(chat);
                                    "step 1"
                                    switch (get.suit(result.card)) {
                                        case 'heart': player.recover(); break;
                                        case 'diamond': player.draw(2); break;
                                        case 'club': player.chooseToDiscard('he', 1, true); break;
                                        case 'spade': player.damage(); break;
                                    }
                                },
                                ai: {
                                    expose: 0.3,
                                },
                            },
                            "zz_MZ2": {
                            },
                            "神勇": {
                                trigger: {
                                    source: "damageEnd",
                                },
                                filter: function (event, player) {
                                    return player.hp > event.player.hp && event.player.hp > 0;
                                },
                                content: function () {
                                    "step 0"
                                    var att = get.attitude(trigger.player, player);
                                    var bool = 0;
                                    if (att < 0) {
                                        if (trigger.player.countCards('e') == 0 && trigger.player.countCards('h') > 2) bool = 1;
                                        else if (trigger.player.countCards('he') == 0) bool = 1;
                                    }
                                    else if (att == 0 && trigger.player.countCards('he') == 0) {
                                        bool = 1;
                                    }
                                    player.chooseControl(function () {
                                        return bool;
                                    }).set('prompt', '神勇').set('choiceList', ['令其弃置所有手牌', '令其弃置所有装备区里的牌']);
                                    "step 1"
                                    if (result.control == '选项一') {
                                        trigger.player.chooseToDiscard(999, 'h', true);
                                        event.finish();
                                        var chat = ['无能之辈，也想阻挡我？'].randomGet()
                                        player.say(chat);
                                    }
                                    else if (trigger.player.countCards('he')) {
                                        var chat = ['神当杀神，佛当杀佛！'].randomGet()
                                        player.say(chat)
                                        trigger.player.chooseToDiscard(999, 'e', true)
                                    }
                                    else {
                                        event.finish();
                                    }
                                },
                                ai: {
                                    threaten: 1.2,
                                },
                            },
                            "圄城": {
                                trigger: {
                                    player: "loseHpBefore",
                                },
                                forced: true,
                                unique: true,
                                content: function () {
                                    trigger.untrigger();
                                    trigger.finish();
                                    player.draw();
                                },
                                ai: {
                                    effect: {
                                        target: function (card) {
                                            if (get.tag(card, 'loseHp')) {
                                                return [0, 2];
                                            }
                                        },
                                    },
                                },
                            },
                            "守御": {
                                trigger: {
                                    player: "phaseUseBefore",
                                },
                                filter: function (event, player) {
                                    return player.num('he') > 5;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('守御'), [1, player.hp], function (card, player, target) {
                                        return true;
                                    }).set('ai', function (target) {
                                        return ai.get.attitude(player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        for (var i = 0; i < result.targets.length; i++) {
                                            var chat = ['足下放心，吾深得师父之法！', '哪里有进攻，哪里就有我！'].randomGet()
                                            player.say(chat)
                                            player.logSkill('守御', result.targets);
                                            result.targets[i].draw();
                                            player.chooseToDiscard(2, 'he', true)
                                            result.targets[i].changeHujia();
                                        }
                                    };
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num += game.players.length;
                                    },
                                },
                            },
                            "营党": {
                                enable: "phaseUse",
                                usable: 1,
                                filterCard: {
                                    name: "sha",
                                },
                                position: "h",
                                viewAs: {
                                    name: "tiesuo",
                                    suit: "club",
                                    number: 11,
                                    cards: [{ "node": { "image": {}, "info": {}, "name": {}, "name2": {}, "background": {}, "intro": {}, "range": {} }, "storage": {}, "vanishtag": [], "_uncheck": [], "suit": "club", "number": 11, "name": "sha", "cardid": "1000233289", "_transform": "translateX(336px)", "clone": { "name": "sha", "suit": "club", "number": 11, "node": { "name": {}, "info": {}, "intro": {}, "background": {}, "image": {} }, "_transitionEnded": true, "timeout": 575 }, "timeout": 550, "original": "h" }],
                                },
                                ai: {
                                    wuxie: function () {
                                        if (Math.random() < 0.5) return 0;
                                    },
                                    basic: {
                                        useful: 4,
                                        value: 4,
                                        order: 7,
                                    },
                                    result: {
                                        target: function (player, target) {
                                            if (target.isLinked()) return 1;
                                            if (get.attitude(player, target) >= 0) return -1;
                                            if (ui.selected.targets.length) return -1;
                                            if (game.hasPlayer(function (current) {
                                                return get.attitude(player, current) <= -1 && current != target && !current.isLinked();
                                            })) {
                                                return -1;
                                            }
                                            return 0;
                                        },
                                    },
                                    tag: {
                                        multitarget: 1,
                                        multineg: 1,
                                        norepeat: 1,
                                    },
                                },
                            },
                            "焚书": {
                                enable: "phaseUse",
                                usable: 1,
                                filter: function (event, player) {
                                    return player.hp > 0 && player.num('e') > 0;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('焚书'), function (card, player, target) {
                                        return target != player;
                                    }).set("ai", function (target) {
                                        return get.damageEffect(target, player, player);

                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('焚书', result.targets);
                                        result.targets[0].damage('fire');
                                        result.targets[0].chooseToDiscard(true)
                                        player.loseHp()
                                        player.chooseToDiscard(1, 'e', true)
                                        var chat = ['烧吧烧吧，让六国从此不存！'].randomGet()
                                        player.say(chat)

                                    };



                                },
                            },
                            "治邺": {
                                enable: "phaseUse",
                                usable: 1,
                                filter: function (event, player) {
                                    return player.hp > 0;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('治邺'), function (card, player, target) {
                                        return target != player && target.num('h') > player.num('h');
                                    }).set("ai", function (target) {
                                        return get.damageEffect(target, player, player);

                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('治邺', result.targets);
                                        result.targets[0].chooseToDiscard(2, 'h', true)
                                        player.chooseToDiscard(1, 'h', true)
                                        var chat = ['君上放心，吾必令邺大治！', '大胆刁民,胆敢犯我大魏之法！'].randomGet()
                                        player.say(chat)

                                    };



                                },
                            },
                            "畯法": {
                                trigger: {
                                    global: "discardAfter",
                                },
                                usable: 1,
                                filter: function (event, player) {
                                    return event.player != player && _status.currentPhase == player && event.cards && event.cards.length > 1;;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('畯法'), function (card, player, target) {
                                        return target != player;
                                    }).set("ai", function (target) {
                                        return get.damageEffect(target, player, player);

                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('畯法', result.targets);
                                        result.targets[0].damage();
                                        player.chooseToDiscard(1, 'he', true)
                                        var chat = ['刑法严明，才是兴国之道！', '来人，把她给我丢下去！', '妖言惑众，罪该诛！'].randomGet()
                                        player.say(chat);

                                    };




                                },
                            },
                            "威德": {
                                trigger: {
                                    source: "damageBegin",
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('威德'), function (card, player, target) {
                                        return target != player;
                                    }).set('ai', function (target) {
                                        return ai.get.attitude(player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('威德', result.targets);
                                        result.targets[0].draw();
                                        trigger.player.chooseToDiscard('he', true)
                                        var chat = ['君威之下，必出忠臣！', '威者所以御下也，德者所以得人心也！'].randomGet()
                                        player.say(chat)
                                    };





                                },
                            },
                            "因循": {
                                trigger: {
                                    player: "phaseDiscardBefore",
                                },
                                filter: function (event, player) {
                                    return player.num('h') > player.hp;
                                },
                                content: function () {

                                    trigger.untrigger();
                                    trigger.finish();
                                    player.draw();
                                    var chat = ['循循不可败也！', '因其势，循其道！'].randomGet()
                                    player.say(chat);
                                },
                            },
                            "权术": {
                                enable: "phaseUse",
                                usable: 1,
                                filter: function (event, player) {
                                    return player.hp > 0;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('权术'), function (card, player, target) {
                                        return target != player && target.num('hej') > 0;
                                    }).set("ai", function (target) {
                                        return get.damageEffect(target, player, player);

                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('权术', result.targets);
                                        result.targets[0].draw()
                                        player.gainPlayerCard(result.targets[0], 2, true, 'hej');
                                        event.finish();
                                        var chat = ['不明权谋而国强者，未之有也！'].randomGet()
                                        player.say(chat)

                                    };



                                },
                            },
                            "辅法": {
                                trigger: {
                                    player: "gainEnd",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return event.cards && event.cards.length > 1;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('辅法'), function (card, player, target) {
                                        return true;
                                    }).set('ai', function (target) {
                                        return get.attitude(player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('辅法', result.targets);
                                        result.targets[0].draw();
                                        var chat = ['法者，国之辅也！'].randomGet()
                                        player.say(chat)
                                    }
                                },
                            },
                            "合纵": {
                                trigger: {
                                    player: "damageEnd",
                                },
                                filter: function (event, player) {
                                    return player.hp > 0 && player.hujia < 1;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('合纵'), function (card, player, target) {
                                        return target != player;
                                    }).set('ai', function (target) {
                                        return ai.get.attitude(player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('合纵', result.targets);
                                        result.targets[0].draw();
                                        result.targets[0].changeHujia();
                                        player.draw();
                                        player.changeHujia(2);
                                        var chat = ['欲抗秦国，非合纵不可！', '一人之斗，不若二人也！'].randomGet()
                                        player.say(chat);
                                    };






                                },
                            },
                            "连横": {
                                trigger: {
                                    player: "phaseBefore",
                                },
                                filter: function (event, player) {
                                    return player.hujia > 0 && player.num('h') > 0;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('连横'), function (card, player, target) {
                                        return target != player;
                                    }).set("ai", function (target) {
                                        return get.damageEffect(target, player, player);

                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('连横', result.targets);
                                        result.targets[0].changeHujia(-999);
                                        result.targets[0].damage();
                                        result.targets[0].chooseToDiscard('he', true);
                                        player.changeHujia(-999);
                                        player.draw();
                                        player.skip('phaseDraw');
                                        var chat = ['分而破之！', '朋友，也是敌人！'].randomGet()
                                        player.say(chat);
                                    };






                                },
                            },
                            "zz_KY": {
                                trigger: {
                                    global: "phaseEnd",
                                },
                                frequent: true,
                                filter: function (event, player) {
                                    return event.player != player && player.hp < player.maxHp;
                                },
                                content: function () {
                                    player.draw()
                                    player.discardPlayerCard(trigger.player, [1, trigger.player.maxHp - trigger.player.hp], 'hej');
                                    event.finish();
                                    var chat = ['北冥有鱼，其名为鲲——《庄子》', '鲲鹏之意，汝等岂能知晓？'].randomGet()
                                    player.say(chat);

                                },
                            },
                            "zz_SR": {
                                group: ["圣人_1", "圣人_2"],
                                subSkill: {
                                    "1": {
                                        mod: {
                                            targetEnabled: function (card, player, target) {
                                                if (get.type(card) == 'delay') {
                                                    return false;
                                                }
                                            },
                                        },
                                        sub: true,
                                    },
                                    "2": {
                                        trigger: {
                                            global: "phaseBegin",
                                        },
                                        frequent: true,
                                        filter: function (event, player) {
                                            return event.player != player && player.hp > 0;
                                        },
                                        content: function () {
                                            player.draw()
                                            var chat = ['圣人常无心，以百姓之心为心——《道德经》'].randomGet()
                                            player.say(chat);
                                        },
                                        sub: true,
                                    },
                                },
                            },
                            "zz_SW": {
                                trigger: {
                                    player: "phaseBegin",
                                },
                                direct: true,
                                content: function () {
                                    "step 0"
                                    player.chooseTarget(get.prompt('师威'), function (card, player, target) {
                                        return target.isEnemyOf(player);
                                    }).set("ai", function (target) {
                                        return get.damageEffect(target, player, player);

                                    })
                                    "step 1"
                                    if (result.bool) {
                                        player.logSkill('师威', result.targets);
                                        result.targets[0].turnOver();
                                        player.chooseToDiscard(player.hp, true, 'h');
                                        var chat = ['师者，所以传道授业解惑也——《师说', '学生，就得要有学生的模样！'].randomGet()
                                        player.say(chat);
                                    }
                                },
                                ai: {
                                    threaten: 1.7,
                                },
                            },
                            "zz_SY": {
                                audio: "ext:军争包:1",
                                enable: "phaseUse",
                                unique: true,
                                skillAnimation: true,
                                position: "he",
                                mark: true,
                                filter: function (event, player) {
                                    return !player.storage.sheyu;
                                },
                                filterCard: function (card) {
                                    var suit = get.suit(card);
                                    for (var i = 0; i < ui.selected.cards.length; i++) {
                                        if (get.suit(ui.selected.cards[i]) == suit) return false;
                                    }
                                    return true;
                                },
                                selectCard: [1, 2],
                                check: function (card) {
                                    return 8 - ai.get.value(card)
                                },
                                init: function (player) {
                                    player.storage.sheyu = false;
                                },
                                content: function () {
                                    "step 0"
                                    player.storage.sheyu = true;
                                    for (var i = 0; i < cards.length; i++) {
                                        if (get.suit(cards[i]) == 'heart') {
                                            player.addSkill('mashu');
                                            lib.skill.guanxing.audioname = ['mashu'];
                                        }

                                        if (get.suit(cards[i]) == 'spade') {
                                            player.addSkill('wushuang');
                                            lib.skill.wansha.audioname = ['wushuang'];
                                        }





                                    }
                                    "step 1"
                                    player.unmarkSkill('射御');

                                },
                                ai: {
                                    order: 6,
                                    result: {
                                        player: function (player) {
                                            var cards = player.get('he');
                                            var suits = [];
                                            for (var i = 0; i < cards.length; i++) {
                                                if (!suits.contains(get.suit(cards[i]))) {
                                                    suits.push(get.suit(cards[i]));
                                                }
                                            }
                                            if (suits.length < 3) return -1;
                                            return suits.length;
                                        },
                                    },
                                },
                                intro: {
                                    content: "limited",
                                },


                            }

                        }







                    };
                    if (lib.device || lib.node) {
                        for (var i in 诸子百家.character) { 诸子百家.character[i][4].push('ext:诸子百家/' + i + '.jpg'); }
                    } else {
                        for (var i in 诸子百家.character) { 诸子百家.character[i][4].push('db:extensio-诸子百家:' + i + '.jpg'); }
                    }
                    return 诸子百家;
                });
                lib.config.all.characters.push('诸子百家');
                if (!lib.config.characters.contains('诸子百家')) {
                    lib.config.characters.push('诸子百家');
                }
                lib.translate['诸子百家_character_config'] = '诸子百家';
            };












        },
        help: {}, config: {}, package: {
            character: {
                character: {
                },
                translate: {
                },
            },
            card: {
                card: {
                },
                translate: {
                },
                list: [],
            },
            skill: {
                skill: {
                },
                translate: {
                },
            },
        }, files: { "character": [], "card": [], "skill": [] }
    }
})